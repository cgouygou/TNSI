{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#cours-de-terminale-nsi-m-gouygou","title":"Cours de Terminale NSI - M. Gouygou","text":"<p>Lien vers le site de Premi\u00e8re.</p> <p></p> <p>Mini-expos\u00e9s</p> <p>Durant toute l'ann\u00e9e, il vous sera propos\u00e9 quelques sujets de mini-expos\u00e9s (moins de 5 minutes) \u00e0 pr\u00e9parer en autonomie.</p> <ul> <li>Blue Team vs. Red Team </li> <li>Injections SQL </li> <li>Le bug de Minecraft</li> <li>Heartbleed</li> <li>Test de Turing</li> <li>Richard Stallman et le driver de l'imprimante</li> <li>Panne informatique mondiale de juillet 2024</li> </ul> <p></p> ProgrammeProgressionLiens utilesSourcesL\u00e9gende du site <p>Le programme de terminale NSI est articul\u00e9 autour de cinq th\u00e8mes.</p> <p>Nous traiterons les diff\u00e9rentes entr\u00e9es du programme dans les chapitres suivants.</p> Th\u00e8me 1Th\u00e8me 2Th\u00e8me 3Th\u00e8me 4Th\u00e8me 5 <p>Th\u00e8me 1: Structures de donn\u00e9es</p> <p>1.1 Listes cha\u00een\u00e9es </p> <p>1.2 Piles et Files </p> <p>1.3 Dictionnaires </p> <p>1.4 Arbres </p> <p>1.5 Graphes</p> <p>Th\u00e8me 2:  Langages et programmation</p> <p>2.1 Programmation orient\u00e9e objet </p> <p>2.2 R\u00e9cursivit\u00e9 </p> <p>2.3 Calculabilit\u00e9 et d\u00e9cidabilit\u00e9</p> <p>2.4 Paradigmes de programmation</p> <p>Th\u00e8me 3: Algorithmique</p> <p>3.1 Diviser pour r\u00e9gner </p> <p>3.2 Programmation dynamique</p> <p>3.3 Recherche textuelle</p> <p>Th\u00e8me 4: Bases de donn\u00e9es</p> <p>4.1 Mod\u00e8le relationnel </p> <p>4.2 Langage SQL</p> <p>Th\u00e8me 5: Architectures mat\u00e9rielles, syst\u00e8mes d'exploitation et r\u00e9seaux</p> <p>5.1 Protocoles de routage</p> <p>5.2 Gestion des processus</p> <p>5.3 S\u00e9curisation des communications</p> <p>5.4 Syst\u00e8me sur puce</p> <p>\u00c0 propos de la sp\u00e9cialit\u00e9 NSI</p> <ul> <li>Le site Eduscol </li> <li>Les troph\u00e9es NSI </li> </ul> <p>\u00c0 propos de la culture des sciences de l'informatique</p> <ul> <li> <p>Interstices </p> </li> <li> <p>Inria </p> </li> </ul> <p>\u00c0 propos de Python</p> <ul> <li>Une interview de Guido van Rossum , le cr\u00e9ateur de Python</li> </ul> <p>\u00c0 propos de l'orientation</p> <ul> <li>BD \u00e0 t\u00e9l\u00e9charger en PDF : Les d\u00e9codeuses du num\u00e9rique </li> <li>Talents du num\u00e9rique </li> <li>Une brochure int\u00e9ressante sur les m\u00e9tiers du num\u00e9rique.</li> <li>Un podcast sur les poursuites d'\u00e9tudes (CPGE MPI, IUT, Universit\u00e9) apr\u00e8s avoir choisi NSI comme sp\u00e9cialit\u00e9 au lyc\u00e9e.</li> <li>Zoom sur les m\u00e9tiers des math\u00e9matiques et de l'informatique </li> <li>Onisep </li> <li>Les m\u00e9tiers de la cybers\u00e9curit\u00e9 </li> </ul> <p>Pour se creuser la t\u00eate</p> <p>Quelques sites de challenges/\u00e9nigmes/d\u00e9fis de programmation:</p> <ul> <li>PyD\u00e9fis </li> <li>Cod\u00e9moi</li> <li>Advent of Code </li> <li>Hackinscience </li> <li>The OSINT Project </li> <li>Root me </li> <li>Try hack me </li> </ul> <p>Pour se former en autonomie</p> <p>Au cas o\u00f9 vous vous ennuieriez...</p> <ul> <li>France-IOI </li> <li>CheckIO </li> <li>CodinGame </li> </ul> <p>L'essentiel des sources des contenus de ce site:</p> <ul> <li>L'excellentissime site de Gilles Lassus : https://glassus.github.io/terminale_nsi/ </li> <li>Le site de David Roche, https://pixees.fr/informatiquelycee </li> <li>Pr\u00e9pabac NSI, Tle g\u00e9n\u00e9rale, C. Adobet, G. Connan, G. Rozsavolgyi, L. Signac, Hatier</li> <li>NSI Tle, 24 le\u00e7ons avec exercices corrig\u00e9s, T. Balabonski, S. Conchon, J-C. Fili\u00e2tre, K. Nguyen, Ellipses</li> <li>Informatique et Sciences du Num\u00e9rique, G. Dowek, Eyrolles</li> <li>Les ressources disponibles sur https://gitlab.com/eskool/profs-info et sur le forum NSI - INRIA</li> </ul> <p>Cours/\u00c0 savoir</p> <p>Remarque</p> <p>Exemple</p> <p>M\u00e9thode/algorithme</p> <p>Code/Programme</p> <p>Exercice/TP</p> <p>Astuce/conseil</p> <p>Solution/Correction</p> <p>Attention/Remarque importante</p> <p>Citation</p> <p>Histoire de l'informatique</p> <p>Video</p> <p>Lien externe</p> <p>Lien vers activit\u00e9 Capytale</p> <p>Pyd\u00e9fi - c0d1ng UP</p>"},{"location":"T01_StructuresDonnees/TP/","title":"TP d'introduction: le cr\u00eapier psycho-rigide","text":""},{"location":"T01_StructuresDonnees/TP/#tp-dintroduction-le-crepier-psycho-rigide","title":"TP d'introduction: le cr\u00eapier psycho-rigide","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c0 la fin de sa journ\u00e9e, un cr\u00eapier dispose d'une pile d\u00e9sordonn\u00e9e de cr\u00eapes. Le cr\u00eapier \u00e9tant un peu psycho-rigide, il d\u00e9cide de ranger sa pile de cr\u00eapes, de la plus grande (en bas) \u00e0 la plus petite (en haut).</p> <p>Pour cette t\u00e2che, le cr\u00eapier peut faire une seule action : glisser sa spatule entre deux cr\u00eapes et retourner le haut de la pile.</p> Pile initialeChoix d'insertion de la spatulePile retourn\u00e9e <p> </p> <p> </p> <p></p> <p>Comment doit-il proc\u00e9der pour trier toute la pile de cr\u00eapes?</p> <p>Rappels (?) de m\u00e9thodes utiles (?) sur les listes de Python</p> <ul> <li>la m\u00e9thode <code>append</code> permet un \u00e9l\u00e9ment d'ajouter en fin de liste :     <pre><code>&gt;&gt;&gt; lst = [1, 4, 7]\n&gt;&gt;&gt; lst.append(10)\n&gt;&gt;&gt; lst.append(13)\n&gt;&gt;&gt; lst\n[1, 4, 7, 10, 13]\n</code></pre></li> <li>la m\u00e9thode <code>pop</code> permet d'enlever et de renvoyer un \u00e9l\u00e9ment d'une liste (par d\u00e9faut le dernier):     <pre><code>&gt;&gt;&gt; lst.pop()\n13\n&gt;&gt;&gt; lst.pop()\n10\n&gt;&gt;&gt; lst\n[1, 4, 7]\n&gt;&gt;&gt; lst.pop(0)\n1\n&gt;&gt;&gt; lst\n[4, 7]\n</code></pre></li> </ul> <p>Indications</p> <ol> <li> <p>\u00c9crire une fonction <code>plus_grand(lst, k)</code> qui renvoie l'indice du plus grand \u00e9l\u00e9ment de la liste <code>lst</code> apr\u00e8s la position <code>k</code>.</p> <p>Exemple: </p><pre><code>&gt;&gt;&gt; pile = [149, 117, 131, 142, 125]\n&gt;&gt;&gt; plus_grand(pile, 0)\n0\n&gt;&gt;&gt; plus_grand(pile, 1)\n3\n</code></pre><p></p> </li> <li> <p>\u00c9crire une fonction <code>retourner(lst, k)</code> qui renvoie la liste retourn\u00e9e \u00e0 partir de l'indice k.</p> <p>Exemple: </p><pre><code>&gt;&gt;&gt; pile = [149, 117, 131, 142, 125]\n&gt;&gt;&gt; retourner(pile, 3)\n[149, 117, 131, 125, 142]\n</code></pre><p></p> </li> <li> <p>\u00c9crire une fonction r\u00e9cursive <code>ordonner(lst, k)</code> qui ordonne la liste <code>lst</code> \u00e0 partir de l'indice <code>k</code>.</p> </li> </ol>"},{"location":"T01_StructuresDonnees/accueil/","title":"Th\u00e8me 1 : Structures de donn\u00e9es","text":""},{"location":"T01_StructuresDonnees/accueil/#theme-1-structures-de-donnees","title":"Th\u00e8me 1 : Structures de donn\u00e9es","text":"<p>En informatique, une structure de donn\u00e9es est une mani\u00e8re d'organiser les donn\u00e9es pour les traiter plus facilement. Une structure de donn\u00e9es est une mise en \u0153uvre concr\u00e8te d'un type abstrait. </p> <p>Pour un type abstrait donn\u00e9, il faut absolument diff\u00e9rencier l'interface de l'impl\u00e9mentation:</p> <ul> <li>interface : ensemble des m\u00e9thodes qui permettent de manipuler le type abstrait;</li> <li>impl\u00e9mentation: code (Python en ce qui nous concerne) qui permet de construire les m\u00e9thodes.</li> </ul> <p>On choisit un type abstrait en fonction du probl\u00e8me \u00e0 r\u00e9soudre (choisir le bon type, c'est d\u00e9j\u00e0 r\u00e9soudre la majeure partie du probl\u00e8me) et des m\u00e9thodes \u00e0 envisager (et de leur co\u00fbt), appel\u00e9es \u00e9galement primitives.</p> <p> </p> <p>Diff\u00e9rents  types abstraits de donn\u00e9es</p> <ul> <li>tableaux (vus en premi\u00e8re)</li> <li>listes cha\u00een\u00e9es</li> <li>piles</li> <li>files</li> <li>tableaux associatifs (vus en premi\u00e8re)</li> <li>arbres</li> <li>graphes</li> </ul>"},{"location":"T01_StructuresDonnees/T1.1_Listes/T1.1_Listes/","title":"T1.1 Listes cha\u00een\u00e9es","text":""},{"location":"T01_StructuresDonnees/T1.1_Listes/T1.1_Listes/#t11-listes-chainees","title":"T1.1 Listes cha\u00een\u00e9es","text":""},{"location":"T01_StructuresDonnees/T1.1_Listes/T1.1_Listes/#111-retour-sur-les-tableaux","title":"1.1.1 Retour sur les tableaux","text":"<p>Dans une structure de tableau (array en anglais), les donn\u00e9es (ou une r\u00e9f\u00e9rence vers les donn\u00e9es) sont organis\u00e9es de mani\u00e8re s\u00e9quentielle en m\u00e9moire, o\u00f9 chaque \u00e9l\u00e9ment (ou r\u00e9f\u00e9rence) est de m\u00eame type. On peut donc calculer la position de l\u2019\u00e9l\u00e9ment (ou de la r\u00e9f\u00e9rence) en m\u00e9moire en fonction de son num\u00e9ro d\u2019ordre dans la s\u00e9quence.</p> <p>En r\u00e8gle g\u00e9n\u00e9rale, la taille du tableau est connue \u00e0 la d\u00e9claration. Dans ce cas, on ne peut pas ajouter d\u2019\u00e9l\u00e9ment au del\u00e0 de la derni\u00e8re case pr\u00e9vue.</p> <p> </p> <p>Quelques propri\u00e9t\u00e9s des tableaux :</p> <ul> <li>cr\u00e9ation d'un tableau de taille donn\u00e9e</li> <li>acc\u00e8s \u00e0 un \u00e9l\u00e9ment \u00e0 partir de son indice en temps constant (\\(O(1)\\))</li> <li>modification d\u2019un \u00e9l\u00e9ment \u00e0 partir de son indice  en temps constant (\\(O(1)\\))</li> </ul> <p>En revanche, l'insertion d'un \u00e9l\u00e9ment dans le tableau impose de d\u00e9caler tous les \u00e9lements d'un indice, elle se fait donc en temps lin\u00e9aire, soit \\(O(n)\\)...</p>"},{"location":"T01_StructuresDonnees/T1.1_Listes/T1.1_Listes/#112-liste-chainee","title":"1.1.2 Liste cha\u00een\u00e9e","text":"<p>Avec une structure de liste (cha\u00een\u00e9e), on repr\u00e9sente \u00e0 nouveau une s\u00e9quence d'\u00e9l\u00e9ments (\u00e0 nouveau le plus souvent homog\u00e8nes), mais les donn\u00e9es ne sont pas n\u00e9cessairement s\u00e9quentielles en m\u00e9moire. On dispose en revanche d'un moyen permettant de passer d'un \u00e9l\u00e9ment au suivant, d'o\u00f9 le terme cha\u00een\u00e9.</p> <p>Chaque \u00e9l\u00e9ment est donc stock\u00e9 dans un bloc m\u00e9moire avec une deuxi\u00e8me information: l'adresse de l'\u00e9l\u00e9ment suivant. On parle de maillon ou cellule (ou encore node) pour d\u00e9signer ces blocs.</p> <p> </p> <p>On peut g\u00e9n\u00e9ralement ajouter de nouveaux \u00e9l\u00e9ments pour augmenter la taille de la structure dynamiquement.</p> <p>Et finalement, une liste cha\u00een\u00e9e est soit vide, soit n'est qu'un lien vers une cellule, qui contient une valeur et un lien vers une cellule, qui est soit vide, soit n'est qu'un lien vers une cellule, qui contient une valeur et un lien vers une cellule, qui... On parle donc de d\u00e9finition r\u00e9cursive d'une liste cha\u00een\u00e9e.</p> <p>Interface</p> <p>On dispose (ou souhaite disposer) sur une liste cha\u00een\u00e9e des m\u00e9thodes/primitives suivantes:</p> <ul> <li>construire une liste vide, souvent nomm\u00e9e <code>nil</code></li> <li>d\u00e9terminer si la liste est vide (<code>est_vide</code>, <code>is_empty</code>)</li> <li>ins\u00e9rer un \u00e9l\u00e9ment en t\u00eate de liste (<code>insert</code>)</li> <li>r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment en t\u00eate de liste (<code>tete</code>, <code>head</code>)</li> <li>r\u00e9cup\u00e9rer la liste priv\u00e9e de son premier \u00e9l\u00e9ment, appel\u00e9e la queue (<code>queue</code>, <code>tail</code>)</li> </ul> <p>Ces op\u00e9rations doivent \u00eatre r\u00e9alis\u00e9es en temps constant, soit en \\(O(1)\\).</p> <p> </p> <p>Acc\u00e8s \u00e0 un \u00e9l\u00e9ment</p> <p>Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment quelconque, il faut parcourir toute la liste jusqu'\u00e0 trouver l'\u00e9l\u00e9ment: le temps d'acc\u00e8s est lin\u00e9aire, c'est-\u00e0-dire proportionnel \u00e0 la taille de la liste (en \\(O(n)\\)) et donc non constant.</p>"},{"location":"T01_StructuresDonnees/T1.1_Listes/T1.1_Listes/#113-implementation-dune-liste-chainee","title":"1.1.3 Impl\u00e9mentation d'une liste cha\u00een\u00e9e","text":"<p>On va donc impl\u00e9menter deux classes <code>Cellule</code> et <code>Liste</code> qui nous permettront de respecter l'interface demand\u00e9e, ainsi qu'une fonction <code>construire</code> et la constante <code>nil</code> repr\u00e9sentant la liste vide.</p> <p>Impl\u00e9mentation</p> <p>On ne d\u00e9finit la m\u00e9thode sp\u00e9ciale <code>__str__</code> uniquement pour v\u00e9rifier et afficher de fa\u00e7on pratique la liste.</p> <pre><code>class Cellule:\n    def __init__(self, v, p):\n        self.valeur = v\n        self.pointeur = p\n\n\nclass Liste:\n    def __init__(self, c):\n        self.cellule = c\n\n    def est_vide(self):\n        return self.cellule == None\n\n    def tete(self):\n        return self.cellule.valeur\n\n    def queue(self):\n        return self.cellule.pointeur\n\n    def __str__(self):\n        l = []\n        while not self.est_vide():\n            l.append(str(self.tete()))\n            self = self.queue()\n        return ' -&gt; '.join(l)\n\ndef construire(tete, queue):\n    return Liste(Cellule(tete, queue))\n\nnil = Liste(None)\n</code></pre> <p>Il est important de bien s\u00e9parer les deux classes <code>Liste</code> et <code>Cellule</code>, car l'attribut <code>pointeur</code> d\u2019une cellule n\u2019est pas une cellule mais bien une liste, c\u2019est-\u00e0-dire, sur le sch\u00e9ma, un lien vers une cellule.</p> <p></p>"},{"location":"T01_StructuresDonnees/T1.1_Listes/T1.1_Listes/#114-exercices","title":"1.1.4 Exercices","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>Utiliser la fonction <code>construire</code> pour cr\u00e9er la liste <code>lst</code> de l'exemple: </p> <p>Vous devez avoir ensuite: </p><pre><code>&gt;&gt;&gt; print(l)\n3 -&gt; 5 -&gt; 1\n&gt;&gt;&gt; l.tete()\n3\n&gt;&gt;&gt; l.queue()\n&lt;__main__.Liste object at 0x...&gt;\n&gt;&gt;&gt; print(l.queue())\n5 -&gt; 1\n&gt;&gt;&gt; l.queue().tete()\n5\n&gt;&gt;&gt; l.queue().queue().tete()\n1\n</code></pre><p></p> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>longueur</code> qui renvoie la longueur d'une liste en param\u00e8tre (ou ajouter la m\u00e9thode sp\u00e9ciale <code>__len__</code> \u00e0 la classe <code>Liste</code>)</p> <p>Quelle est la complexit\u00e9 de cette fonction?</p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Ajouter la m\u00e9thode <code>insert</code> \u00e0 la classe <code>Liste</code>, qui ins\u00e8re une valeur en t\u00eate de liste.</p> <pre><code>def insert(self, v):\n    L = construire(self.tete(), self.queue())\n    self.cellule.pointeur = L\n    self.cellule.valeur = v\n</code></pre> <p>Exercice  4</p> \u00c9nonc\u00e9IndicationCorrection <p>\u00c9crire une fonction <code>conversion</code> qui prend en param\u00e8tre un tableau/liste (de type <code>list</code> de Python) et le convertit en liste cha\u00een\u00e9e (de type <code>Liste</code>).</p> Exemple d'utilisation<pre><code>&gt;&gt;&gt; tab = [3, 5, 1]\n&gt;&gt;&gt; ll = conversion(tab)\n&gt;&gt;&gt; type(ll)\n&lt;class '__main__.Liste'&gt;\n&gt;&gt;&gt; print(ll)\n  3 -&gt; 5 -&gt; 1\n</code></pre> <p>La d\u00e9finition d'une liste cha\u00een\u00e9e est r\u00e9cursive... et je vous autorise exceptionnellement \u00e0 utiliser le slicing <code>tab[1:]</code>...</p> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>\u00c9crire les fonctions suivantes (r\u00e9cursivement si possible):</p> <ol> <li><code>concatener(lst1, lst2)</code> : fonction qui op\u00e8re une concat\u00e9nation de deux listes, c'est-\u00e0-dire les mettre bout \u00e0 bout.</li> <li><code>nieme(lst, n)</code> : fonction qui renvoie le n-i\u00e8me \u00e9l\u00e9ment de la liste (sashant que la t\u00eate est le \u00ab0-i\u00e8me\u00bb).</li> <li><code>occurences(x, lst)</code> : fonction qui renvoie le nombre d'occurences de la valeur <code>x</code> dans <code>lst</code>.</li> </ol> <p>Quelle est la complexit\u00e9 de ces fonctions?</p>"},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/","title":"T1.2 Piles et Files","text":""},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#t12-piles-et-files","title":"T1.2 Piles et Files","text":""},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#121-les-piles","title":"1.2.1 Les piles","text":"<p>Une pile (stack) est une structure de donn\u00e9es lin\u00e9aire contenant des \u00e9l\u00e9ments g\u00e9n\u00e9ralement homog\u00e8nes fond\u00e9e sur le principe \u00abdernier arriv\u00e9, premier sorti\u00bb (en anglais LIFO : Last In, First Out).</p> <p> </p> <p>Exemples de situations utilisant une pile:</p> <ul> <li>historiques: de navigation sur le Web, d'annulation d'instructions (Ctrl+Z)</li> <li>appels de fonctions r\u00e9cursives</li> <li>la Chandeleur</li> <li>parcours en profondeur d'un arbre/graphe (plus tard...)</li> </ul> <p>Interface</p> <p>On dispose (ou souhaite disposer) sur une pile des m\u00e9thodes/primitives suivantes:</p> <ul> <li>d\u00e9terminer si la pile est vide (<code>est_vide</code>, <code>is_empty</code>)</li> <li>empiler un nouvel \u00e9l\u00e9ment au sommet de la pile (<code>empiler</code>, <code>push</code>)</li> <li>d\u00e9piler l'\u00e9l\u00e9ment du sommet de la pile (<code>depiler</code>, <code>pop</code>) et le renvoyer</li> </ul> <p>Ces op\u00e9rations doivent \u00eatre r\u00e9alis\u00e9es en temps constant, soit en \\(O(1)\\).</p> <p> </p>"},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#122-les-files","title":"1.2.2 Les files","text":"<p>Une file (queue) est une structure de donn\u00e9es lin\u00e9aire contenant des \u00e9l\u00e9ments g\u00e9n\u00e9ralement homog\u00e8nes fond\u00e9e sur le principe \u00abpremier arriv\u00e9, premier sorti\u00bb (en anglais FIFO : Fast In, First Out).</p> <p> </p> <p>Exemples de situations utilisant une file:</p> <ul> <li>file d'attente : documents soumis \u00e0 impression, \u00e9l\u00e8ves \u00e0 la cantine...</li> <li>gestion des processus</li> <li>parcours en largeur d'un arbre/graphe (plus tard...)</li> </ul> <p>Interface</p> <p>On dispose (ou souhaite disposer) sur une file des m\u00e9thodes/primitives suivantes:</p> <ul> <li>d\u00e9terminer si la file est vide (<code>is_empty</code>)</li> <li>enfiler (ajouter) un nouvel \u00e9l\u00e9ment dans la file (<code>enqueue</code>)</li> <li>d\u00e9filer l'\u00e9l\u00e9ment de t\u00eate de la file (<code>dequeue</code>) et le renvoyer</li> </ul> <p>Ces op\u00e9rations doivent \u00eatre r\u00e9alis\u00e9es en temps constant, soit en \\(O(1)\\).</p> <p> </p>"},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#123-implementations","title":"1.2.3 Impl\u00e9mentations","text":""},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#1231-implementations-dune-pile","title":"1.2.3.1 Impl\u00e9mentations d'une pile","text":"<p>Liste Python</p> <p>L\u2019impl\u00e9mentation Python du type <code>list</code> en fait un bon candidat pour la structure de pile :<code>append</code> (pour <code>push</code>) et <code>pop</code> sont les deux op\u00e9rations utilisables sur les piles, toutes les deux en \\(O(1)\\).</p> <p>Test de l'impl\u00e9mentation</p> <p>Dans les deux exercices qui suivent, quelle que soit l'impl\u00e9mentation de la pile, le code suivant:</p> <p></p><pre><code>p = Pile()\np.empiler(\"prems\")\np.empiler(\"deuz\")\nprint(p.depiler())\np.empiler(\"troiz\")\nwhile not p.est_vide():\n    print(p.depiler())\n</code></pre> doit afficher: <pre><code>deuz\ntroiz\nprems\n</code></pre><p></p> <p>Exercice  1: avec une liste de Python</p> \u00c9nonc\u00e9Correction <p>Impl\u00e9menter une classe <code>Pile</code> contenant les m\u00e9thodes <code>est_vide</code>, <code>empiler</code> et <code>depiler</code> \u00e0 l'aide des m\u00e9thodes natives sur les listes de Python.</p> <pre><code>class Pile:\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        return self.contenu == []\n\n    def empiler(self, valeur):\n        self.contenu.append(valeur)\n\n    def depiler(self):\n        if self.est_vide():\n            raise IndexError('d\u00e9piler sur une pile vide')\n        return self.contenu.pop()\n</code></pre> <p>Exercice  2: avec une liste cha\u00een\u00e9e</p> \u00c9nonc\u00e9Correction <p>Impl\u00e9menter une classe <code>Pile</code> contenant les m\u00e9thodes <code>est_vide</code>, <code>empiler</code> et <code>depiler</code> \u00e0 l'aide d'une liste cha\u00een\u00e9e:</p> <ul> <li>empiler un nouvel \u00e9l\u00e9ment revient \u00e0 ajouter un \u00e9l\u00e9ment en t\u00eate de liste;</li> <li>d\u00e9piler un \u00e9l\u00e9ment revient \u00e0 supprimer l'\u00e9l\u00e9ment de t\u00eate.</li> </ul> <p>La classe <code>Pile</code> contient ainsi un seul attribut <code>contenu</code> associ\u00e9 \u00e0 la liste cha\u00een\u00e9e contenant les \u00e9l\u00e9ments de la pile.</p> <pre><code>class Pile:\n    def __init__(self):\n        self.contenu = Liste(None)\n\n    def est_vide(self):\n        return self.contenu.est_vide()\n\n    def empiler(self, valeur):\n        self.contenu.insert(valeur)\n\n    def depiler(self):\n        valeur = self.contenu.tete()\n        self.contenu = self.contenu.queue()\n        return valeur\n</code></pre>"},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#1232-implementations-dune-file","title":"1.2.3.2 Impl\u00e9mentations d'une file","text":"<p>Test de l'impl\u00e9mentation</p> <p>Dans les trois exercices qui suivent, quelle que soit l'impl\u00e9mentation de la file, le code suivant:</p> <p></p><pre><code>f = File()\nf.enfiler(\"prems\")\nf.enfiler(\"deuz\")\nprint(f.defiler())\nf.enfiler(\"troiz\")\nwhile not f.est_vide():\n    print(f.defiler())\n</code></pre> doit afficher: <pre><code>prems\ndeuz\ntroiz\n</code></pre><p></p> Liste PythonAvec deux pilesAvec une liste cha\u00een\u00e9e (modifi\u00e9e) <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Impl\u00e9menter une classe <code>File</code> contenant les m\u00e9thodes <code>est_vide</code>, <code>enfiler</code> et <code>defiler</code> \u00e0 l'aide des m\u00e9thodes natives sur les listes de Python (consulter l'aide sur la m\u00e9thode <code>pop</code>).</p> <pre><code>class File:\n    def __init__(self):\n        self.contenu = []\n\n    def est_vide(self):\n        return self.contenu == []\n\n    def enfiler(self, valeur):\n        self.contenu.append(valeur)\n\n    def defiler(self):\n        return self.contenu.pop(0)\n</code></pre> <p>Liste Python</p> <p>Pour une file en revanche, le type <code>list</code>  de Python ne fournit pas une bonne impl\u00e9mentation d'une file, car la suppression en d\u00e9but de liste ne se fait pas en temps constant mais en temps lin\u00e9aire \\(O(n)\\) : il faut d\u00e9caler les \u00e9l\u00e9ments un \u00e0 un.</p> <p>Le principe est de disposer d'une pile d'entr\u00e9e et d'une pile de sortie...</p> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>Terminer l'impl\u00e9mentation d'une classe <code>File</code> ayant comme attributs une pile d'entr\u00e9e et une pile de sortie.</p> <pre><code>class File:\n    def __init__(self):\n        self.entree = Pile()\n        self.sortie = Pile()\n</code></pre> <p>Cette impl\u00e9mentation respecte-t-elle la contrainte de complexit\u00e9 sur l'insertion en fin de file? la suppression en d\u00e9but de file?</p> <pre><code>class File:\n    def __init__(self):\n        self.entree = Pile()\n        self.sortie = Pile()\n\n    def est_vide(self):\n        return self.entree.est_vide() and self.sortie.est_vide()\n\n    def enfiler(self, valeur):\n        self.entree.empiler(valeur)\n\n    def defiler(self):\n        if self.sortie.est_vide():\n            while not self.entree.est_vide():\n                self.sortie.empiler(self.entree.depiler())\n        return self.sortie.depiler()\n</code></pre> <p>Comme pour une pile, on peut vouloir impl\u00e9menter une file \u00e0 l'aide d'une liste cha\u00een\u00e9e: si la suppression en t\u00eate de file (<code>defiler</code>) se fait en temps constant, en revanche l'ajout d'un \u00e9l\u00e9ment en queue de liste se fait en temps lin\u00e9aire... Il est donc n\u00e9cessaire de modifier la structure de liste cha\u00een\u00e9e en lui attribuant \u00e9galement une r\u00e9f\u00e9rence vers le dernier \u00e9l\u00e9ment de la liste: c'est une structure de type deque (double-ended queue).</p> <p>Impl\u00e9mentation d'une file avec une deque</p> <p>La principale diff\u00e9rence avec une liste cha\u00een\u00e9e est qu'il doit y avoir un attribut r\u00e9f\u00e9ren\u00e7ant le dernier \u00e9l\u00e9ment:</p> <pre><code>class File:\n    \"\"\" Impl\u00e9mentation d'une file \u00e0 partir d'une liste\n        chain\u00e9e\n    \"\"\"\n    def __init__(self):\n        self._first = None\n        self._last = None\n</code></pre> <p>Pour les m\u00e9thodes <code>enfiler</code> et <code>defiler</code>, il faut g\u00e9rer les r\u00e9f\u00e9rences \u00e0 la t\u00eate et \u00e0 la fin de la liste.</p> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>Terminer l'impl\u00e9mentation de la classe <code>File</code>.</p> <p>```python linenums='1' class File: def init(self):     self.first = None     self.last = None</p> <p>def est_vide(self):     return self.first == None</p> <p>def enfiler(self, valeur):     c = Cellule(valeur, None)     if self.last == None:         self.first = c     else:         self.last.queue = c     self.last = c</p> <p>def defiler(self):     valeur = self.first.valeur     self.first = self.first.pointeur     if self.first == None:         self.last = None     return valeur ```python</p>"},{"location":"T01_StructuresDonnees/T1.2_FifoLifo/T1.2_FifoLifo/#124-exercices","title":"1.2.4 Exercices","text":"<p>Exercice  6: calculatrice polonaise inverse</p> \u00c9nonc\u00e9IndicationCorrection <p>L'\u00e9criture polonaise inverse des expressions arithm\u00e9tiques place l'op\u00e9rateur apr\u00e8s ses op\u00e9randes. Cette notation ne n\u00e9cessite aucune parenth\u00e8se ni aucune r\u00e8gle de priorit\u00e9.</p> <p>Ainsi l'expression polonaise inverse d\u00e9crite par la cha\u00eene de caract\u00e8res: <code>'1 2 3 * + 4 *'</code> d\u00e9signe l'expression traditionnellement not\u00e9e \\((1+2\\times3)\\times4\\).</p> <p>\u00c9crire une fonction <code>eval_pol_inv</code> prenant en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant une expression en notation polonaise inverse compos\u00e9e d'additions et de multiplications de nombres entiers et renvoyant la valeur de cette expression. On supposera que les \u00e9l\u00e9ments de l'expression sont s\u00e9par\u00e9s par des espaces.</p> <p>Attention: cette fonction ne doit pas renvoyer de r\u00e9sultat (ou <code>None</code>) si l'expression est mal \u00e9crite.</p> <p>Quelques tests: </p><pre><code>assert eval_pol_inv('2 1 7 + 5 * +') == 42\nassert eval_pol_inv('1 + 2') == None\n</code></pre><p></p> <p>La valeur d'une telle expression peut \u00eatre calcul\u00e9e facilement en utilisant une pile pour stocker les r\u00e9sultats interm\u00e9diaires. Pour cela, on observe un \u00e0 un les \u00e9l\u00e9ments de l'expression et on effectue les actions suivantes :</p> <ul> <li>si on voit un nombre, on le place sur la pile;</li> <li>si on voit un op\u00e9rateur binaire, on r\u00e9cup\u00e8re les deux nombres au sommet de la pile, on leur applique l'op\u00e9rateur, et on replace le r\u00e9sultat sur la pile.</li> </ul> <p>Si l'expression \u00e9tait bien \u00e9crite, il y a bien toujours deux nombres sur la pile lorsque l'on voit un op\u00e9rateur, et \u00e0 la fin du processus il reste exactement un nombre sur la pile, qui est le r\u00e9sultat.</p> <pre><code>from TAD import Pile\n\n\ndef eval_pol_inv(expression:str) -&gt; float:\n    '''\n    renvoie l'\u00e9valuation d'une expression artithm\u00e9tique donn\u00e9e en notation \n    polonaise inverse\n    - expression : cha\u00eene de caract\u00e8re (avec op\u00e9randes entiers)\n    - retour None si expression non valide\n    '''\n    operandes = Pile()\n    for element in expression.split():\n        if element.isdecimal():\n            operandes.empiler(int(element))\n        else:\n            if operandes.est_vide():\n                return None\n            else:\n                y = operandes.depiler()\n            if operandes.est_vide():\n                return None\n            else:\n                x = operandes.depiler()\n            if element == '+':\n                resultat = x + y\n            elif element == '-':\n                resultat = x - y\n            elif element == '*':\n                resultat = x * y\n            elif element == '/':\n                resultat = x / y\n            else:\n                return None\n            operandes.empiler(resultat)\n    return operandes.depiler()\n\n\nassert eval_pol_inv('1 2 3 * + 4 *') == 28\nassert eval_pol_inv('2 1 7 + 5 * +') == 42\nassert eval_pol_inv('1 + 2') == None\n</code></pre> <p>Astuce pour aller plus vite: on associe dans un dictionnaire une fonction <code>lambda</code> \u00e0 chaque symbole op\u00e9ratoire...</p> <pre><code>operations = {'+':(lambda x,y:x+y), '-':(lambda x,y:x-y), '*':(lambda x,y:x*y), '/':(lambda x,y:x/y)}\n</code></pre> <p>Exercice  7</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on utilise une classe <code>Pile</code> impl\u00e9ment\u00e9e avec une liste de Python et poss\u00e9dant ses quatre \u00e9l\u00e9ments d'interface usuels:</p> <ul> <li>Un constructeur qui permet de cr\u00e9er une pile vide, repr\u00e9sent\u00e9e par <code>[]</code> ;</li> <li>La m\u00e9thode <code>est_vide()</code> qui renvoie <code>True</code> si l'objet est une pile ne contenant aucun \u00e9l\u00e9ment, et <code>False</code> sinon ;</li> <li>La m\u00e9thode <code>empiler</code> qui prend un objet quelconque en param\u00e8tre et ajoute cet objet au sommet de la pile. Dans la repr\u00e9sentation de la pile dans la console, cet objet appara\u00eet \u00e0 droite des autres \u00e9l\u00e9ments de la pile ;</li> <li>La m\u00e9thode <code>depiler</code> qui renvoie l'objet pr\u00e9sent au sommet de la pile et le retire de la pile.</li> </ul> <p>Exemples: </p><pre><code>&gt;&gt;&gt; mapile = Pile()\n&gt;&gt;&gt; mapile.empiler(2)\n&gt;&gt;&gt; mapile\n[2]\n&gt;&gt;&gt; mapile.empiler(3)\n&gt;&gt;&gt; mapile.empiler(50)\n&gt;&gt;&gt; mapile\n[2, 3, 50]\n&gt;&gt;&gt; mapile.depiler()\n50\n&gt;&gt;&gt; mapile\n[2, 3]\n</code></pre><p></p> <ol> <li> <p>La m\u00e9thode <code>est_triee</code> ci-dessous renvoie <code>True</code> si, en d\u00e9pilant tous les \u00e9l\u00e9ments un par un , ils sont trait\u00e9s dans l'ordre croissant, et <code>False</code> sinon. Compl\u00e9ter les lignes 6 et 8.</p> <pre><code>def est_triee(self):\n    if not self.est_vide() :\n        e1 = self.depiler()\n        while not self.est_vide():\n            e2 = self.depiler()\n            if e1 ... e2 :\n                return False\n            e1 = ...\n    return True\n</code></pre> </li> <li> <p>On cr\u00e9e dans la console la pile <code>A</code> repr\u00e9sent\u00e9e par <code>[1, 2, 3, 4]</code>.</p> <p>a. Donner la valeur renvoy\u00e9e par l'appel <code>A.est_triee()</code>.</p> <p>b. Donner le contenu de la pile <code>A</code> apr\u00e8s l'ex\u00e9cution de cette instruction.</p> </li> <li> <p>On souhaite maintenant \u00e9crire le code d'une m\u00e9thode <code>depileMax</code> d'une pile non vide ne contenant que des nombres entiers et renvoyant le plus grand \u00e9l\u00e9ment de cette pile en le retirant de la pile.</p> <p>Apr\u00e8s l'ex\u00e9cution de <code>p.depileMax()</code>, le nombre d'\u00e9l\u00e9ments de la pile <code>p</code> diminue donc de 1.</p> <p>Compl\u00e9ter les lignes 9 et 11 :</p> <pre><code>def depileMax(self):\n    assert not self.est_vide(), \"Pile vide\"\n    q = Pile()\n    maxi = self.depiler()\n    while not self.est_vide() :\n        elt = self.depiler()\n        if maxi &lt; elt :\n            q.empiler(maxi)\n            maxi = ...\n        else :\n            ...\n    while not q.est_vide():\n        self.empiler(q.depiler())\n    return maxi\n</code></pre> </li> <li> <p>On cr\u00e9e la pile <code>B</code> repr\u00e9sent\u00e9e par <code>[9, -7, 8, 12, 4]</code> et on effectue l\u2019appel <code>B.depileMax()</code>.</p> <p>a. Donner le contenu des piles <code>B</code> et <code>q</code> \u00e0 la fin de chaque it\u00e9ration de la boucle <code>while</code> de la ligne 5.</p> <p>b. Donner le contenu des piles <code>B</code> et <code>q</code> avant l\u2019ex\u00e9cution de la ligne 14.</p> <p>c. Donner un exemple de pile qui montre que l'ordre des \u00e9l\u00e9ments restants n\u2019est pas pr\u00e9serv\u00e9 apr\u00e8s l\u2019ex\u00e9cution de <code>depileMax</code>.</p> </li> <li> <p>On donne le code de la fonction <code>traite</code> :</p> <pre><code>def traite(self):\n    q = Pile()\n    while not self.est_vide():\n        q.empile(self.depile_max())\n    while not q.est_vide():\n        self.empile(q.depile())\n</code></pre> <p>a. Donner les contenus successifs des piles <code>B</code> et <code>q</code></p> <ul> <li>avant la ligne 3,</li> <li>avant la ligne 5,</li> <li>\u00e0 la fin de l'ex\u00e9cution de la fonction <code>traite</code></li> </ul> <p>lorsque la fonction <code>traite</code> est appel\u00e9e avec la pile <code>B</code> contenant <code>[1, 6, 4, 3, 7, 2]</code>.</p> <p>b. Expliquer le traitement effectu\u00e9 par cette fonction.</p> </li> </ol> <p>Exercice  8</p> \u00c9nonc\u00e9Correction <p>D'apr\u00e8s 2022, Centres \u00e9trangers, J1, Ex. 2</p> <p>Un supermarch\u00e9 met en place un syst\u00e8me de passage automatique en caisse. Un client scanne les articles \u00e0 l'aide d'un scanner de code-barres au fur et \u00e0 mesure qu'il les ajoute dans son panier.</p> <p>Les articles s'enregistrent alors dans une structure de donn\u00e9es. La structure de donn\u00e9es utilis\u00e9e est une file d\u00e9finie par la classe <code>Panier</code>, avec les primitives habituelles sur la structure de file.</p> <p>Pour faciliter la lecture, le code de la classe <code>Panier</code> n'est pas \u00e9crit.</p> <pre><code>class Panier():\n    def __init__(self):\n        \"Initialise la file comme une file vide.\"\n\n    def est_vide(self):\n        \"Renvoie True si la file est vide, False sinon.\"\n\n    def enfile(self, e):\n        \"Ajoute l'\u00e9l\u00e9ment e en derni\u00e8re position de la file, ne renvoie rien.\"\n\n    def defile(self):\n        \"Retire le premier \u00e9l\u00e9ment de la file et le renvoie.\"\n</code></pre> <p>Les articles sont repr\u00e9sent\u00e9s par des tuples <code>(code_barre, designation, prix, horaire_scan)</code> o\u00f9</p> <ul> <li><code>code_barre</code> est un nombre entier identifiant l'article ;</li> <li><code>designation</code> est une chaine de caract\u00e8res qui pourra \u00eatre affich\u00e9e sur le ticket de caisse ;</li> <li><code>prix</code> est un nombre d\u00e9cimal donnant le prix d'une unit\u00e9 de cet article ;</li> <li><code>horaire_scan</code> est un nombre entier de secondes permettant de connaitre l'heure o\u00f9 l'article a \u00e9t\u00e9 scann\u00e9.</li> </ul> <p>Le panier d'un client sera donc repr\u00e9sent\u00e9 par une file contenant les articles scann\u00e9s.</p> <ol> <li> <p>On souhaite ajouter un article dont le tuple est le suivant <code>(31002, \"caf\u00e9 noir\", 1.50, 50525)</code>.</p> <p>\u00c9crire le code utilisant une des quatre m\u00e9thodes ci-dessus permettant d'ajouter l'article \u00e0 l'objet de classe <code>Panier</code> appel\u00e9 <code>panier_1</code>.</p> </li> <li> <p>On souhaite d\u00e9finir une m\u00e9thode <code>remplir</code> de param\u00e8tre <code>panier_temp</code> dans la classe <code>Panier</code> permettant de transf\u00e9rer vers la file tout le contenu d'un autre panier <code>panier_temp</code> qui est aussi un objet de type <code>Panier</code>. Recopier et compl\u00e9ter le code de la m\u00e9thode <code>remplir</code>.</p> <pre><code>def remplir(self, panier_temp):\n    while not panier_temp. ... :\n        article = panier_temp. ...\n        self. ... (article)\n</code></pre> </li> <li> <p>Pour que le client puisse connaitre \u00e0 tout moment le montant de son panier, on souhaite ajouter une m\u00e9thode <code>prix_total</code> (sans param\u00e8tres) \u00e0 la classe <code>Panier</code> qui renvoie la somme des prix de tous les articles pr\u00e9sents dans le panier.</p> <p>\u00c9crire le code de la m\u00e9thode <code>prix_total</code>.</p> <p> Attention, apr\u00e8s l'appel de cette m\u00e9thode, le panier devra toujours contenir ses articles.</p> </li> <li> <p>Le magasin souhaite connaitre pour chaque client la dur\u00e9e du passage en caisse. Cette dur\u00e9e sera obtenue en faisant la diff\u00e9rence entre le champ <code>horaire_scan</code> du dernier article scann\u00e9 et le champ <code>horaire_scan</code> du premier article scann\u00e9 dans le panier du client. Un panier vide renverra une dur\u00e9e \u00e9gale \u00e0 <code>None</code>. On pourra accepter que le panier soit vide apr\u00e8s l'appel de cette m\u00e9thode.</p> <p>\u00c9crire une m\u00e9thode <code>duree_passage_en_caisse</code> de la classe <code>Panier</code> qui renvoie cette dur\u00e9e.</p> </li> </ol> <p>Exercice  9: files d'attente</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on se propose d'\u00e9valuer le temps d'attente de clients \u00e0 des guichets, en comparant la solution d'une unique file d'attente et la solution d'une file d'attente par guichet.</p> <p>Pour cela, on mod\u00e9lise le temps par une variable globale, qui est incr\u00e9ment\u00e9e \u00e0 chaque tour de boucle. Lorsqu'un nouveau client arrive, il est plac\u00e9 dans une file sous la forme d'un entier \u00e9gal \u00e0 la valeur de l'horloge, c'est-\u00e0-dire \u00e9gal \u00e0 son heure d'arriv\u00e9e. Lorsqu'un client est servi, c'est-\u00e0-dire lorsqu'il sort de sa file d'attente, on obtient son temps d'attente en faisant la soustraction de la valeur courante de l'horloge et de la valeur qui vient d'\u00eatre retir\u00e9e de la file.</p> <p>L'id\u00e9e est de faire tourner une telle simulation relativement longtemps, tout en totalisant le nombre de clients servis et le temps d'attente cumul\u00e9 sur tous les clients. Le rapport de ces deux quantit\u00e9s nous donne le temps d'attente moyen. On peut alors comparer plusieurs strat\u00e9gies (une ou plusieurs files, choix d'une file au hasard quand il y en a plusieurs, choix de la file o\u00f9 il y a le moins de clients, etc.).</p> <p>On se donne un nombre N de guichets (par exemple, N = 5). Pour simuler la disponibilit\u00e9 d'un guichet, on peut se donner un tableau d'entiers <code>dispo</code> de taille N. La valeur de <code>dispo[i]</code> indique le nombre de tours d'hor loge o\u00f9 le guichet <code>i</code> sera occup\u00e9. En particulier, lorsque cette valeur vaut 0, cela veut dire que le guichet est libre et peut donc servir un nouveau client. Lorsqu'un client est servi par le guichet 1, on choisit un temps de traitement pour ce client, au hasard entre 0 et N, et on l'affecte \u00e0 <code>dispo[i]</code>.</p> <p>\u00c0 chaque tour d'horloge, on r\u00e9alise deux op\u00e9rations:</p> <ul> <li>on fait appara\u00eetre un nouveau client;</li> <li>pour chaque guichet <code>i</code>:<ul> <li>s'il est disponible, il sert un nouveau client (pris dans sa propre file ou dans l'unique file, selon le mod\u00e8le), le cas \u00e9ch\u00e9ant;</li> <li>sinon, on d\u00e9cr\u00e9mente <code>dispo[i]</code>.</li> </ul> </li> </ul> <p>\u00c9crire un programme qui effectue une telle simulation, sur 100 tours d'horloge, et affiche au final le temps d'attente moyen. Comparer avec diff\u00e9rentes strat\u00e9gies.</p> <p>Exercice  10</p> \u00c9nonc\u00e9Correction <p>https://adventofcode.com/2018/day/5 </p> <p>Exercice  11</p> \u00c9nonc\u00e9Code de d\u00e9part pour les fain\u00e9ant.e.sCorrection <p>https://adventofcode.com/2022/day/5 </p> <p>On travaillera avec la situation de d\u00e9part suivante : </p> <p> </p> <p>Et ce fichier d'instructions.</p> <pre><code>data = open('input_day5.txt').read().splitlines()\n\nclass Pile:\n    def __init__(self, lst):\n        self.contenu = lst\n\n    def est_vide(self):\n        return self.contenu == []\n\n    def empiler(self, valeur):\n        self.contenu.append(valeur)\n\n    def depiler(self):\n        if self.est_vide():\n            raise IndexError(\"d\u00e9piler sur une liste vide\")\n        return self.contenu.pop()\n\npiles = [Pile(list('QMGCL')),\n         Pile(list('RDLCTFHG')),\n         Pile(list('VJFNMTWR')),\n         Pile(list('JFDVQP')),\n         Pile(list('NFMSLBT')),\n         Pile(list('RNVHCDP')),\n         Pile(list('HCT')),\n         Pile(list('GSJVZNHP')),\n         Pile(list('ZFHG'))]\n</code></pre>"},{"location":"T01_StructuresDonnees/T1.3_Dictionnaires/T1.3_Dictionnaires/","title":"T1.3 Dictionnaires","text":""},{"location":"T01_StructuresDonnees/T1.3_Dictionnaires/T1.3_Dictionnaires/#t13-dictionnaires","title":"T1.3 Dictionnaires","text":""},{"location":"T01_StructuresDonnees/T1.3_Dictionnaires/T1.3_Dictionnaires/#1-retour-sur-les-dictionnaires","title":"1. Retour sur les dictionnaires","text":"<p>Au pr\u00e9alable, on peut relire le chapitre de Premi\u00e8re.</p> <p>En Python, un dictionnaire (<code>&lt;class 'dict'&gt;</code>) est une structure de donn\u00e9es native qui permet de repr\u00e9senter le type abstrait de donn\u00e9es appel\u00e9 tableau associatif ou p-uplet nomm\u00e9 qui correspond \u00e0 un tableau dont les valeurs sont index\u00e9es par des cl\u00e9s, et dont l'interface contient g\u00e9n\u00e9ralement les op\u00e9rations:</p> <ul> <li>ajout : association d'une nouvelle valeur \u00e0 une nouvelle cl\u00e9 ;</li> <li>modification : association d'une nouvelle valeur \u00e0 une ancienne cl\u00e9 ;</li> <li>suppression : suppression d'une cl\u00e9 (et donc de la valeur);</li> <li>recherche : d\u00e9termination de la valeur associ\u00e9e \u00e0 une cl\u00e9, si elle existe.</li> </ul> <p>Puisqu'un tableau associatif est un ensemble de couples cl\u00e9:valeur, on pourrait penser l'impl\u00e9menter simplement avec une simple liste de couples. Mais ainsi la recherche d'une cl\u00e9 (pour modification, suppression ou recherche) ne correspondrait plus \u00e0 l'indice du couple dans la liste. Il faudrait donc pour chaque cl\u00e9 faire une recherche dans la liste.</p> <p><code>list</code> vs. <code>dict</code> : comparaison des temps d'ex\u00e9cution d'une recherche</p> \u00c9nonc\u00e9Correction <p>On se propose de mesurer le temps d'ex\u00e9cution d'une recherche d'un \u00e9l\u00e9ment dans une liste, et dans un dictionnaire. Pour cela on se place dans \u00able pire des cas\u00bb, c'est-\u00e0-dire o\u00f9 la valeur recherch\u00e9e n'appartient pas \u00e0 la structure \u00e9tudi\u00e9e (liste ou dictionnaire).</p> <p>On cr\u00e9e donc deux fonctions:</p> <ul> <li><code>timeit_lst</code> : construit une liste d'entiers de taille <code>N</code> donn\u00e9e en param\u00e8tre;</li> <li><code>timeit_dct</code> : construit un dictionnaire de taille <code>N</code> donn\u00e9e en param\u00e8tre dont les cl\u00e9s sont des entiers, puis qui y recherche ensuite le <code>str</code> <code>\"a\"</code>... un certain nombre de fois (<code>nbloop</code>) en mesurant le temps d'ex\u00e9cution \u00e0 l'aide de la fonction <code>time</code> du module <code>time</code> pour obtenir une moyenne.</li> </ul> <pre><code>import time\n\ndef timeit_lst(N, nbloop=10000):\n    lst = list(range(N))\n    total_time = 0\n    for _ in range(nbloop):\n        t0 = time.time()\n        \"a\" in lst\n        total_time += time.time() - t0\n    return total_time / nbloop\n\ndef timeit_dct(N, nbloop=10000):\n    dct = {k: 42 for k in range(N)}\n    total_time = 0\n    for _ in range(nbloop):\n        t0 = time.time()\n        \"a\" in dct\n        total_time += time.time() - t0\n    return total_time / nbloop\n</code></pre> <ol> <li>Ex\u00e9cuter chacune de ces deux fonctions pour les valeurs de <code>N</code> : 10, 100, 1000, 10000. Noter un ordre de grandeur des temps moyens obtenus.</li> <li>Comment augmente le temps moyen d'ex\u00e9cution de recherche dans une liste lorsque <code>N</code> est multipli\u00e9 par 10? par 100? par 1000? En d\u00e9duire la complexit\u00e9 de la recherche dans une liste.</li> <li>M\u00eames questions que pr\u00e9c\u00e9demment pour la recherche dans un dictionnaire.</li> </ol> <p>Construire un graphique</p> <p>Pour illustrer (ou observer) ces complexit\u00e9s, on peut tracer un graphique repr\u00e9sentant l'\u00e9volution du temps d'ex\u00e9cution en fonction de <code>N</code>.</p> <p>Pour cela, on utilise le module <code>matplotlib</code> en reliant des points dont les abscisses sont dans une premi\u00e8re liste (<code>tailles</code> par ex.) et les ordonn\u00e9es dans une autre (<code>temps</code> par ex.):</p> <pre><code>import matplotlib.pyplot as plt\n\n...\n\nplt.plot(tailles, temps)\nplt.show()\n</code></pre> <p>Commen\u00e7ons par cr\u00e9er une liste contenant les valeurs de N demand\u00e9es, puis les temps obtenus pour chaque fonction: </p><pre><code>tailles = [10**k for k in range(1, 5)]\ntemps_lst = [timeit_lst(t) for t in tailles]\ntemps_dct = [timeit_dct(t) for t in tailles]\n</code></pre> On consulte les r\u00e9sultats:<p></p> <pre><code>&gt;&gt;&gt; temps_lst\n[4.877660751342774e-07, 1.0341405868530274e-06, 9.165668487548829e-06, 9.01775360107422e-05]\n\n&gt;&gt;&gt; temps_dct\n[1.1785030364990235e-07, 1.2145042419433593e-07, 1.1537075042724609e-07, 1.226663589477539e-07]\n</code></pre> <p>On constate les temps d'ex\u00e9cution suivants (en ordre de grandeur, c'est-\u00e0-dire la puissance de 10 la plus proche)</p> N 10 100 1000 10000 Temps d'ex\u00e9cution pour la recherche dans une liste \\(10^{-7}\\) \\(10^{-6}\\) \\(10^{-5}\\) \\(10^{-4}\\) Temps d'ex\u00e9cution pour la recherche dans un dictionnaire \\(10^{-7}\\) \\(10^{-7}\\) \\(10^{-7}\\) \\(10^{-7}\\) <p>Autrement dit, pour la recherche dans une liste, lorsqu'on multiplie N par 10, le temps d'ex\u00e9cution est lui aussi multipli\u00e9 par 10, ce qui exprime la proportionnalit\u00e9 du temps d'ex\u00e9cution par rapport \u00e0 N : la complexit\u00e9 est lin\u00e9aire, en \\(O(n)\\).</p> <p>En revanche, pour la recherche dans un dictionnaire, le temps d'ex\u00e9cution ne varie pas: la complexit\u00e9 est en temps constant, en \\(O(1)\\).</p> <p>Cela s'illustre assez bien avec un graphique:</p> <pre><code>import matplotlib.pyplot as plt\n\n# ins\u00e9rer ici les fonctions et listes pr\u00e9c\u00e9dentes\n\nplt.plot(tailles, temps_lst, tailles, temps_dct)\nplt.show()\n</code></pre> <p> </p>"},{"location":"T01_StructuresDonnees/T1.3_Dictionnaires/T1.3_Dictionnaires/#2-table-de-hachage","title":"2. Table de hachage","text":"<p>Puisqu'un tableau classique ne convient pas, il existe principalement deux m\u00e9thodes pour impl\u00e9menter correctement un tableau associatif:</p> <ul> <li>un arbre binaire de recherche;</li> <li>une table de hachage.</li> </ul> <p>Python, avec le type <code>dict</code>, utilise une table de hachage.</p> <p>Principe d'une table de hachage</p> <p>Une table de hachage est un tableau coupl\u00e9 \u00e0 une fonction de hachage.</p> <p>Le dictionnaire <code>d = {\"pommes\":3, \"poires\":0, \"bananes\":5}</code>  sera impl\u00e9ment\u00e9 dans un tableau comme celui-ci:</p> <p> </p> <ul> <li>\u00c0 chaque nouvelle cl\u00e9, la fonction de hachage calcule un nombre entier (le \u00abhach\u00e9\u00bb, ou \u00abcondens\u00e9\u00bb): par exemple <code>\"pommes\"</code> sera hach\u00e9 en <code>7e1fd3345</code>;</li> <li>un calcul sur cet entier donne un indice correspondant \u00e0 la cl\u00e9 dans le tableau, g\u00e9n\u00e9ralement en prenant le reste de la division euclidienne de la valeur de hachage par la taille du tableau: <code>7e1fd3345</code> devient l'indice <code>4</code>;</li> <li>On obtient ainsi la position du couple (cl\u00e9, valeur) dans le tableau, pour l\u2019ajout ou pour la recherche.</li> </ul> <p>Le calcul de l\u2019indice \u00e0 partir de la cl\u00e9 s\u2019effectue donc en temps constant. Et Python sait o\u00f9 chercher une cl\u00e9: soit il la trouve \u00e0 l'indice calcul\u00e9, soit il n'y a rien et la cl\u00e9 n'appartient pas au dictionnaire.</p> <p>Collisions</p> <p>En th\u00e9orie, toutes les cl\u00e9s peuvent \u00eatre associ\u00e9es au m\u00eame indice et terminer dans la m\u00eame alv\u00e9ole (case du tableau, bucket en anglais). La recherche d\u2019une cl\u00e9 s\u2019effectue alors en \\(O(n)\\). C\u2019est le pire des cas.</p> <p>En pratique, le semblant d\u2019al\u00e9atoire de la fonction de hachage permet g\u00e9n\u00e9ralement une r\u00e9partition \u00e9quilibr\u00e9e dans le tableau avec un petit nombre de couples dans chaque alv\u00e9ole. Si le nombre de collisions (couples dans chaque alv\u00e9ole) est major\u00e9 par une constante (au plus quatre couples dans chaque alv\u00e9ole par exemple), l\u2019ajout ou la recherche d\u2019une cl\u00e9 sont en temps constant.</p> <p>En r\u00e9sum\u00e9, avec une table de hachage, l\u2019ajout ou la recherche d\u2019une valeur sont g\u00e9n\u00e9ralement en temps constant, en \\(O(1)\\), mais peuvent \u00eatre en \\(O(n)\\) dans le pire des cas. Cela d\u00e9pend des collisions.</p> <p>Cl\u00e9 non mutables</p> <p>On ne peut pas utiliser un objet mutable comme cl\u00e9: un dictionnaire a besoin d'avoir des cl\u00e9s dont les hach\u00e9s sont d\u00e9finitifs.</p> <p>Or si on prend une liste par exemple comme cl\u00e9, on pourrait la modifier en dehors et donc ne plus la trouver dans le dictionnaire puisque son hach\u00e9 (et donc son indice dans le tableau) aurait chang\u00e9!</p> <p>On dit \u00e9galement que le type <code>list</code> n'est pas hachable.</p> <pre><code>&gt;&gt;&gt; lst = [\"non\", \"hachable\"]\n&gt;&gt;&gt; dico = {lst : \"non non non\"}\nTraceback (most recent call last):\n  File \"&lt;console&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>"},{"location":"T01_StructuresDonnees/T1.3_Dictionnaires/T1.3_Dictionnaires/#3-exercices","title":"3. Exercices","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>L\u2019ARN contient le codage des prot\u00e9ines, compos\u00e9es de chaines d\u2019acides amin\u00e9s.</p> <p>Le dictionnaire ci-dessous donne les correspondances entre les codons, des s\u00e9quences d\u2019ARN constitu\u00e9s de trois nucl\u00e9otides, et les acides amin\u00e9s.</p> <p>La s\u00e9quence AUG, par exemple, correspond \u00e0 la m\u00e9thionine, not\u00e9e M.</p> <pre><code>dico_gen = {'UUU' : 'F', 'UUC' : 'F', 'UUG' : 'L', 'UUA' : 'L', 'UCU' : 'S',\n'UCC' : 'S', 'UCG' : 'S', 'UCA' : 'S', 'UAU' : 'Y', 'UAC' : 'Y',\n'UAG' : 'X', 'UAA' : 'X', 'UGU' : 'C', 'UGC' : 'C', 'UGG' : 'W',\n'UGA' : 'X', 'CUU' : 'L', 'CUC' : 'L', 'CUG' : 'L', 'CUA' : 'L',\n'CCU' : 'P', 'CCC' : 'P', 'CCG' : 'P', 'CCA' : 'P', 'CGU' : 'R',\n'CGC' : 'R', 'CGG' : 'R', 'CGA' : 'R', 'CAU' : 'H', 'CAC' : 'H',\n'CAG' : 'Q', 'CAA' : 'Q', 'ACU' : 'T', 'ACC' : 'T', 'ACG' : 'T',\n'ACA' : 'T', 'AUG' : 'M', 'AUU' : 'I', 'AUC' : 'I', 'AUA' : 'I',\n'AAU' : 'N', 'AAC' : 'N', 'AAG' : 'K', 'AAA' : 'K', 'AGU' : 'S',\n'AGC' : 'S', 'AGG' : 'R', 'AGA' : 'R', 'GUU' : 'V', 'GUC' : 'V',\n'GUG' : 'V', 'GUA' : 'V', 'GCU' : 'A', 'GCC' : 'A', 'GCG' : 'A',\n'GCA' : 'A', 'GGU' : 'G', 'GGC' : 'G', 'GGG' : 'G', 'GGA' : 'G',\n'GAU' : 'D', 'GAC' : 'D', 'GAG' : 'E', 'GAA' : 'E'}\n</code></pre> <p>\u00c9crire une fonction <code>traduction</code> qui traduit une chaine d\u2019ARN en prot\u00e9ine. On suppose que la longueur de la chaine d\u2019ARN est un multiple de trois. Ainsi, <code>traduction('UUCAGUGGG')</code> renverra <code>'FSG'</code>.</p> <pre><code>def traduction(arn:str) -&gt; str:\n    '''\n    traduit la cha\u00eene arn en suite d'acides amin\u00e9s.\n    '''\n    proteine = ''\n    for i in range(0, len(arn), 3):\n        codon = arn[i] + arn[i+1] + arn[i+2] # ou arn[i:i+3]\n        acide = dico_gen[codon]\n        proteine += acide\n    return proteine\n\nassert traduction('UUCAGUGGG') == 'FSG'\n</code></pre> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Une ville souhaite g\u00e9rer son parc de v\u00e9los en location partag\u00e9e. L\u2019ensemble de la flotte de v\u00e9los est stock\u00e9 dans une table de donn\u00e9es repr\u00e9sent\u00e9e en langage Python par un dictionnaire contenant des associations de type <code>id_velo : dict_velo</code> o\u00f9 <code>id_velo</code> est un nombre entier compris entre 1 et 199 qui correspond \u00e0 l'identifiant unique du v\u00e9lo et <code>dict_velo</code> est un dictionnaire dont les cl\u00e9s sont : <code>\"type\"</code>, <code>\"etat\"</code>, <code>\"station\"</code>. Les valeurs associ\u00e9es aux cl\u00e9s <code>\"type\"</code>, <code>\"etat\"</code>, <code>\"station\"</code> de <code>dict_velo</code> sont de type cha\u00eenes de caract\u00e8res ou nombre entier :</p> <ul> <li><code>\"type\"</code> : cha\u00eene de caract\u00e8res qui peut prendre la valeur <code>\"electrique\"</code> ou <code>\"classique\"</code>;</li> <li><code>\"\u00e9tat\"</code> : nombre entier qui peut prendre la valeur 1 si le v\u00e9lo est disponible, 0 si le v\u00e9lo est en d\u00e9placement, -1 si le v\u00e9lo est en panne;</li> <li><code>\"station\"</code> : cha\u00eenes de caract\u00e8res qui identifie la station o\u00f9 est gar\u00e9 le v\u00e9lo.</li> </ul> <p>Dans le cas o\u00f9 le v\u00e9lo est en d\u00e9placement ou en panne, <code>\"station\"</code> correspond \u00e0 celle o\u00f9 il a \u00e9t\u00e9 derni\u00e8rement stationn\u00e9. Voici un extrait de la table de donn\u00e9es :</p> <pre><code>flotte = {\n    12 : {\"type\" : \"electrique\", \"etat\" : 1, \"station\" : \"Prefecture\"},\n    80 : {\"type\" : \"classique\", \"etat\" : 0, \"station\" : \"Saint-Leu\"},\n    45 : {\"type\" : \"classique\", \"etat\" : 1, \"station\" : \"Baraban\"},\n    41 : {\"type\" : \"classique\", \"etat\" : -1, \"station\" : \"Citadelle\"},\n    26 : {\"type\" : \"classique\", \"etat\" : 1, \"station\" : \"Coliseum\"},\n    28 : {\"type\" : \"electrique\", \"etat\" : 0, \"station\" : \"Coliseum\"},\n    74 : {\"type\" : \"electrique\", \"etat\" : 1, \"station\" : \"Jacobins\"},\n    13 : {\"type\" : \"classique\", \"etat\" : 0, \"station\" : \"Citadelle\"},\n    83 : {\"type\" : \"classique\", \"etat\" : -1, \"station\" : \"Saint-Leu\"},\n    22 : {\"type\" : \"electrique\", \"etat\" : -1, \"station\" : \"Joffre\"}\n}\n</code></pre> <p><code>flotte</code> \u00e9tant une variable globale du programme.</p> <p>Toutes les questions de cet exercice se r\u00e9f\u00e8rent \u00e0 l'extrait de la table flotte fourni ci-dessus.</p> <ol> <li> <p>a. Que renvoie l'instruction <code>flotte[26]</code> ?</p> <p>b. Que renvoie l'instruction <code>flotte[80][\"etat\"]</code> ?</p> <p>c. Que renvoie l'instruction <code>flotte[99][\"etat\"]</code> ?</p> </li> <li> <p>Voici le script d'une fonction :     </p><pre><code>def proposition(choix):\n    for v in flotte:\n        if flotte[v][\"type\"] == choix and flotte[v][\"etat\"] == 1:\n            return flotte[v][\"station\"]\n</code></pre><p></p> <p>a. Quelles sont les valeurs possibles de la variable <code>choix</code> ?</p> <p>b. Expliquer ce que renvoie la fonction lorsque l'on choisit comme param\u00e8tre l'une des valeurs possibles de la variable <code>choix</code>.</p> </li> <li> <p>a. \u00c9crire un script en langage Python qui affiche les identifiants <code>(id_velo)</code> de tous les v\u00e9los disponibles \u00e0 la station<code>\"Citadelle\"</code>.</p> <p>b. \u00c9crire un script en langage Python qui permet d'afficher l'identifiant <code>(id_velo)</code> et la station de tous les v\u00e9los \u00e9lectriques qui ne sont pas en panne.</p> </li> <li> <p>On dispose d'une table de donn\u00e9es des positions GPS de toutes les stations, dont un extrait est donn\u00e9 ci-dessous. Cette table est stock\u00e9e sous forme d\u2019un dictionnaire.     Chaque \u00e9l\u00e9ment du dictionnaire est du type: <code>'nom de la station' : (latitude, longitude)</code>:</p> <pre><code>stations = {\n    'Prefecture' : (49.8905, 2.2967) ,\n    'Saint-Leu' : (49.8982, 2.3017),\n    'Coliseum' : (49.8942, 2.2874),\n    'Jacobins' : (49.8912, 2.3016)\n}\n</code></pre> <p>On admet que l'on dispose d'une fonction <code>distance</code> permettant de renvoyer la distance en m\u00e8tres entre deux positions donn\u00e9es par leurs coordonn\u00e9es GPS (latitude et longitude).</p> <p>Cette fonction prend en param\u00e8tre deux tuples repr\u00e9sentant les coordonn\u00e9es des deux positions GPS et renvoie un nombre entier repr\u00e9sentant cette distance en m\u00e8tres.</p> <p>Par exemple, <code>distance((49.8905, 2.2967), (49.8912, 2.3016))</code> renvoie <code>9591</code>.</p> <p>\u00c9crire une fonction qui prend en param\u00e8tre les coordonn\u00e9es GPS de l'utilisateur sous forme d\u2019un tuple et qui renvoie, pour chaque station situ\u00e9e \u00e0 moins de 800 m\u00e8tres de l'utilisateur :</p> <ul> <li>le nom de la station ;</li> <li>la distance entre l'utilisateur et la station ;</li> <li>les identifiants des v\u00e9los disponibles dans cette station.</li> </ul> <p>Une station o\u00f9 aucun v\u00e9lo n\u2019est disponible ne doit pas \u00eatre affich\u00e9e.</p> </li> </ol> <ol> <li> <p>a. L'instruction <code>flotte[26]</code>  renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>26</code>, c'est-\u00e0-dire le dictionnaire <code>{'type': 'classique', 'etat': 1, 'station': 'Coliseum'}</code>.</p> <p>b. L'instruction <code>flotte[80]['etat']</code> renvoie <code>0</code> .</p> <p>c. L'instruction <code>flotte[99]['etat']</code> renvoie une erreur (<code>KeyError</code>), puisqu'il n'y a pas de cl\u00e9 \u00e9gale \u00e0 <code>99</code> dans le dictionnaire <code>flotte</code>.</p> </li> <li> <p>a. Les valeurs possibles de la variable <code>choix</code> sont <code>classique</code> ou <code>electrique</code> .</p> <p>b. La fonction renvoie le nom des stations o\u00f9 des v\u00e9los du type <code>choix</code> sont disponibles.</p> </li> <li> <p>a. </p><pre><code>for v in flotte:\n    if flotte[v]['station'] == 'Citadelle' and flotte[v]['etat'] == 1:\n        print(v)\n</code></pre><p></p> <p>b. </p><pre><code>for v in flotte:\n    if flotte[v]['type'] == 'electrique' and flotte[v]['etat'] != -1:\n        print(v, flotte[v]['station'])\n</code></pre><p></p> </li> <li> <p>La liste en compr\u00e9hension ligne 6 n'est pas obligatoire mais elle est bien pratique...</p> <pre><code>def info_velo(position:tuple) -&gt; list:\n    requete = []\n    for station, coordonnees_GPS in stations.items():\n        d = distance(position, coordonnees_GPS)\n        if d &lt; 800:\n            velos_disponibles = [v for v in flotte if flotte[v]['station'] == station and flotte[v]['etat'] == 1]\n            if velos_diponibles != []:\n                requete.append((station, d, velos_disponibles))\n    return requete\n</code></pre> </li> </ol> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>La cryptographie est un ensemble de techniques permettant de chiffrer un message.</p> <p>Une technique de cryptographie consiste \u00e0 m\u00e9langer les lettres d'un alphabet et \u00e0 r\u00e9\u00e9crire le message avec ces permutations. En Python, on peut cr\u00e9er un dictionnaire dans lequel les cl\u00e9s sont les lettres de l'alphabet et les valeurs sont celles de l'alphabet m\u00e9lang\u00e9.</p> <p>Exemple</p> <p>Par exemple, si l'alphabet contient les 4 lettres A, B, C et D, et si le dictionnaire de l'alphabet m\u00e9lang\u00e9 est </p> <p></p><pre><code>alpha = {\"A\": \"B\", \"B\": \"D\", \"C\": \"A\", \"D\": \"C\"}\n</code></pre> la chaine de caract\u00e8res <code>\"BAC\"</code> sera chiffr\u00e9e <code>\"DBA\"</code>.<p></p> <p>Un tel dictionnaire sera appel\u00e9 dictionnaire de chiffrement.</p> <ol> <li> <p>On souhaite chiffrer un message \u00e9crit avec l'alphabet A, B, C, D, E, F, G \u00e0 l'aide du dictionnaire <code>alpha ={\"A\": \"B\", \"B\": \"D\", \"C\": \"A\", \"D\": \"C\", \"E\": \"F\", \"F\": \"G\", \"G\": \"E\"}</code></p> <p>a. Quelle est la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>\"D\"</code> ? En Python, comment l'obtenir ?</p> <p>b. Chiffrer la chaine de caract\u00e8res <code>\"BAGAGE\"</code> avec le dictionnaire <code>alpha</code>.</p> </li> <li> <p>On consid\u00e8re qu'un mot est une chaine de caract\u00e8res (un objet de type <code>str</code>) \u00e9crite uniquement avec les 26 lettres de l'alphabet en majuscule. Par exemple, <code>\"ARBRE\"</code> est un mot et <code>\"L'ARBRE !\"</code> n'est pas un mot \u00e0 cause des caract\u00e8res : <code>\"'\"</code>, <code>\" \"</code>(espace) et <code>\"!\"</code>.</p> <p>\u00c9crire une fonction <code>chiffre</code> qui prend en param\u00e8tres <code>mot</code> un mot et <code>alpha</code> un dictionnaire de chiffrement, telle que <code>chiffre(mot, alpha)</code> renvoie <code>mot</code> sous forme de chaine chiffr\u00e9e avec le dictionnaire de chiffrement <code>alpha</code>.</p> </li> <li> <p>On souhaite d\u00e9chiffrer un mot chiffr\u00e9 avec cette m\u00e9thode.</p> <p>a. Si un mot est chiffr\u00e9 avec le dictionnaire de chiffrement <code>alpha = {\"A\": \"B\", \"B\": \"D\", \"C\": \"A\", \"D\": \"C\", \"E\": \"F\", \"F\": \"G\", \"G\": \"E\"}</code>, donner un dictionnaire permettant de le d\u00e9chiffrer.</p> <p>b. \u00c9crire une fonction en Python appel\u00e9e <code>dico_dechiffrement</code> qui prend en param\u00e8tre <code>dico</code> un dictionnaire de chiffrement et qui renvoie un dictionnaire permettant le d\u00e9chiffrement. On pourra s'inspirer du code incomplet ci-dessous ou proposer une autre solution :</p> <pre><code>def dico_dechiffrement(dico):\n    nouveau = {}\n    for lettre in dico:\n        code = dico[...]\n        nouveau[...] = ...\n    return nouveau\n</code></pre> <p>c. \u00c9crire une fonction telle que <code>dechiffre(mot_chiffre, dico)</code> renvoie le mot d\u00e9cod\u00e9, quand <code>mot_chiffre</code> est chiffr\u00e9 par le dictionnaire de chiffrement <code>dico</code>. On utilisera les fonctions \u00e9crites dans les questions pr\u00e9c\u00e9dentes.</p> </li> <li> <p>On souhaite \u00e0 pr\u00e9sent cr\u00e9er un dictionnaire de chiffrement. \u00c9crire une fonction <code>dico_chiffrement</code> qui prend en param\u00e8tre <code>alphabet</code> un tableau de lettres et qui renvoie un dictionnaire de chiffrement dont les cl\u00e9s sont les lettres du tableau <code>alphabet</code> et les valeurs sont les lettres du tableau alphabet m\u00e9lang\u00e9es.</p> <p>On pourra utiliser la fonction <code>shuffle</code> du module <code>random</code> qui m\u00e9lange en place un tableau. Par exemple, on a :</p> <pre><code>&gt;&gt;&gt; tableau = [\"A\", \"B\", \"C\", \"D\"]\n&gt;&gt;&gt; shuffle(tableau)\n&gt;&gt;&gt; tableau\n[\"B\", \"A\", \"D\", \"C\"]\n</code></pre> </li> </ol> <ol> <li> <p>a. La valeur associ\u00e9e \u00e0 la cl\u00e9 <code>'D'</code> est <code>'C'</code>, on l'obtient en Python avec <code>alpha['D']</code>.</p> <p>b. On obtient <code>'DBEBEF'</code>.</p> </li> <li> <p>Il suffit d'utiliser une variable accumulatrice et de chiffrer en parcourant le param\u00e8tre <code>mot</code>:     </p><pre><code>def chiffre(mot:str, alpha:str) -&gt; str:\n    resultat = ''\n    for c in mot:\n        resultat = resultat + alpha[c]\n    return resultat\n</code></pre><p></p> </li> <li> <p>a. Il suffit d'inverser cl\u00e9s et valeurs, donc on peut d\u00e9chiffrer avec le dictionnaire:</p> <p><code>{'A': 'C', 'B': 'A', 'C': 'D', 'D': 'B', 'E': 'G', 'F': 'E', 'G': 'F'}</code>.</p> <p>b. On obtient:</p> <pre><code>def dico_dechiffrement(dico:dict) -&gt; dict:\n    nouveau = {}\n    for lettre in dico:\n        code = dico[lettre]\n        nouveau[code] = lettre\n    return nouveau\n</code></pre> <p>c. \u00c0 l'aide des deux derni\u00e8res fonctions, cela va tr\u00e8s vite: </p><pre><code>def dechiffre(mot_chiffre:str , dico:dict) -&gt; str:\n    dico_inverse = dico_dechiffrement(dico)\n    return chiffre(mot_chiffre, dico_inverse)\n</code></pre><p></p> </li> <li> <p>La difficult\u00e9 tient dans le fait qu'il faut faire une copie de la liste  contenant l'alphabet avant de m\u00e9langer.</p> <pre><code>import random\n\ndef dico_chiffrement(alphabet:list) -&gt; dict:\n    alpha = alphabet.copy()\n    random.shuffle(alpha)\n    dico = {}\n    for i in range(len(alphabet)):\n        dico[alphabet[i]] = alpha[i]\n    return dico\n</code></pre> </li> </ol> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>Afin d'organiser les r\u00e9pertoires et les fichiers sur un disque dur, une structure arborescente est utilis\u00e9e. Les fichiers sont dans des r\u00e9pertoires qui sont eux-m\u00eames dans d'autres r\u00e9pertoires, etc.</p> <p>Dans une arborescence, chaque r\u00e9pertoire peut contenir des fichiers et des r\u00e9pertoires, qui sont identifi\u00e9s par leur nom. Le contenu d'un r\u00e9pertoire est mod\u00e9lis\u00e9 par la structure de donn\u00e9es dictionnaire. Les cl\u00e9s de ce dictionnaire sont des chaines de caract\u00e8res donnant le nom des fichiers et des r\u00e9pertoires contenus.</p> <p>Un r\u00e9pertoire</p> <p>Un r\u00e9pertoire est repr\u00e9sent\u00e9 par un dictionnaire dont chaque cl\u00e9 est :</p> <ul> <li>soit un nom de sous r\u00e9pertoire : la valeur associ\u00e9e est alors un dictionnaire repr\u00e9sentant le contenu de ce sous r\u00e9pertoire.</li> <li>soit un nom de fichier : la valeur associ\u00e9e est alors un entier, repr\u00e9sentant la taille du fichier en ko.</li> </ul> <p>Un fichier est donc une cl\u00e9 d'un r\u00e9pertoire(dictionnaire) dont la valeur associ\u00e9e est un entier.</p> <p>Exemple illustr\u00e9</p> <p>Le r\u00e9pertoire appel\u00e9 <code>T\u00e9l\u00e9chargements</code> contient deux fichiers <code>rapport.pdf</code> et <code>jingle.mp3</code> ainsi qu'un r\u00e9pertoire <code>Images</code> contenant simplement le fichier <code>logo.png</code>.</p> <p>Il est repr\u00e9sent\u00e9 ci-dessous.</p> <p> </p> <p>Ce r\u00e9pertoire <code>T\u00e9l\u00e9chargements</code> est mod\u00e9lis\u00e9 en Python par le dictionnaire suivant :</p> <p><code>{\"Images\": {\"logo.png\": 36}, \"rapport.pdf\": 450, \"jingle.mp3\": 4800}</code></p> <p>Les valeurs num\u00e9riques sont exprim\u00e9es en ko (kilo-octets).</p> <p><code>\"logo.png\": 36</code> signifie que le fichier <code>logo.png</code> occupe un espace m\u00e9moire de 36 ko sur le disque dur.</p> <p>On rappelle, ci-dessous, quelques commandes sur l'utilisation d'un dictionnaire :</p> <ul> <li><code>dico = dict()</code> cr\u00e9e un dictionnaire vide appel\u00e9 <code>dico</code>,</li> <li><code>dico[cle] = contenu</code> met la valeur <code>contenu</code> pour la cl\u00e9 <code>cle</code> dans le dictionnaire <code>dico</code>,</li> <li><code>dico[cle]</code> renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9 <code>cle</code> dans le dictionnaire <code>dico</code>,</li> <li><code>cle in dico</code> renvoie un bool\u00e9en indiquant si la cl\u00e9 <code>cle</code> est pr\u00e9sente dans le dictionnaire <code>dico</code>.</li> <li><code>for cle in dico:</code> permet d'it\u00e9rer sur les cl\u00e9s d'un dictionnaire.</li> <li><code>len(dico)</code> renvoie le nombre de cl\u00e9s d'un dictionnaire.</li> </ul> <p>L'adresse d'un fichier ou d'un r\u00e9pertoire correspond au nom de tous les r\u00e9pertoires \u00e0 parcourir depuis la racine afin d'acc\u00e9der au fichier ou au r\u00e9pertoire. Cette adresse est mod\u00e9lis\u00e9e en Python par la liste des noms de r\u00e9pertoire \u00e0 parcourir pour y acc\u00e9der.</p> <p>Par exemple, l'adresse du r\u00e9pertoire : <code>/home/pierre/Documents/</code> est mod\u00e9lis\u00e9e par la liste <code>[\"home\", \"pierre\", \"Documents\"]</code>.</p> <ol> <li> <p>Dessiner l'arbre donn\u00e9 par le dictionnaire <code>docs</code> suivant, qui correspond au r\u00e9pertoire <code>\"Documents\"</code>.</p> <pre><code>docs = {\n    \"Administratif\":{\n        \"certificat_JDC.pdf\": 1500,\n        \"attestation_recensement.pdf\": 850\n    },\n    \"Cours\": {\n        \"NSI\": {\n            \"TP.html\": 60,\n            \"dm.odt\": 345\n        },\n        \"Philo\": {\n            \"Tractatus_logico-philosophicus.epub\": 2600\n        }\n    },\n    \"liste_de_courses.txt\": 24\n}\n</code></pre> </li> <li> <p>On donne la fonction <code>parcourt</code> suivante qui prend en param\u00e8tres un r\u00e9pertoire racine et une liste repr\u00e9sentant une adresse, et qui renvoie le contenu du r\u00e9pertoire cible correspondant \u00e0 l'adresse.</p> <p>Exemple : Si la variable <code>docs</code> contient le dictionnaire de l'exemple de la question 1 alors <code>parcourt(docs, [\"Cours\", \"Philo\"])</code> renvoie le dictionnaire <code>{\"Tractatus_logico-philosophicus.epub\": 2600}</code>.</p> <p>a. Recopier et compl\u00e9ter la ligne 4:</p> <pre><code>def parcourt(racine, adr):\n    repertoire = racine\n    for nom_repertoire in adr:\n        repertoire = ...\n    return repertoire\n</code></pre> <p>b. Soit la fonction suivante :</p> <pre><code>def affiche(racine, adr, nom_fichier):\n    repertoire = parcourt(racine, adr)\n    print(repertoire[nom_fichier])\n</code></pre> <p>Qu'affiche l'instruction <code>affiche(docs, [\"Cours\", \"NSI\"], \"TP.html\")</code> sachant que la variable <code>docs</code> contient le dictionnaire de la question 1 ?</p> </li> <li> <p>a. La fonction <code>ajoute_fichier</code> suivante, de param\u00e8tres <code>racine</code>, <code>adr</code>, <code>nom_fichier</code> et <code>taille</code>, ajoute au dictionnaire <code>racine</code>, \u00e0 l'adresse <code>adr</code>, la cl\u00e9 <code>nom_fichier</code> associ\u00e9 \u00e0 la valeur <code>taille</code>.</p> <p>Une ligne de la fonction donn\u00e9e ci-dessous contient une erreur. Laquelle ? Proposer une correction.</p> <pre><code>def ajoute_fichier(racine, adr, nom_fichier, taille):\n    repertoire = parcourt(racine, adr)\n    taille = repertoire[nom_fichier]\n</code></pre> <p>b. \u00c9crire une fonction <code>ajoute_repertoire</code> de param\u00e8tres <code>racine</code>, <code>adr</code> et <code>nom_repertoire</code> qui cr\u00e9e un dictionnaire repr\u00e9sentant un r\u00e9pertoire vide appel\u00e9 <code>nom_repertoire</code> dans le dictionnaire <code>racine</code> \u00e0 l'adresse <code>adr</code>.</p> </li> <li> <p>a. </p> <p><code>isinstance</code> pour v\u00e9rifier le type d'une variable</p> <p><code>isinstance(variable, A)</code> renvoie <code>True</code> si <code>variable</code> est de type <code>A</code> et <code>False</code> sinon.</p> <p><code>A</code> peut \u00eatre le type <code>int</code>, <code>dict</code> ou tout autre type Python.</p> <p>\u00c9crire une fonction <code>est_fichier</code> de param\u00e8tres <code>repertoire</code> et <code>cle</code>, o\u00f9 <code>cle</code> est une cl\u00e9 du dictionnaire <code>repertoire</code>, qui d\u00e9termine si <code>cle</code> correspond \u00e0 un fichier ou non. Si <code>cle</code> n'est pas une cl\u00e9 de <code>repertoire</code>, la fonction doit provoquer une erreur.</p> <p>On pourra compl\u00e9ter le code suivant ou en proposer un autre.</p> <pre><code>def est_fichier(repertoire, cle):\n    return ...\n</code></pre> <p>b. \u00c9crire une fonction <code>taille</code> de param\u00e8tre <code>racine</code> qui prend en param\u00e8tre un dictionnaire <code>racine</code> mod\u00e9lisant un r\u00e9pertoire et qui renvoie le total d'espace m\u00e9moire occup\u00e9 par les fichiers contenus dans ce r\u00e9pertoire et ceux qu'il contient, de mani\u00e8re r\u00e9cursive.</p> </li> </ol> <ol> <li> <p>Voici l'arbre obtenu:</p> <p> </p> </li> <li> <p>a.  On \u00abplonge\u00bb dans chacun des dictionnaires successifs:     </p><pre><code>def parcourt(racine, adr):\n    repertoire = racine\n    for nom_repertoire in adr:\n        repertoire = repertoire[nom_repertoire]\n    return repertoire\n</code></pre> b. La fonction affiche la valeur associ\u00e9 \u00e0 la cl\u00e9 <code>nom_fichier</code> du dictionnaire obtenu par parcours, c'est-\u00e0-dire <code>60</code>.<p></p> </li> <li> <p>a. L'affectation ligne 3 est invers\u00e9e, il faut \u00e9crire <code>repertoire[nom_fichier] = taille</code> </p> <p>b. On s'inspire de la fonction pr\u00e9c\u00e9dente:</p> <pre><code>def ajoute_repertoire(racine, adr, nom_repertoire):\n    repertoire = parcourt(racine, adr)\n    repertoire[nom_repertoire] = dict()\n</code></pre> </li> <li> <p>a. On v\u00e9rifie simplement si la valeur associ\u00e9e \u00e0 <code>cle</code> est de type <code>int</code> .</p> <pre><code>def est_fichier(repertoire, cle):\nreturn isinstance(repertoire[cle], int)\n</code></pre> <p>b. L'\u00e9criture est d\u00e9licate ici car le cas de base est \u00e0 l'int\u00e9rieur de la boucle qui parcourt les cl\u00e9s du dictionnaire: si la cl\u00e9 est un fichier, on renvoie sa taille, sinon on appelle r\u00e9cursivement la fonction sur la cl\u00e9 qui est alors un (sous-)r\u00e9pertoire.</p> <pre><code>def taille(racine):\n    s = 0\n    for cle in racine:\n        if est_fichier(racine, cle):\n            s += racine[cle]\n        else:\n            s += taille(racine[cle])\n    return s\n</code></pre> </li> </ol>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.1_Arbres/","title":"T1.4.1 G\u00e9n\u00e9ralit\u00e9s sur les arbres","text":""},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.1_Arbres/#t141-generalites-sur-les-arbres","title":"T1.4.1 G\u00e9n\u00e9ralit\u00e9s sur les arbres","text":""},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.1_Arbres/#1-notion-darbre","title":"1. Notion d'arbre","text":"<p>Un arbre est une structure de donn\u00e9es qui permet de repr\u00e9senter des donn\u00e9es structur\u00e9es de fa\u00e7on hi\u00e9rarchique. On trouve beaucoup d'applications en informatique...</p> <p>Exemples</p> Exemple 12345678 <p>Arbre de classification des esp\u00e8ces animales</p> <p> </p> <p>DOM  d'une page web  </p> <p>Arborescence de fichiers  </p> <p>Analyse grammaticale d'une phrase  </p> <p>Analyse d'une expression alg\u00e9brique \\((x+1) \\times (3\\times y+2)\\) </p> <p>Arbre de jeu </p> <p>Arbre minimal couvrant (graphes)  </p> <p>Arbre des appels d'une fonction r\u00e9cursive  </p> <p>Vocabulaire</p> <p>Un arbre est un ensemble de n\u0153uds reli\u00e9s par des ar\u00eates, de sorte que chaque n\u0153ud poss\u00e8de un unique parent, sauf un, appel\u00e9 racine de l'arbre.</p> <p>On parle aussi d'arbre enracin\u00e9.</p> <p>Il existe deux types de n\u0153uds:</p> <ul> <li>les n\u0153uds internes qui poss\u00e8dent des successeurs (fils);</li> <li>les feuilles (ou n\u0153uds externes) qui ne poss\u00e8dent pas de fils.</li> </ul> <p>\u00c0 chaque sommet est associ\u00e9 une \u00e9tiquette ou valeur.</p> <p> </p> Exemples <p>Dans l'arbre pr\u00e9c\u00e9dent,</p> <ul> <li>la racine est le sommet \u00e9tiquet\u00e9 A;</li> <li>les n\u0153uds internes sont : B, C, H, K et L;</li> <li>les feuilles sont : D, E, F, G, I, J, M et N;</li> <li>par exemple, B est le p\u00e8re de C et F;</li> <li>par exemple, L et N sont les fils de K.</li> </ul>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.1_Arbres/#2-sous-arbre","title":"2. Sous-arbre","text":"<p>En ne consid\u00e9rant que le n\u0153ud B et ses descendants, on obtient un nouvel arbre qu'on appelle sous-arbre de racine B.</p> <p> </p> <p>Structure r\u00e9cursive</p> <p>On peut donc voir un arbre comme une structure de donn\u00e9es r\u00e9cursive (ce sera utile pour les algorithmes utilisant des arbres): </p> <ul> <li>soit l'arbre est r\u00e9duit \u00e0 un seul n\u0153ud, sa racine (cas de base);</li> <li>soit l'arbre est constitu\u00e9 d'une racine R et d'un ensemble de sous-arbres dont les racines sont les fils de R.</li> </ul>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.1_Arbres/#3-caracteristiques","title":"3. Caract\u00e9ristiques","text":"<p>D\u00e9finitions</p> <ul> <li>la taille d'un arbre est le nombre de ses n\u0153uds (un arbre sans n\u0153ud est un arbre vide, de taille 0);</li> <li>la profondeur d'un n\u0153ud est le nombre de n\u0153uds du chemin le plus court vers la racine;</li> <li>un niveau de l'arbre est constitu\u00e9 des n\u0153uds de m\u00eame profondeur;</li> <li>la hauteur d'un arbre est la plus grande profondeur d'un de ses n\u0153uds. En particulier, un arbre vide a une hauteur de 0 et un arbre r\u00e9duit \u00e0 un seul n\u0153ud (la racine) a une hauteur de 1.</li> </ul> <p>Diff\u00e9rentes d\u00e9finitions de la hauteur</p> <p>Parfois (dans certains livres ou sujets de bac) on peut trouver une autre d\u00e9finition de la hauteur, comme le nombre d'ar\u00eates du chemin le plus long. Ainsi, un arbre r\u00e9duit \u00e0 sa racine a pour hauteur 0, et l'arbre vide a pour hauteur ... -1 .</p> <p>Il est donc important de bien lire la d\u00e9finition donn\u00e9e en introduction du probl\u00e8me.</p> <p>Exercice</p> \u00c9nonc\u00e9Correction <p>Dans l'arbre donn\u00e9 pr\u00e9c\u00e9demment en exemple, d\u00e9terminer:</p> <ol> <li>la taille de l'arbre.</li> <li>la profondeur des n\u0153uds B, J, E, M.</li> <li>le niveau 3 de l'arbre.</li> <li>la hauteur de l'arbre.</li> </ol> <ol> <li>la taille de cet arbre est 14.</li> <li>B, J, E, M ont pour profondeurs respectives 2, 3, 4 et 5.</li> <li>Le niveau 3 de l'arbre est constitu\u00e9 des n\u0153uds C, F, I, J et K.</li> <li>la hauteur de l'arbre est 5.</li> </ol>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/","title":"T1.4.2 Arbres binaires","text":""},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#t142-arbres-binaires","title":"T1.4.2 Arbres binaires","text":"<p>Vocabulaire</p> Arbre binaireSous-arbres <p>Un arbre est binaire si chacun de ses n\u0153uds poss\u00e8de au plus deux fils: un fils gauche et un fils droit.</p> <p> </p> <ul> <li> <p>L'arbre est dit complet si tous les n\u0153uds internes poss\u00e8dent exactement deux fils (ce qui n'est pas le cas de l'arbre pr\u00e9c\u00e9dent, le n\u0153ud Y n'ayant qu'un fils gauche).</p> </li> <li> <p>L'arbre est dit \u00e9quilibr\u00e9 si seul le dernier niveau est (\u00e9ventuellement) incomplet, sa hauteur est donc minimale par rapport \u00e0 sa taille. C'est le cas de l'arbre pr\u00e9c\u00e9dent.</p> </li> <li> <p>L'arbre est parfait si son dernier niveau est complet: il est de taille maximale par rapport \u00e0 sa hauteur.</p> </li> </ul> <p>Les sous-arbres sont alors appel\u00e9s sous-arbre gauche et  sous-arbre droit.</p> <p></p> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <ol> <li>Dessiner un arbre binaire \u00e9quilibr\u00e9 (non parfait) de hauteur 4.</li> <li>Dessiner un arbre binaire parfait de hauteur 4.</li> </ol>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#1-taille-et-hauteur-dun-arbre-binaire","title":"1. Taille et hauteur d'un arbre binaire","text":"<p>Exercice  2</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Construire un arbre binaire de hauteur \\(h\\) (par exemple \\(h=4\\)) poss\u00e9dant le moins de n\u0153uds possibles.</p> <p>Quelle est sa taille \\(n\\)?</p> </li> <li> <p>Construire un arbre binaire de hauteur \\(h\\) (par exemple \\(h=4\\)) poss\u00e9dant le plus de n\u0153uds possibles.</p> <p>Quelle est sa taille \\(n\\)?</p> </li> </ol> Encadrement de la taille d'un arbre <p>Pour un arbre binaire de taille \\(n\\) et de hauteur \\(h\\):</p> \\[h \\leqslant n \\leqslant 2^{h} - 1\\] <p>Exercice  3</p> \u00c9nonc\u00e9Correction <ol> <li>Donner un encadrement de la taille d'un arbre de hauteur 6.</li> <li>Donner un encadrement de la hauteur d'un arbre de taille 24.</li> </ol> <ol> <li>Pour \\(h=6\\), on a \\(2^6-1=63\\) donc on obtient \\(6 \\leqslant n \\leqslant 63\\).</li> <li> <p>Pour \\(n=24\\), on a \\(h \\leqslant 24 \\leqslant 2^h-1\\), donc on a tout de suite \\(h \\leqslant 24\\).     Ensuite, en essayant plusieurs valeurs de \\(h\\), on trouve que la plus petite valeur de \\(h\\) telle que \\(24 \\leqslant 2^h-1\\) est 5.</p> <p>Donc \\(5 \\leqslant h \\leqslant 24\\).</p> </li> </ol>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#2-parcours-dun-arbre-binaire","title":"2. Parcours d'un arbre binaire","text":"<p>L'int\u00e9r\u00eat des arbres est de stocker de l'information - les \u00e9tiquettes - de fa\u00e7on structur\u00e9e. Il est donc important de savoir comment parcourir un arbre pour avoir acc\u00e8s \u00e0 tous les n\u0153uds et les traiter.</p>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#21-parcours-en-largeur-bfs","title":"2.1 Parcours en largeur (BFS)","text":"<p>Parcours en largeur</p> <p>Le parcours en largeur d'abord (ou BFS pour Breadth-First Search) consiste  \u00e0 parcourir l'arbre niveau par niveau.</p> <p>Les n\u0153uds de niveau 0 sont sont d'abord parcourus puis les n\u0153uds de niveau 1 et ainsi de suite.</p> <p>Dans chaque niveau, les n\u0153uds sont parcourus de la gauche vers la droite.</p> <p> </p> Exemple <p>Le parcours en largeur de l'arbre ci-dessus parcourt les n\u0153uds dans l'ordre T-Y-O-P-H-N.</p> <p>Algorithme de parcours en largeur</p> <p>Le principe est d'utiliser une file:</p> <ul> <li>on commence par enfiler la racine de l'arbre;</li> <li>puis tant que la file n'est pas vide:<ul> <li>on d\u00e9file un n\u0153ud;</li> <li>on traite le n\u0153ud;</li> <li>on enfile les fils du n\u0153ud (s'il en poss\u00e8de)</li> </ul> </li> </ul>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#22-parcours-en-profondeur-dfs","title":"2.2 Parcours en profondeur (DFS)","text":"<p>Parcours en profondeur</p> <p>Le parcours en profondeur d'abord( ou DFS pour Depth-First Search) consiste \u00e0 poursuivre un chemin jusqu'\u00e0 rencontrer une feuille, puis revenir au dernier n\u0153ud o\u00f9 l'on pouvait explorer un autre chemin, etc. Il se d\u00e9finit de mani\u00e8re r\u00e9cursive sur les sous-arbres de l'arbre.</p> <p>Il existe plusieurs parcours d'arbres en profondeur, selon que le traitement de la racine a lieu avant l'exploration des sous-arbres (parcours pr\u00e9fixe), entre celle du sous-arbre gauche et celle du sous-arbre droit (parcours infixe) ou apr\u00e8s l'exploration des sous-arbres (parcours postfixe/suffixe).</p> <p>Algorithmes de parcours en profondeur</p> Parcours pr\u00e9fixeParcours infixeParcours postfixe <p>En pseudo-code: </p><pre><code>fonction parcours(A: arbre):\n    si A est non vide alors:\n        traiter(A.racine)       # pr\u00e9fixe: traitement de la racine avant les appels r\u00e9cursifs\n        parcours(A.fils_gauche)\n        parcours(A.fils_droit)\n</code></pre><p></p> <p> </p> <p>Sur cet arbre, le parcours pr\u00e9fixe donne : \\(\\quad\\times \\quad - \\quad x \\quad1\\quad+\\quad y\\quad3\\)</p> <p>En pseudo-code: </p><pre><code>fonction parcours(A: arbre):\n    si A est non vide alors:\n        parcours(A.fils_gauche)\n        traiter(A.racine)       # infixe: traitement de la racine entre les appels r\u00e9cursifs\n        parcours(A.fils_droit)\n</code></pre><p></p> <p> </p> <p>Sur cet arbre, le parcours infixe donne : \\(\\quad x\\quad -\\quad1 \\quad \\times \\quad y \\quad+\\quad 3\\)</p> <p>En pseudo-code: </p><pre><code>fonction parcours(A: arbre):\n    si A est non vide alors:\n        parcours(A.fils_gauche)\n        parcours(A.fils_droit)\n        traiter(A.racine)       # postfixe: traitement de la racine apr\u00e8s les appels r\u00e9cursifs\n</code></pre><p></p> <p> </p> <p>Sur cet arbre, le parcours postfixe donne : \\(\\quad x\\quad 1\\quad-\\quad y\\quad3\\quad+\\quad\\times\\)</p>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#3-implementation-dun-arbre-binaire","title":"3. Impl\u00e9mentation d'un arbre binaire","text":"<p>Python ne propose pas de fa\u00e7on native l\u2019impl\u00e9mentation des arbres binaires.</p> <p>On va utiliser la POO pour cr\u00e9er une classe <code>AB</code> (pour Arbre Binaire), en utilisant le caract\u00e8re r\u00e9cursif d'un arbre: une racine, et \u00e9ventuellement un sous-arbre gauche et un sous-arbre droit.</p> <p>Classe <code>AB</code></p> <pre><code>class AB:\n    def __init__(self, racine=None):\n        self.racine = racine\n        if self.racine is not None:\n            self.gauche = AB()\n            self.droit = AB()\n</code></pre> <p>On peut alors cr\u00e9er l'arbre ci-apr\u00e8s de cette mani\u00e8re:</p> <pre><code>a = AB(4)\na.gauche = AB(3)\na.droit = AB(1)\na.droit.gauche = AB(2)\na.droit.droit = AB(7)\na.gauche.gauche = AB(6)\na.droit.droit.gauche = AB(9)\n</code></pre> <p> </p> <p>Pour contr\u00f4ler la construction de nos arbres binaires, on utilisera les m\u00e9thodes suivantes \u00e0 ins\u00e9rer dans la classe <code>AB</code>:</p> <pre><code>def affiche(self, indent = 0):\n    s = ' '*2*indent + '|_' + str(self.racine) + '\\n'\n    if not self.gauche.est_vide():\n        s += self.gauche.affiche(indent + 1)\n    if self.gauche.est_vide() and not self.droit.est_vide():\n        s += ' '*(2*indent+2) + '|' + '_' + 'None' + '\\n'     \n\n    if not self.droit.est_vide():\n        s += self.droit.affiche(indent + 1)\n    if self.droit.est_vide() and not self.gauche.est_vide():\n        s += ' '*(2*indent+2) + '|' + '_' + 'None' + '\\n'  \n    return s\n\ndef __repr__(self):\n    return self.affiche(0)\n</code></pre> <p>Ainsi, une fois l'arbre <code>a</code> pr\u00e9c\u00e9dent cr\u00e9\u00e9, on peut l'afficher rapidement en console gr\u00e2ce \u00e0 la m\u00e9thode magique <code>__repr__</code>: </p><pre><code>&gt;&gt;&gt; a\n|_4\n    |_3\n        |_6\n        |_None\n    |_1\n        |_2\n        |_7\n            |_9\n            |_None\n</code></pre><p></p> <p>\u00c0 faire!</p> <p>La m\u00e9thode d'affichage <code>affiche</code> utilise une m\u00e9thode  <code>est_vide</code> manquante pour l'instant dans la classe <code>AB</code>.</p> <p>Impl\u00e9menter cette m\u00e9thode, puis tester les codes pr\u00e9c\u00e9dents dans un fichier <code>arbre_binaire.py</code> par exemple.</p>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.2_Arbres_binaires/#4-exercices","title":"4. Exercices","text":"<p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>Dessiner:</p> <ol> <li>les arbres binaires \u00e0 1 n\u0153ud;</li> <li>les arbres binaires \u00e0 2 n\u0153uds;</li> <li>les arbres binaires \u00e0 3 n\u0153uds;</li> <li>les arbres binaires \u00e0 4 n\u0153uds;</li> <li>Sans les dessiner, d\u00e9nombrer le nombre d'arbres binaires \u00e0 5 n\u0153uds.</li> </ol> <p>Compter r\u00e9cursivement le nombre d'arbres binaires \u00e0 \\(n\\) n\u0153uds:</p> <pre><code>def nb_arbre(n:int) -&gt; int:\n    '''\n    renvoie le nombre d'arbres diff\u00e9rents de taille n\n    '''\n    if n == 0:\n        return 1\n    else:\n        s = 0\n        for g in range(n): # g est la taille du sous-arbre gauche\n            d = n - 1 - g  # d est la taille du sous-arbre droit\n            s += nb_arbre(g) * nb_arbre(d)\n        return s\n</code></pre> <p>Remarque: on peut utiliser la fonction <code>sum</code> sur une liste en compr\u00e9hension pour condenser (mais est-ce plus lisible?) le bloc du <code>else</code>:</p> <pre><code>def nb_arbre(n:int) -&gt; int:\n    '''\n    renvoie le nombre d'arbres diff\u00e9rents de taille n\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sum([nb_arbre(g) * nb_arbre(n-1-g) for g in range(n)])\n</code></pre> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>Effectuer sur l'arbre suivant:</p> <p> </p> <ol> <li>un parcours pr\u00e9fixe</li> <li>un parcours infixe</li> <li>un parcours postfixe</li> </ol> <ol> <li>T-Y-P-O-H-N</li> <li>P-Y-T-H-O-N</li> <li>P-Y-H-N-O-T</li> </ol> <p>Exercice  6</p> Arbre 1Arbre 2Correction <p>Sur l'arbre suivant:</p> <p> </p> <ol> <li>Donner sa taille et sa hauteur.</li> <li>Donner l'ordre des n\u0153uds visit\u00e9s dans un parcours en largeur.</li> <li>Donner l'ordre des n\u0153uds visit\u00e9s dans un parcours pr\u00e9fixe, puis dans un parcours infixe et enfin dans un parcours postfixe.</li> </ol> <p>Sur l'arbre suivant:</p> <p> </p> <ol> <li>Donner sa taille et sa hauteur.</li> <li>Donner l'ordre des n\u0153uds visit\u00e9s dans un parcours en largeur.</li> <li>Donner l'ordre des n\u0153uds visit\u00e9s dans un parcours pr\u00e9fixe, puis dans un parcours infixe et enfin dans un parcours postfixe.</li> </ol> <p>Arbre 1</p> <ol> <li>Cet arbre a 10 comme taille et 4 comme hauteur.</li> <li>A-B-F-C-D-G-H-E-I-J</li> <li>Pr\u00e9fixe: A-B-C-E-D-F-G-I-H-J, Infixe : C-E-B-D-A-I-G-F-H-J, Postfixe : E-C-D-B-I-G-J-H-F-A</li> </ol> <p>Exercice  7</p> \u00c9nonc\u00e9Correction <p>Cr\u00e9er une instance d'<code>AB</code> repr\u00e9sentant l'arbre:</p> <p> </p> <pre><code>a = AB('T')\na.gauche = AB('Y')\na.gauche.gauche = AB('P')\na.droit = AB('O')\na.droit.gauche = AB('H')\na.droit.droit = AB('N')\n</code></pre> <p>Exercice  8</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Dessiner les arbres <code>sag</code> et <code>sad</code> d\u00e9finis par les instructions:  </p><pre><code>sag = AB(10)\nsag.droit = AB(3)\n\nsad = AB(6)\nsad.gauche = AB(1)\nsad.droit = AB(12)\nsad.gauche.gauche = AB(9)\nsad.gauche.droit = AB(4)\n</code></pre><p></p> </li> <li> <p>En utilisant les arbres pr\u00e9c\u00e9dents, donner les instructions permettant de repr\u00e9senter l'arbre:</p> <p> </p> </li> </ol> <ol> <li> <p>On obtient les sous-arbres gauche et droit de l'arbre illustr\u00e9 \u00e0 la question 2.</p> </li> <li> <p>Il suffit donc de cr\u00e9er un nouvel arbre dont ces arbres sont les sous-arbres gauche et droit. </p><pre><code>a = AB(5)\na.gauche = sag\na.droit = sad\n</code></pre><p></p> </li> </ol>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.3_ABR/","title":"T1.4.3 Arbres Binaires de Recherche (ABR)","text":""},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.3_ABR/#t143-arbres-binaires-de-recherche-abr","title":"T1.4.3 Arbres Binaires de Recherche (ABR)","text":"<p>D\u00e9finition</p> <p>Un arbre binaire de recherche (ABR en abr\u00e9g\u00e9) est un cas particulier d'arbre binaire, o\u00f9 les valeurs des n\u0153uds (appel\u00e9es plut\u00f4t cl\u00e9s) sont n\u00e9cessairement ordonnables entre elles: elles sont toutes de m\u00eame type <code>int</code> ou <code>str</code> par exemple.</p> <p>De plus, pour tous les n\u0153uds de l'arbre, la cl\u00e9 est :</p> <ul> <li>strictement sup\u00e9rieure \u00e0 toutes les cl\u00e9s du sous-arbre gauche;</li> <li>inf\u00e9rieure ou \u00e9gale \u00e0 toutes les cl\u00e9s du sous-arbre droit;</li> </ul> <p>ABR or not ABR ?</p> Exemple 1Exemple 2Exemple 3Exemple 4 <p> </p> <p> </p> <p> </p> <p> </p> Important: parcours et ordre croissant <p>Le parcours infixe d'un ABR donne un tri des cl\u00e9s dans l'ordre croissant.</p> <p>Sauriez-vous l'expliquer?</p>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.3_ABR/#1-recherche-dans-un-abr","title":"1. Recherche dans un ABR","text":"<p>La structure d'ABR va permettre de rechercher efficacement une cl\u00e9. En effet, en fonction du r\u00e9sultat de la comparaison d'une cl\u00e9 avec la valeur recherch\u00e9e, on sait dans quel sous-arbre poursuivre r\u00e9cursivement la recherche...</p> <p>Classe <code>ABR</code></p> <p>Un ABR \u00e9tant un cas particulier d'un arbre binaire, on peut reprendre l'impl\u00e9mentation d\u00e9j\u00e0 existante de la classe <code>AB</code> en adaptant seulement le constructeur de la classe:</p> <p></p><pre><code>class ABR:\n    def __init__(self, cle=None):\n        self.cle = cle\n        if self.cle is not None:\n            self.gauche = ABR()\n            self.droit = ABR()\n</code></pre> Ainsi que la m\u00e9thode <code>rechercher</code>:<p></p> \u00c0 compl\u00e9ter<pre><code>    def rechercher(self, valeur):\n        if ... :\n            return False\n        elif ... :\n            return True\n        elif valeur &lt; self.cle:\n            return ...\n        else:\n            return ...\n</code></pre> <p>Complexit\u00e9 de la recherche dans un ABR \u00e9quilibr\u00e9</p> <p>Imaginons faire une recherche dans un ABR \u00e9quilibr\u00e9 de taille \\(n\\). Combien d'\u00e9tapes faudra-t-il, dans le pire des cas, pour trouver (ou pas) une cl\u00e9 particuli\u00e8re dans cet arbre ?</p> <p> </p> <p>Un peu comme l'algorithme de dichotomie vue en classe de Premi\u00e8re, \u00e0 chaque n\u0153ud on ne consid\u00e8re que la moiti\u00e9 des n\u0153uds restants \u00e0 explorer. Le nombre de n\u0153uds \u00e0 explorer est donc \u00e9gal \u00e0 la hauteur \\(h\\) de l'arbre (dans le pire des cas).</p> <p>Or on sait que pour un arbre parfait \\(n = 2^h -1\\), c'est-\u00e0-dire que \\(2^h = n +1\\).</p> <p>En g\u00e9n\u00e9ral, le co\u00fbt de cette recherche est donc de l'ordre de ce nombre de puissance de 2 que l'on peut mettre dans \\(n+1\\). Ce nombre s'appelle le logarithme de base 2 est se note \\(\\log_2\\). La complexit\u00e9 est donc en \\(O(\\log_2(n))\\).</p> Binaire et \\(\\log_2\\) <p>On a pour tout entier \\(n\\) que \\(\\log_2(2^n) = n\\). Donc par exemple \\(\\log_2(8) = 3\\) puisque \\(2^3=8\\) ou \\(\\log_2(128) = 7\\) puisque \\(2^7=128\\).</p> <p>Or en binaire,  \\(2^n\\) s'\u00e9crit avec un 1 suivi de \\(n\\) z\u00e9ros: le logarithme de base 2 d'une puissance de 2 donne son nombre de z\u00e9ros dans son \u00e9criture en binaire.</p> <p>Le \\(\\log_2\\) permet donc de r\u00e9cup\u00e9rer le nombre de chiffres dans l'\u00e9criture binaire d'un nombre entier, c'est-\u00e0-dire sa taille en bits, par la formule :</p> \\[\\lfloor \\log_2(n) \\rfloor +1\\]"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.3_ABR/#2-ajout-dans-un-abr","title":"2. Ajout dans un ABR","text":"<p>L'insertion d'un n\u0153ud dans un ABR va permettre de construire un ABR. Mais il faut bien \u00e9videmment conserver la coh\u00e9rence des cl\u00e9s des n\u0153uds: on doit ins\u00e9rer un n\u0153ud en construisant des sous-arbres qui sont aussi des ABR.</p> <p>Pour cela, on va construire uniquement un ABR vide, puis ins\u00e9rer un n\u0153ud/sous-arbre sur les feuilles, c'est-\u00e0-dire uniquement sur un sous-arbre vide: le gauche ou le droit, selon la valeur de la cl\u00e9 \u00e0 ins\u00e9rer.</p> <p>Exemple</p> <p>Dessiner l'ABR obtenu en partant d'un arbre vide, puis en ins\u00e9rant successivement les cl\u00e9s 12, 10, 15, 5, 20, 4, 8, 11, 17.</p> Solution <p> </p> <p>Impl\u00e9mentation de la m\u00e9thode</p> <p>Compl\u00e9ter les deux m\u00e9thodes ci-dessous:</p> <pre><code>    def inserer_cle(self, cle):\n        if self.est_vide():\n            self.cle = ...\n            self.gauche = ...\n            self.droit = ...\n        elif ...\n            self.droit.inserer_cle(cle)\n        else:\n            ...\n\n    def inserer_cles(self, liste_cles):\n        ...\n</code></pre>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4.3_ABR/#3-exercices","title":"3. Exercices","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>Dans un ABR, o\u00f9  se trouve le plus petit \u00e9l\u00e9ment? En d\u00e9duire une m\u00e9thode <code>minimum</code> qui renvoie le plus petit \u00e9l\u00e9ment de l'ABR, et <code>None</code> si l'ABR est vide.</p> <pre><code>def minimum(self):\n    if self.est_vide():\n        return None\n    elif self.gauche.est_vide():\n        return self.cle\n    else:\n        return self.gauche.minimum()\n</code></pre> <p>Exercice  2</p> \u00c9nonc\u00e9IndicationsCorrection <p>\u00c9crire une fonction qui prend en param\u00e8tre un arbre binaire et qui renvoie <code>True</code> si l'arbre est un ABR et <code>False</code> sinon.</p> <p>On pourra au choix:</p> <ul> <li>utiliser le fait que le parcours infixe donne sur un ABR une liste tri\u00e9e dans l'ordre croissant de ses cl\u00e9s (mais attention il faut modifier correctement la m\u00e9thode <code>infixe</code> pour r\u00e9cup\u00e9rer les cl\u00e9s dans une liste);</li> <li>v\u00e9rifier r\u00e9cursivement en le parcourant que l'arbre binaire v\u00e9rifie la d\u00e9finition d'un ABR.</li> </ul> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une m\u00e9thode <code>compte</code> qui renvoie le nombre d'occurrences d'une cl\u00e9 dans un ABR.</p> <pre><code>def compte(self, valeur):\n    if self.est_vide():\n        return 0\n    elif self.cle == valeur:\n        return 1 + self.droit.compte(valeur)\n    elif self.cle &lt; valeur:\n        return  self.droit.compte(valeur)\n    else:\n        return self.gauche.compte(valeur)\n</code></pre> <p>Exercices Type BAC</p> <p> \u00c9nonc\u00e9 1  \u00c9nonc\u00e9 2  \u00c9nonc\u00e9 3  </p>"},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4_TP1/","title":"\u25b6 TP Arbres binaires","text":""},{"location":"T01_StructuresDonnees/T1.4_Arbres/T1.4_TP1/#tp-arbres-binaires","title":"\u25b6 TP Arbres binaires","text":"<p>Objectif</p> <p>Dans ce TP, il s'agit d'utiliser l'impl\u00e9mentation POO d'un arbre binaire et d'impl\u00e9menter des fonctions:</p> <ul> <li>de calcul de taille</li> <li>de calcul de hauteur</li> <li>de parcours (largeur, pr\u00e9fixe, infixe, postfixe)</li> </ul> <p>Reprendre le fichier <code>arbre_binaire.py</code> et compl\u00e9ter au fur et \u00e0 mesure la classe <code>AB</code>.</p> <p>Strat\u00e9gie</p> <p>D\u00e8s que possible, il s'agit d'exploiter le caract\u00e8re r\u00e9cursif de la structure d'arbre pour \u00e9crire les m\u00e9thodes suivantes...</p> <p>Exercice  1: Taille et hauteur</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire une m\u00e9thode renvoyant la taille d'un arbre binaire.</li> <li> <p>\u00c9crire une m\u00e9thode renvoyant la hauteur d'un arbre binaire.</p> <p>Indice en bas de votre \u00e9cran: la fonction <code>max</code>  est autoris\u00e9e.</p> </li> </ol> <pre><code>#1.\ndef taille(self):\n    if self.est_vide():\n        return 0\n    else:\n        return 1 + self.gauche.taille() + self.droit.taille()\n#2.\ndef hauteur(self):\n    if self.est_vide():\n        return 0\n    else:\n        return 1 + max(self.gauche.hauteur(), self.droit.hauteur())\n</code></pre> <p>Exercice  2: BFS</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une m\u00e9thode qui effectue un parcours en largeur d'abord de l'arbre et qui renvoit l'ordre de parcours des n\u0153uds (sous forme d'une liste par exemple).</p> <p>Rappel: l'algorithme (donn\u00e9 \u00e0 la page pr\u00e9c\u00e9dente) n\u00e9cessite l'utilisation d'une file. Pour cela vous pouvez:</p> <ul> <li>utiliser \u00abvotre\u00bb objet <code>File</code> cr\u00e9\u00e9 plus t\u00f4t dans l'ann\u00e9e;</li> <li>utiliser une simple liste de Python (bof bof);</li> <li>utiliser la classe <code>Queue</code> du module <code>queue</code>, qui poss\u00e8de les m\u00e9thodes <code>empty</code>, <code>put</code> (pour enfiler) et <code>get</code> (pour d\u00e9filer).</li> </ul> <p>Exercice  3 : DFS</p> \u00c9nonc\u00e9Correction <p>\u00c9crire les m\u00e9thodes <code>prefixe</code>, <code>infixe</code> et <code>postfixe</code> parcourant l'arbre en profondeur d'abord selon les algorithmes correspondants (page pr\u00e9c\u00e9dente). Le traitement de la racine consistera en un affichage (<code>print</code>).</p> <pre><code>def prefixe(self):\n    if not self.est_vide():\n        print(self.racine, end=)\n        self.gauche.prefixe()\n        self.droit.prefixe()\n\ndef infixe(self):\n    if not self.est_vide():\n        self.gauche.infixe()\n        print(self.racine, end=)\n        self.droit.infixe()\n\ndef postfixe(self):\n    if not self.est_vide():            \n        self.gauche.postfixe()\n        self.droit.postfixe()\n        print(self.racine, end=)\n</code></pre> <p>Exercice  4 : recherche d'une valeur</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une m\u00e9thode permettant de d\u00e9terminer si un arbre contient une valeur donn\u00e9e. La m\u00e9thode renverra un bool\u00e9en selon le r\u00e9sultat de la recherche.</p> <p>Avec un parcours pr\u00e9fixe adapt\u00e9:</p> <p></p><pre><code>def recherche(self, valeur):\n    if self.est_vide():\n        return False\n    elif self.racine == valeur:\n        return True\n    else:\n        return self.gauche.recherche(valeur) or self.droit.recherche(valeur)\n</code></pre> Avec un parcours en largeur adapt\u00e9: <pre><code>def recherche_bfs(self, valeur) -&gt; bool:\n    file = queue.Queue()\n    file.put(self) \n    while not file.empty():\n        t = file.get()        \n        if not t.est_vide():\n            if t.racine == valeur:\n                return True \n            file.put(t.gauche)\n            file.put(t.droit)               \n    return False\n</code></pre><p></p>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/","title":"T1.5.1 Graphes","text":""},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#t151-graphes","title":"T1.5.1 Graphes","text":""},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#1-notion-de-graphe-et-vocabulaire","title":"1. Notion de graphe et vocabulaire","text":"<p>Le concept de graphe permet de r\u00e9soudre de nombreux probl\u00e8mes en math\u00e9matiques comme en informatique. C'est un outil de repr\u00e9sentation tr\u00e8s courant, et nous l'avons d\u00e9j\u00e0 rencontr\u00e9 \u00e0 plusieurs reprises, en particulier lors de l'\u00e9tude de r\u00e9seaux.</p> <p>Exemples de situations</p> R\u00e9seau informatiqueR\u00e9seau de transportR\u00e9seau socialMais aussi <p> </p> <p> </p> <p> </p> <p>On trouve \u00e9galement des applications de la th\u00e9orie des graphes dans bien d'autres domaines: probabilit\u00e9s, biologie, physique, chimie, g\u00e9n\u00e9tique...</p> <p>Vocabulaire des graphes</p> <p>En g\u00e9n\u00e9ral, un graphe est un ensemble d'objets, appel\u00e9s sommets ou parfois n\u0153uds (vertex or nodes en anglais) reli\u00e9s par des ar\u00eates ou arcs selon que le graphe est non orient\u00e9 ou orient\u00e9 (edge en anglais).</p> Graphe non orient\u00e9Graphe orient\u00e9Graphe pond\u00e9r\u00e9 <p> </p> <p>Dans un graphe non orient\u00e9, les ar\u00eates peuvent \u00eatre emprunt\u00e9es dans les deux sens, et une cha\u00eene est une suite de sommets reli\u00e9s par des ar\u00eates, comme C - B - A - E par exemple. La longueur de cette cha\u00eene est alors 3, soit le nombre d'ar\u00eates.</p> <p>Les sommets B et E sont adjacents au sommet A, ce sont les voisins de A.</p> <p> </p> <p>Dans un graphe orient\u00e9, les arcs ne peuvent \u00eatre emprunt\u00e9s que dans le sens de la fl\u00e8che, et un chemin est une suite de sommets reli\u00e9s par des arcs, comme B \u2192 C \u2192 D \u2192 E par exemple.</p> <p>Les sommets C et D sont adjacents au sommet B (mais pas A !), ce sont les voisins de B.</p> <p> </p> <p>Un graphe est pond\u00e9r\u00e9 (ou valu\u00e9) si on attribue \u00e0 chaque ar\u00eate une valeur num\u00e9rique (la plupart du temps positive), qu'on appelle mesure, poids, co\u00fbt ou valuation.</p> <p>Par exemple:</p> <ul> <li>dans le protocole OSPF, on pond\u00e8re les liaisons entre routeurs par le co\u00fbt;</li> <li>dans un r\u00e9seau routier entre plusieurs villes, on pond\u00e8re par les distances.</li> </ul> <p>Connexit\u00e9</p> <p>Un graphe est connexe s'il est d'un seul tenant: c'est-\u00e0-dire si n'importe quelle paire de sommets peut toujours \u00eatre reli\u00e9e par une cha\u00eene. Autrement un graphe est connexe s'il est \u00aben un seul morceau\u00bb.</p> <p>Par exemple, le graphe pr\u00e9c\u00e9dent est connexe. Mais le suivant ne l'est pas: il n'existe pas de cha\u00eene entre les sommets A et F par exemple.</p> <p> </p> <p>Il poss\u00e8de cependant deux composantes connexes : le sous-graphe compos\u00e9 des sommets A, B, C, D et E d'une part et le sous-graphe compos\u00e9 des sommets F, G et H.</p>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#2-modelisations-dun-graphe","title":"2. Mod\u00e9lisations d'un graphe","text":"<p>Nous allons voir les deux principales fa\u00e7on de repr\u00e9senter un graphe, c'est-\u00e0-dire par les sommets et leurs ar\u00eates sortantes vers leur voisins (d'o\u00f9 le terme d'adjacence).</p>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#21-representation-par-matrice-dadjacence","title":"2.1 Repr\u00e9sentation par matrice d'adjacence","text":"<p>Principe</p> <ul> <li>On num\u00e9rote les sommets de 0 \u00e0 \\(n-1\\).</li> <li>on repr\u00e9sente les ar\u00eates (ou les arcs) dans une matrice, c'est-\u00e0-dire un tableau \u00e0 deux dimensions o\u00f9 on inscrit un 1 en ligne <code>i</code> et colonne <code>j</code> si les sommets <code>i</code> et <code>j</code> sont voisins.</li> </ul> Graphe et matriceAr\u00eate reliant deux sommets <p> </p> <p> </p> <p>Remarques</p> <ul> <li>La matrice d'adjacence d'un graphe non orient\u00e9 est sym\u00e9trique.</li> <li>Pour un graphe pond\u00e9r\u00e9, on indique la valuation de l'ar\u00eate plut\u00f4t qu'un 1.</li> <li>Pour un graphe \u00e0 \\(n\\) sommets, la complexit\u00e9 spatiale (place en m\u00e9moire) est en \\(O(n^2)\\).</li> <li>Tester si un sommet est isol\u00e9 (ou conna\u00eetre ses voisins) est en \\(O(n)\\) puisqu'il faut parcourir une ligne, mais tester si deux sommets sont adjacents (voisins) est en \\(O(1)\\), c'est un simple acc\u00e8s au tableau.</li> </ul> <p>En Python</p> <p>Une matrice se repr\u00e9sente naturellement par une liste de listes.</p> <p>Exemple:</p> <pre><code>mat = [[0, 1, 1, 0, 0],\n       [1, 0, 1, 1, 0],\n       [1, 1, 0, 1, 1],\n       [0, 1, 1, 0, 1],\n       [0, 0, 1, 1, 0]] \n</code></pre> <p>Cette repr\u00e9sentation poss\u00e8de un gros avantage lorsqu'on souhaite trouver le nombre de cha\u00eenes (ou de chemins dans le cas orient\u00e9) entre deux sommets, d'une longueur donn\u00e9e.</p> <p>Pour cela, il suffit de calculer la puissance de cette matrice (le calcul du produit de matrices n'est pas au programme, demandez \u00e0 vos camarades de maths expertes si vous \u00eates curieux) dont l'exposant est la longueur souhait\u00e9e.</p> <p>Par exemple, si on souhaite le nombre de cha\u00eenes de longueur 3 entre les sommets 2 et 4 dans le graphe pr\u00e9c\u00e9dent de matrice d'adjacence \\(M\\), on calcule \\(M^3\\) et on regarde le coefficient en ligne 2 et colonne 4.</p> <p>Exemple avec le module <code>numpy</code></p> <pre><code># Module numpy de calcul scientifique, notamment le calcul matriciel\nimport numpy as np\n\nmat = [[0, 1, 1, 0, 0],\n      [1, 0, 1, 1, 0],\n      [1, 1, 0, 1, 1],\n      [0, 1, 1, 0, 1],\n      [0, 0, 1, 1, 0]] \n\ndef puissance_matrice(m:list, n:int) -&gt; np.array:\n    '''\n    calcule et renvoie le puissance n-i\u00e8me d'une matrice, \u00e0 l'aide\n    de la m\u00e9thode dot qui fait le produit de deux matrices (au format np.array)\n    '''\n    p = np.identity(len(m))  # on construit la matrice \"unit\u00e9\" de taille len(m) \u00d7 len(m)\n    for _ in range(n):\n        p = np.dot(p, m)\n    return p\n</code></pre> <p>Puis en console:</p> <pre><code>&gt;&gt;&gt; mat_cube = puissance_matrice(mat, 3)\n&gt;&gt;&gt; mat_cube\narray([[2, 5, 6, 3, 3],\n       [5, 4, 7, 7, 3],\n       [6, 7, 6, 7, 6],\n       [3, 7, 7, 4, 5],\n       [3, 3, 6, 5, 2]])\n&gt;&gt;&gt; mat_cube[2][4]\n6\n</code></pre> <p>Il y a donc 6 cha\u00eenes de longueur 3 entre les sommets 2 et 4.</p>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#22-representation-par-listes-dadjacence","title":"2.2 Repr\u00e9sentation par listes d'adjacence","text":"<p>Principe</p> <ul> <li> <p>On associe \u00e0 chaque sommet sa liste des voisins (c'est-\u00e0-dire les sommets adjacents). On utilise pour cela un dictionnaire dont les cl\u00e9s sont les sommets et les valeurs les listes des voisins.</p> </li> <li> <p>Dans le cas d'un graphe orient\u00e9 on associe \u00e0 chaque sommet la liste des successeurs (ou bien des pr\u00e9d\u00e9cesseurs, au choix).</p> </li> </ul> <p>Par exemple, le graphe pr\u00e9c\u00e9dent s'\u00e9crira en Python:</p> <pre><code>G = {0: [1, 2],\n     1: [0, 2, 3],\n     2: [0, 1, 3, 4],\n     3: [1, 2, 4],\n     4: [2, 3]\n    }\n</code></pre> <p>Remarques</p> <ul> <li>Pour un graphe pond\u00e9r\u00e9, on associera un dictionnaire (d'associations <code>voisin: valuation</code>).</li> <li>Pour un graphe \u00e0 \\(n\\) sommets et \\(m\\) ar\u00eates, la complexit\u00e9 spatiale (place en m\u00e9moire) est en \\(O(n+m)\\). C'est beaucoup mieux qu'une matrice d'adjacence lorsque le graphe comporte peu d'ar\u00eates (i.e. beaucoup de 0 dans la matrice, non stock\u00e9s avec des listes).</li> <li>Tester si un sommet est isol\u00e9 (ou conna\u00eetre ses voisins) est en \\(O(1)\\) puisqu'on y acc\u00e8de imm\u00e9diatement, mais tester si deux sommets sont adjacents (voisins) est en \\(O(n)\\) car il faut parcourir la liste.</li> </ul>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#3-graphes-en-poo","title":"3. Graphes en POO","text":"<p>Classe <code>Graphe</code></p> <p>Il s'agit maintenant d'\u00e9crire une classe <code>Graphe</code> dont l'impl\u00e9mentation sera faite par listes d'adjacence (plus pratique pour ce qu'on veut faire, \u00e0 savoir r\u00e9cup\u00e9rer les voisins d'un sommet) et le constructeur prendra en param\u00e8tre la liste des sommets et construit un dictionnaire dont les valeurs sont des listes vides.</p> <p>L'interface doit comporter les m\u00e9thodes suivantes:</p> <ul> <li><code>ajouter_sommets</code> : ajoute un sommet donn\u00e9 en param\u00e8tre;</li> <li><code>ajouter_arete</code> : ajoute une ar\u00eate entre deux sommets donn\u00e9s en param\u00e8tres;</li> <li><code>sommets</code> : renvoie la liste des sommets;</li> <li><code>voisins</code> : renvoie la liste des voisins d'un sommet donn\u00e9 en param\u00e8tre;</li> <li><code>ordre</code> : renvoie l'ordre du graphe (c'est-\u00e0-dire son nombre de sommets);</li> <li><code>est_voisin</code> : renvoie un bool\u00e9en d\u00e9terminant si deux sommets donn\u00e9s en param\u00e8tres sont voisins ou non.</li> </ul> Proposition de correction"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.1_Graphes/#4-exercices","title":"4. Exercices","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>Construire les repr\u00e9sentations des graphes suivants:</p> <ol> <li>Par matrice d'adjacence.</li> <li>Par listes d'adjacence.</li> </ol> <p> </p> <p> </p> <p> </p> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Construire les graphes correspondants aux matrices d'adjacences suivantes:</p> <p>\\(M_1 =\\pmatrix{     0&amp;1&amp;1&amp;1&amp;1\\\\     1&amp;0&amp;1&amp;0&amp;0\\\\     1&amp;1&amp;0&amp;1&amp;0\\\\     1&amp;0&amp;1&amp;0&amp;1\\\\     1&amp;0&amp;0&amp;1&amp;0\\\\     }\\) \\(M_2=\\pmatrix{     0&amp;1&amp;1&amp;0&amp;1\\\\     0&amp;0&amp;1&amp;0&amp;0\\\\     0&amp;0&amp;0&amp;1&amp;0\\\\     1&amp;0&amp;0&amp;0&amp;1\\\\     0&amp;0&amp;0&amp;0&amp;0\\\\     }\\) \\(M_3=\\pmatrix{     0&amp;5&amp;10&amp;50&amp;12\\\\     5&amp;0&amp;10&amp;0&amp;0\\\\     10&amp;10&amp;0&amp;8&amp;0\\\\     50&amp;0&amp;8&amp;0&amp;100\\\\     12&amp;0&amp;0&amp;100&amp;0\\\\     }\\)</p> </li> <li> <p>Donner les listes d'adjacence correspondant aux matrices d'adjacence pr\u00e9c\u00e9dentes.</p> </li> </ol> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Construire les graphes correspondants aux listes d'adjacences suivantes. D\u00e9terminer s'il s'agit d'un graphe orient\u00e9, non orient\u00e9, pond\u00e9r\u00e9.</p> <pre><code>G1 = {\n    'A': ['B', 'C'],\n    'B': ['A', 'C', 'E', 'F'],\n    'C': ['A', 'B', 'D'],\n    'D': ['C', 'E'],\n    'E': ['B', 'D', 'F'],\n    'F': ['B', 'E']\n    }\n\nG2 = {\n    'A': ['B'],\n    'B': ['C', 'E'],\n    'C': ['B', 'D'],\n    'D': [],\n    'E': ['A']\n    }\n\nG3 = {\n    'A': ['B', 'C'],\n    'B': ['A', 'B', 'D'],\n    'C': ['A', 'F'],\n    'D': ['B', 'C', 'F'],\n    'E': ['G'],\n    'F': ['C', 'F'],\n    'G': ['E']\n    }\n\nG4 = {\n    'A': {'B' : 300, 'C' : 310, 'D' : 280},\n    'B': {'A' : 300, 'C' : 80},\n    'C': {'A' : 310, 'B' : 80, 'E' : 150},\n    'D': {'A' : 280, 'F' : 110},\n    'E': {'C' : 150, 'F' : 60, 'G' : 90, 'H' : 190},\n    'F': {'D' : 110, 'E' : 60, 'G' : 70, 'H' : 260},\n    'G': {'E' : 90, 'F' : 70, 'H' : 50, 'I' : 100},\n    'H': {'E' : 190, 'F' : 260, 'G' : 50, 'I' : 40},\n    'I': {'G' : 100, 'H' : 40}\n    }\n</code></pre> </li> <li> <p>Donner les matrices d'adjacence correspondant aux listes d'adjacence pr\u00e9c\u00e9dentes.</p> </li> </ol> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>Adapter la classe <code>Graphe</code> pour \u00e9crire une classe <code>GrapheP</code> qui repr\u00e9sente un graphe pond\u00e9r\u00e9.</p> <p>Exercice  5: C0d1ng UP 2023 !</p> \u00c9nonc\u00e9IndicationCorrection <p>Lors de l'\u00e9dition 2023 de c0d1ng UP, un d\u00e9fi avait pour but de trouver pour le Docteur Who un ordre de parcours de diff\u00e9rentes ann\u00e9es (le Docteur Who peut voyager dans le temps gr\u00e2ce au Tardis...)</p> <p> </p> <p>Seulement il y a certaines contraintes, donn\u00e9es dans ce fichier. En voici un extrait:</p> <pre><code>Visiter 1037 avant 1182\nVisiter 1037 avant 3017\nVisiter 1037 avant 3497\nVisiter 1053 avant 1773\nVisiter 1053 avant 2523\nVisiter 1053 avant 3297\nVisiter 1053 avant 3714\nVisiter 1053 avant 4051\nVisiter 1053 avant 4820\nVisiter 1079 avant 1267\nVisiter 1079 avant 1371\nVisiter 1079 avant 1492\nVisiter 1079 avant 1706\nVisiter 1079 avant 1745\nVisiter 1079 avant 1789\n...\n</code></pre> <p>Cela signifie par exemple que le Docteur doit imp\u00e9rativement visiter l'ann\u00e9e 1037 avant les ann\u00e9es 1182, 3017 et 3497...</p> <p>On pense alors naturellement (?) \u00e0 un graphe orient\u00e9, o\u00f9 chaque ann\u00e9e est un sommet et chaque contrainte un arc entre deux sommets.</p> <p>Consigne: construire le graphe \u00e0 l'aide de la classe <code>Graphe</code>. Combien de sommets comporte ce graphe?</p> <p>Le code suivant permet de lire le fichier texte et d'obtenir une liste dont chaque \u00e9l\u00e9ment est une ligne du fichier au format <code>str</code>; </p><pre><code>data = open('input_ordrevisites.txt').read().splitlines()\n</code></pre><p></p> <p>La m\u00e9thode <code>split</code> permet de s\u00e9parer une cha\u00eene de caract\u00e8res sur les espaces (par d\u00e9faut): </p><pre><code>&gt;&gt;&gt; data[0]\n'Visiter 1037 avant 1182'\n&gt;&gt;&gt; data[0].split()\n['Visiter',  '1037', 'avant', '1182']\n&gt;&gt;&gt; data[0].split()[1]\n'1037'\n</code></pre><p></p> <p>Exercice  6: tri topologique</p> \u00c9nonc\u00e9Correction <p>Pour r\u00e9soudre le d\u00e9fi pr\u00e9c\u00e9dent, il faut r\u00e9ussir \u00e0 trier les sommets du graphe dans un ordre qui respecte toutes les contraintes repr\u00e9sent\u00e9es par les arcs. Un tel tri n'est pas toujours possible: par exemple si le graphe orient\u00e9 poss\u00e8de un cycle. Lorsque c'est possible, ce tri s'appelle un tri topologique.</p> <p>Pour r\u00e9aliser ce tri, il existe deux principaux algorithmes. Le premier repose sur un parcours en profondeur (DFS) du graphe. On en parle en T1.5.2.</p> <p>Le deuxi\u00e8me consiste \u00e0 choisir un sommet qui ne poss\u00e8de aucun pr\u00e9d\u00e9cesseur dans le graphe. Puis on le supprime du graphe. Et on recommence ... jusqu'\u00e0 ce que le graphe soit vide.</p> <ol> <li>Pour que le choix des sommets sans pr\u00e9d\u00e9cesseur soit simple, on va plut\u00f4t mod\u00e9liser le graphe orient\u00e9 par des listes de pr\u00e9d\u00e9cesseurs. Modifier la classe GrapheO en cons\u00e9quence;</li> <li>\u00c9crire une m\u00e9thode <code>supprime_sommet</code> qui ... supprime un sommet (c'est-\u00e0-dire non seulement la cl\u00e9, mais aussi ses occurences dans les listes de pr\u00e9d\u00e9cesseurs) s'il n'y en a aucun.</li> <li>\u00c9crire une m\u00e9thode <code>sommet_initial</code> qui parcourt les sommets du graphe et qui renvoie le premier sommet sans pr\u00e9d\u00e9cesseur, ou <code>None</code>.</li> <li>\u00c9crire une fonction qui prend en param\u00e8tre un graphe et qui renvoie le tri topologique du graphe (sous la forme d'une liste) ou bien <code>None</code> s'il n'en existe pas.</li> </ol>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.2_Parcours_graphes/","title":"T1.5.2 Parcours de graphes","text":""},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.2_Parcours_graphes/#t152-parcours-de-graphes","title":"T1.5.2 Parcours de graphes","text":"<p>Algorithme de parcours</p> <p>Un parcours de graphe est un algorithme consistant \u00e0 explorer tous les sommets d'un graphe de proche en proche \u00e0 partir d'un sommet initial.</p> <p> Parcourir simplement le dictionnaire ou la matrice d\u2019un graphe n\u2019est pas consid\u00e9r\u00e9 comme un parcours de graphe. </p> <p>Tous les parcours suivent plus ou moins le m\u00eame algorithme de base :</p> <ul> <li> <p>On visite un sommet s1. On note S l\u2019ensemble des voisins de s1.</p> </li> <li> <p>Tant que S n\u2019est pas vide :</p> <ul> <li>on choisit un sommet s de S</li> <li>on visite s</li> <li>on ajoute \u00e0 S tous les voisins de s pas encore visit\u00e9s</li> </ul> </li> </ul> <p>Sommets visit\u00e9s</p> <p>Contrairement \u00e0 un parcours d'arbre, o\u00f9 les fils d'un n\u0153ud ne peuvent pas avoir \u00e9t\u00e9 visit\u00e9s avant le n\u0153ud, un voisin d'un sommet peut avoir d\u00e9j\u00e0 \u00e9t\u00e9 visit\u00e9 en tant que voisin d'un sommet pr\u00e9c\u00e9dent...</p> <p>Il est donc n\u00e9cessaire de m\u00e9moriser les sommets d\u00e9ja visit\u00e9s ou d\u00e9couverts (on dira qu'un sommet est d\u00e9couvert lorsqu'on l'ajoute \u00e0 S).</p> <p>Le choix de la structure de l'ensemble S est pr\u00e9pond\u00e9rant:</p> <ul> <li>Si on choisit une file (FIFO): on visitera les sommets dans l'ordre d'arriv\u00e9e, donc les plus proches du sommet pr\u00e9c\u00e9dent. On obtient donc un parcours en largeur.</li> <li>Si on choisit une pile (LIFO): on visitera d'abord les derniers sommets arriv\u00e9s, donc on parcourt le graphe en visitant \u00e0 chaque \u00e9tape un voisin du pr\u00e9c\u00e9dent. On obtient donc un parcours en profondeur.</li> </ul> <p> </p>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.2_Parcours_graphes/#1-parcours-en-largeur-bfs-breadth-first-search","title":"1. Parcours en largeur (BFS, Breadth First Search)","text":"<p>Algorithme BFS</p> <p>C'est classiquement celui qu'on utilise pour trouver le chemin le plus court dans un graphe.</p> <p>Exemple de parcours en largeur, avec B comme sommet de d\u00e9part:</p> <p></p> <p></p> <p>On suit l'algorithme donn\u00e9 plus haut, en utilisant:</p> <ul> <li>une liste <code>visites</code> qui contient les sommets visit\u00e9s (c'est-\u00e0-dire qu'on a fini de traiter, ici apr\u00e8s avoir ajout\u00e9 ses voisins);</li> <li>une liste <code>decouverts</code> qui contient les sommets d\u00e9couverts au fur et \u00e0 mesure du parcours;</li> <li>une file <code>file</code> qui contient les sommets d\u00e9couverts mais non encore visit\u00e9s. On utilisera au choix une classe <code>File</code> \u00e9crite plus t\u00f4t dans l'ann\u00e9e ou tout simplement une <code>list</code> avec les m\u00e9thodes <code>pop</code> (pour d\u00e9filer) et <code>append</code> (pour enfiler).</li> </ul> <p>En d\u00e9but d'algorithme, seul le sommet de d\u00e9part <code>depart</code> donn\u00e9 en param\u00e8tre est d\u00e9couvert. La fonction <code>BFS</code> renvoie la liste des sommets dans l'ordre de visite lors du parcours.</p> Parcours BFS - Code \u00e0 compl\u00e9ter<pre><code>def BFS(g:Graphe, depart:str) -&gt; list:\n    '''\n    Effectue un parcours en largeur du graphe G en partant du sommet depart,\n    et renvoie la liste des sommets visit\u00e9s dans l'ordre du parcours.\n    '''\n    visites = []\n    decouverts = [...]\n    file = [...]\n    while file ... :\n        sommet = ...\n        for voisin in ...:\n            if voisin not in ...:\n                ...\n                ...\n        visites.append(...)\n    return ...\n</code></pre> <p>Application: existence de chemin</p> <p>L'objectif est de retrouver une chaine ou un chemin dans un graphe entre un sommet source et un sommet cible, s'il existe.</p> <p>L'id\u00e9e est d'ajouter dans le parcours en largeur un dictionnaire de \u00abparentalit\u00e9\u00bb: un dictionnaire dont les cl\u00e9s sont les sommets d\u00e9couverts et la valeur associ\u00e9e est le sommet \u00abp\u00e8re\u00bb, c'est-\u00e0-dire celui \u00e0 partir duquel il est d\u00e9couvert.</p> <p>Ensuite, il faut reconstituer le chemin en remontant de la cible \u00e0 la source en utilisant ce dictionnaire.</p> <ol> <li> <p>Commencer par \u00e9crire une fonction <code>recupere_chemin</code> qui prend en param\u00e8tre un dictionnaire de \u00abparentalit\u00e9\u00bb, un sommet source et un sommet cible, et qui renvoie le chemin entre la source et la cible (par exemple sous forme d'une cha\u00eene de caract\u00e8res).</p> </li> <li> <p>Modifier la fonction BFS en ajoutant le dictionnaire <code>parents</code> et en modifiant la valeur renvoy\u00e9e: le chemin s'il existe, <code>None</code> (ou un message mentionnant qu'il n'existe pas) sinon.</p> </li> <li> <p>Tester sur un graphe non orient\u00e9, puis sur un graphe orient\u00e9.</p> </li> </ol> Proposition de correction"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.2_Parcours_graphes/#2-parcours-en-profondeur-dfs-depth-first-search","title":"2. Parcours en profondeur (DFS, Depth First Search)","text":"<p>Algorithme DFS (it\u00e9ratif)</p> <p>C'est classiquement celui qu'on utilise pour sortir d'un labyrinthe.</p> <p>Exemple de parcours en profondeur, avec G comme sommet de d\u00e9part:</p> <p></p> <p></p> <p>On adapte l'algorithme BFS, avec comme (grosses) diff\u00e9rences:</p> <ul> <li>on utilise cette fois-ci une pile <code>pile</code> pour les sommets d\u00e9couverts mais non encore visit\u00e9s. On utilisera au choix une classe <code>Pile</code> \u00e9crite plus t\u00f4t dans l'ann\u00e9e ou tout simplement une <code>list</code> avec les m\u00e9thodes <code>pop</code> (pour d\u00e9piler) et <code>append</code> (pour empiler);</li> <li>un sommet qu'on d\u00e9pile peut avoir d\u00e9j\u00e0 \u00e9t\u00e9 visit\u00e9! Il faut donc le v\u00e9rifier avant d'examiner ses voisins.</li> </ul> <p>En d\u00e9but d'algorithme, seul le sommet de d\u00e9part <code>depart</code> donn\u00e9 en param\u00e8tre est d\u00e9couvert. La fonction <code>DFS</code> renvoie la liste des sommets dans l'ordre de visite lors du parcours.</p> Parcours DFS it\u00e9ratif - Code \u00e0 compl\u00e9ter<pre><code>def DFS(g:Graphe, depart:str) -&gt; list:\n    '''\n    Effectue un parcours en profondeur du graphe G en partant du sommet depart,\n    et renvoie la liste des sommets visit\u00e9s dans l'ordre du parcours.\n    '''\n    visites = []\n    pile = [...]\n    while pile ... :\n        sommet = ...\n        if ... :\n            for voisin in ...:\n                if voisin not in ...:\n                    ...\n            visites.append(...)\n    return ...\n</code></pre> <p>Algorithme DFS (r\u00e9cursif)</p> <p>L'utilisation d'une pile peut inciter \u00e0 chercher un algorithme r\u00e9cursif pour le parcours en profondeur, comme pour les arbres. En effet, tant qu'on peut on poursuit le parcours sur un voisin du sommet pr\u00e9c\u00e9dent... \u00e0 condition que le voisin ne soit pas d\u00e9j\u00e0 visit\u00e9!</p> <p>La diff\u00e9rence majeure avec un parcours DFS sur un arbre r\u00e9side dans le fait qu'il faut stocker les sommets visit\u00e9s dans une liste (qu'on passera en param\u00e8tre) qui sera modifi\u00e9e \u00e0 chaque appel r\u00e9cursif. On utilise alors le caract\u00e8re mutable de ce type <code>list</code> de Python...</p> Parcours DFS r\u00e9cursif - Code \u00e0 compl\u00e9ter<pre><code>def DFS_rec(g:Graphe, visites:list, depart:str) -&gt; None:\n    visites.append(...)\n    for voisin in ...:\n        if ...:\n            ...\n    return ...\n</code></pre> <p>\u00c0 utiliser ainsi:</p> <pre><code>&gt;&gt;&gt; DFS_rec(g, [], 'G')\n['G', 'E', 'B', 'A', 'C', 'D', 'F', 'H']\n</code></pre> <p>Remarque</p> <p>L'ordre du parcours change selon l'algorithme DFS choisi:</p> <ul> <li>avec un algorithme it\u00e9ratif, on utilise une pile donc le voisin choisi est le dernier;</li> <li>avec un algorithme r\u00e9cursif, on fait un appel r\u00e9cursif sur chaque voisin donc le voisin choisi est le premier.</li> </ul> <p>Application: d\u00e9tection d'un cycle dans un graphe orient\u00e9</p> <p>Dans un parcours DFS, on marque les sommets visit\u00e9s pour \u00e9viter de tourner en rond... Donc a priori on devrait \u00eatre capable avec un tel parcours de d\u00e9tecter la pr\u00e9sence d'un cycle si on retombe sur un sommet d\u00e9j\u00e0 visit\u00e9.</p> <p>Un l\u00e9ger probl\u00e8me</p> <p> </p> <p>Comme on peut le constater, retomber sur un sommet d\u00e9j\u00e0 visit\u00e9 ne suffit pas. Il faut donc diff\u00e9rencier les sommets \u00abvisit\u00e9s\u00bb en deux cat\u00e9gories: les sommets dont le parcours DFS est en cours, et les sommets dont le parcours DFS est termin\u00e9.</p> <p>On va donc modifier le parcours DFS r\u00e9cursif pour lui passer deux listes en param\u00e8tres: une liste <code>en_cours</code> et une liste <code>termines</code>.</p> <p>Ainsi lorsqu'on revient sur un sommet:</p> <ul> <li>de la liste <code>en_cours</code> : on sait qu'on a trouv\u00e9 un cycle;</li> <li>de la liste <code>termines</code>: on ne fait rien;</li> <li>d'aucune liste: on le passe dans la liste <code>en_cours</code> puis on visite r\u00e9cursivement ses voisins, et enfin on le passe dans la liste <code>termines</code>.</li> </ul> Algorithme de d\u00e9tection de cycle - Code \u00e0 compl\u00e9ter<pre><code>def detection_cycle(g:Graphe, en_cours:list, termines:list, depart:str) -&gt; bool:\n    if depart in  ... :\n        return False\n    elif depart in ... :\n        return True\n    else:\n        ... .append(depart)\n        for voisin in g.voisins(depart):\n            if ... :\n                return True\n        ... .append(depart)\n        return False\n</code></pre> Un graphe orient\u00e9 pour tester... <pre><code>go = GrapheO([])\ngo.ajoute_arc('B', 'A')\ngo.ajoute_arc('A', 'S')\ngo.ajoute_arc('S', 'C')\ngo.ajoute_arc('S', 'D')\ngo.ajoute_arc('S', 'G')\ngo.ajoute_arc('C', 'D')\ngo.ajoute_arc('C', 'E')\ngo.ajoute_arc('F', 'C')\ngo.ajoute_arc('G', 'F')\ngo.ajoute_arc('E', 'H')\ngo.ajoute_arc('G', 'H')\n\ngo.ajoute_arc('I', 'J')\ngo.ajoute_arc('J', 'K')\ngo.ajoute_arc('K', 'I')\n</code></pre>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.2_Parcours_graphes/#3-exercices","title":"3. Exercices","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Effectuer un parcours BFS sur le graphe ci-dessous, en prenant le sommet C comme sommet de d\u00e9part. Que remarque-t-on?</p> <p> </p> </li> <li> <p>\u00c9crire une fonction (ou une m\u00e9thode) <code>est_connexe</code> qui d\u00e9termine si un graphe est connexe ou non.</p> </li> </ol> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Rappel</p> <p>Un graphe est eul\u00e9rien s'il est connexe et s'il poss\u00e8de exactement 0 ou 2 sommets de degr\u00e9 impair (le degr\u00e9 de sommet est son nombre de voisins).</p> <p>\u00c9crire une fonction (ou une m\u00e9thode) <code>est_eulerien</code> qui d\u00e9termine si un graphe est eul\u00e9rien ou non.</p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Si un graphe orient\u00e9 est connexe, la fonction <code>detection_cycle</code> d\u00e9terminera s'il contient ou non un cycle. En revanche, si le graphe n'est pas connexe, on ne sera pas capable de d\u00e9tecter un cycle dans une autre composante connexe que celle \u00e0 laquelle appartient le sommet de d\u00e9part.</p> <p>\u00c9crire une fonction <code>cycle</code> qui prend un param\u00e8tre un graphe orient\u00e9 (de classe <code>GrapheO</code> ) et qui renvoie si le graphe contient un cycle.</p> <p>Exercice  4: Algorithme de Dijkstra</p> \u00c9nonc\u00e9Correction <p>L'algorithme de Dijkstra repose sur un parcours en largeur o\u00f9 l'on s\u00e9lectionne parmi les sommets d\u00e9j\u00e0 d\u00e9couverts celui qui a la plus petite distance au sommet source.</p> <p>Dans cet algorithme, on va construire un dictionnaire <code>distances</code> o\u00f9:</p> <ul> <li>les cl\u00e9s sont les sommets du graphe;</li> <li> <p>les valeurs sont un couple (une liste) de deux \u00e9lements: la distance au sommet source et le sommet \u00abp\u00e8re\u00bb.</p> <p>Initialement, toutes les valeurs seront initialis\u00e9s \u00e0 <code>[inf, None]</code> (importer <code>inf</code> du module <code>math</code> qui permet d'avoir un nombre plus grand que tous les autres), sauf pour la cl\u00e9 du sommet source dont la valeur sera <code>[0, None]</code>.</p> </li> </ul> <p>On manipulera \u00e9galement deux listes:</p> <ul> <li>une liste <code>visites</code>, initialement vide, qui contiendra au fur et \u00e0 mesure les sommets visit\u00e9s (c'est-\u00e0-dire finis d'\u00eatre trait\u00e9s);</li> <li>une liste <code>decouverts</code>, qui contient initialement le sommet source seulement, et qui contiendra les sommets accessibles par un sommet d\u00e9j\u00e0 trait\u00e9 mais non encore visit\u00e9s.</li> </ul> <p>On suit ensuite l'algorithme suivant:</p> <ul> <li> <p>Tant que la liste <code>decouverts</code> n'est pas vide:</p> <ul> <li>on s\u00e9lectionne le sommet <code>s_min</code> de <code>decouverts</code>  qui a la plus petite distance au sommet source;</li> <li>on supprime ce sommet <code>s_min</code> de <code>decouverts</code> et on l'ajoute \u00e0 <code>visites</code>.</li> <li> <p>pour chaque voisin <code>voisin</code> qui n'est pas visit\u00e9 de <code>s_min</code> , on actualise sa distance:</p> <ul> <li>s'il n'est pas dans <code>decouvert</code>, on l'y ajoute et sa distance est la somme de la distance de <code>s_min</code> \u00e0 la source et du poids de l'ar\u00eate reliant <code>s_min</code> \u00e0 <code>voisin</code></li> <li>sinon on remplace sa distance actuelle par cette somme si elle est plus petite.</li> <li>dans les deux cas on actualise (\u00e9ventuellement) le sommet p\u00e8re \u00e0 <code>s_min</code></li> </ul> </li> </ul> </li> <li> <p>On renvoie le dictionnaire.</p> </li> </ul> <p>Remarque: on manipule un graphe de classe <code>GrapheP</code>...</p> Algorithme de Dijkstra - \u00e0 compl\u00e9ter<pre><code>def dijkstra(g:GrapheP, source:str) -&gt; dict:\n    '''\n    D\u00e9termine et renvoie le plus court chemin entre le sommet source et les\n    autres sommets du graphe g.\n    Renvoie un dictionnaire dont les cl\u00e9s sont les sommets du graphe et les\n    valeurs une liste [d, p] o\u00f9 d est la distance la plus courte depuis le\n    sommet source et p le sommet \u00abp\u00e8re\u00bb.\n    '''\n    distances = {s: [inf, None] for s in ...}\n    distances[source] = ...\n    visites = []\n    decouverts = [source]\n    while decouverts != []:\n        # On d\u00e9termine le sommet de la liste decouverts qui a la plus petite\n        # distance au sommet source\n        d_min = inf\n        ...\n\n        decouverts.remove(s_min)\n        visites.append(s_min)\n\n        for voisin in [v for v in ... if ...]:\n            if ...:\n                decouverts.append(voisin)\n                distances[voisin] = ...\n            else:\n                if ... :\n                    distances[voisin] = ...\n\n    return distances\n</code></pre> <p>On pourra v\u00e9rifier \u00e0 l'aide de l'exemple sur le graphe:</p> <pre><code>g = GrapheP([])\n\ng.ajoute_arete('A', 'B', 12)\ng.ajoute_arete('A', 'D', 14)\ng.ajoute_arete('B', 'F', 9)\ng.ajoute_arete('B', 'G', 16)\ng.ajoute_arete('B', 'H', 21)\ng.ajoute_arete('D', 'E', 10)\ng.ajoute_arete('C', 'E', 13)\ng.ajoute_arete('C', 'F', 10)\ng.ajoute_arete('E', 'F', 16)\ng.ajoute_arete('E', 'H', 10)\ng.ajoute_arete('F', 'H', 11)\ng.ajoute_arete('G', 'H', 11)\n</code></pre> <pre><code>def dijkstra(g:GrapheP, source:str) -&gt; dict:\n    '''\n    D\u00e9termine et renvoie le plus court chemin entre le sommet source et les\n    autres sommets du graphe g.\n    Renvoie un dictionnaire dont les cl\u00e9s sont les sommets du graphe et les\n    valeurs une liste [d, p] o\u00f9 d est la distance la plus courte depuis le\n    sommet source et p le sommet \u00abp\u00e8re\u00bb.\n    '''\n    distances = {s: [inf, None] for s in g.sommets()}\n    distances[source] = [0, None]\n    visites = []\n    decouverts = [source]\n    while decouverts != []:\n        dmin = inf\n        for s in decouverts:\n            if distances[s][0] &lt; dmin:\n                dmin = distances[s][0]\n                s_min = s\n\n        decouverts.remove(s_min)\n        visites.append(s_min)\n\n        for voisin in [v for v in g.voisins(s_min) if v not in visites]:\n            if voisin not in decouverts:\n                decouverts.append(voisin)\n                distances[voisin] = [distances[s_min][0] + g.ponderation_arete(s_min, voisin), s_min]\n            else:\n                if distances[s_min][0] + g.ponderation_arete(s_min, voisin) &lt; distances[voisin][0]:\n                    distances[voisin] = [distances[s_min][0] + g.ponderation_arete(s_min, voisin), s_min]\n\n    return distances\n</code></pre> <p>Pyd\u00e9fis sur les graphes</p> <ul> <li>Voyage en Fangorn</li> <li>L'affaire Cic\u00e9ron</li> <li>SW VI : Les Ewoks sont tous copains</li> <li>Fouinette donne l'alerte</li> <li>SW II : \u00c0 la recherche du syst\u00e8me Kamino</li> </ul>"},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.3_TP_Labyrinthe/","title":"\u25b6 TP Labyrinthe","text":""},{"location":"T01_StructuresDonnees/T1.5_Graphes/T1.5.3_TP_Labyrinthe/#tp-labyrinthe","title":"\u25b6 TP Labyrinthe","text":"<p>Objectif</p> <p>L'objectif de ce TP est de trouver et d'afficher le chemin le plus court entre une entr\u00e9e (en vert sur l'illustration ci-dessous) et une sortie (en rouge) d'un labyrinthe, cr\u00e9\u00e9 al\u00e9atoirement comme on l'a fait ici. </p> <p> </p> <p>Le principe est de repr\u00e9senter le labyrinthe comme un graphe, puis d'utiliser la recherche d'un chemin entre le d\u00e9part et l'arriv\u00e9e \u00e0 l'aide d'un parcours BFS.</p> <p>Vous pouvez tout faire from scratch, ou bien utiliser ce fichier qui contient:</p> <ul> <li>les classes <code>Graphe</code>, <code>Cellule</code> et <code>Labyrinthe</code> \u00e9crites pr\u00e9c\u00e9demment;</li> <li>les constantes et l'affichage utilis\u00e9es dans l'activit\u00e9 de g\u00e9n\u00e9ration du labyrinthe;</li> <li>les instructions et la boucle des \u00e9v\u00e9nements de Pygame.</li> </ul> <p>Travail \u00e0 r\u00e9aliser</p> <ol> <li>Dans la partie Fonctions, copier les fonctions <code>recupere_chemin</code> et <code>trouve_chemin</code> \u00e9crites dans l'activit\u00e9 pr\u00e9c\u00e9dente.</li> <li>Adapter la fonction <code>recupere_chemin</code> pour qu'elle renvoie une liste (des sommets du chemin entre la source et la cible), et non une cha\u00eene de caract\u00e8res.</li> <li>Compl\u00e9ter la fonction <code>affiche_chemin</code> .</li> <li>Choisir une adresse pour le d\u00e9part et l'arriv\u00e9e dans la partie Constantes.</li> <li> <p>Le labyrinthe doit maintenant \u00eatre mod\u00e9lis\u00e9 par un graphe selon ce principe: chaque cellule (c'est-\u00e0-dire un tuple (ligne i, colonne j)) est un sommet du graphe et deux sommets sont reli\u00e9s par une ar\u00eate s'il n'y a pas de mur entre les cellules qu'ils repr\u00e9sentent. En pratique on parcourt la grille du labyrinthe et pour chaque cellule, s'il n'y a pas de mur nord alors on ajoute une ar\u00eate avec la cellule/sommet du dessus, s'il n'y pas de mur ouest alors on ajoute une ar\u00eate avec la cellule/sommet de gauche, etc.</p> <p>Compl\u00e9ter la partie Graphe, puis affecter \u00e0 la variable <code>chemin</code> le chemin entre la source et la cible.</p> </li> <li> <p>Passer les bons arguments \u00e0 l'appel de la fonction <code>affiche_chemin</code> dans la partie Pygame.</p> </li> <li>F5</li> </ol> <p>Si vous avez fini...</p> <p>Modifier le programme pour qu'il affiche cellule par cellule l'avanc\u00e9e dans le labyrinthe du d\u00e9part vers l'arriv\u00e9e...</p> <p></p>"},{"location":"T02_Programmation/TP0_corrige/","title":"Corrig\u00e9 du TP Z\u00e9ro","text":""},{"location":"T02_Programmation/TP0_corrige/#corrige-du-tp-zero","title":"Corrig\u00e9 du TP Z\u00e9ro","text":"<p>Exercice 1</p> <p>\u00c9crire une fonction <code>maximum</code> qui prend deux entiers en param\u00e8tres et qui renvoie le plus grand des deux.</p> <p>Fonction <code>max</code> interdite.</p> <pre><code>def maximum(a:int, b:int) -&gt; int:\n    if a &gt; b:\n        return a\n    return b\n</code></pre> <p>Exercice 2</p> <p>\u00c9crire une fonction <code>somme_et_produit</code> qui prend deux entiers en param\u00e8tres et qui renvoie un tuple contenant leur somme et leur produit.</p> <pre><code>def somme_et_produit(a:int, b:int) -&gt; tuple:\n    return a + b, a * b\n</code></pre> <p>Exercice 2 bis</p> <p>\u00c9crire une fonction <code>somme_et_produit_str</code> qui prend deux entiers en param\u00e8tres et qui renvoie une cha\u00eene de caract\u00e8res donnant leur somme et leur produit.</p> <pre><code>def somme_et_produit(a:int, b:int) -&gt; str:\n    return f\"La somme de {a} et {b} est {a + b} et leur produit est {a * b}.\"\n</code></pre> <p>Exercice 3</p> <p>\u00c9crire une fonction <code>somme</code> qui prend en param\u00e8tre un entier et qui renvoie la somme de tous les entiers inf\u00e9rieurs.  Par exemple, <code>somme(5)</code> doit renvoyer <code>10</code> car \\(1+2+3+4=10\\).</p> <pre><code>def somme(n:int) -&gt; int:\n    s = 0\n    for k in range(n):\n        s = s + k\n    return s\n\nassert somme(5) == 10\nassert somme(0) == 0\n</code></pre> <p>Exercice 4</p> <p>\u00c9crire une fonction <code>fais6stp</code> qui simule des lancers de d\u00e9s et qui donne le nombre de tentatives avant d'avoir obtenu un 6.</p> <p>On utilise la fonction <code>randint</code> du module <code>random</code>.</p> <p>Pas de tests possibles, puisque le pseudo-hasard intervient.</p> <pre><code>import random\n\ndef fais6stp():\n    nb_tentatives = 0\n    de = 0\n    while de != 6:\n        de = random.randint(1, 6)\n        nb_tentatives += 1\n    return nb_tentatives\n</code></pre> <p>Exercice 5</p> <p>\u00c9crire une fonction <code>somme_liste</code> qui prend en param\u00e8tre une liste (d'entiers) et qui renvoie la somme de ses \u00e9l\u00e9ments.</p> <p>Rappel</p> <p>Il est primordial de savoir faire un parcours de liste par indice ou par \u00e9l\u00e9ment. Ici un parcours de liste par \u00e9l\u00e9ment est possible (pas besoin des indices).</p> Parcours par \u00e9l\u00e9mentParcours par indice <pre><code>def somme_liste(tab:list) -&gt; int:\n    somme = 0\n    for nb in tab:\n        somme += nb\n    return somme\n\nassert somme_liste([5, 1, 2]) == 8\nassert somme_liste([]) == 0\n</code></pre> <pre><code>def somme_liste(tab:list) -&gt; int:\n    somme = 0\n    for i in range(len(tab)):\n        somme += tab[i]\n    return somme\n\nassert somme_liste([5, 1, 2]) == 8\nassert somme_liste([]) == 0\n</code></pre> <p>Exercice 6</p> <p>\u00c9crire une fonction <code>echange</code> qui prend en param\u00e8tre une liste <code>tab</code>, deux entiers <code>i</code> et <code>j</code> et qui renvoie la liste dont les \u00e9l\u00e9ments d'indices <code>i</code> et <code>j</code> ont \u00e9t\u00e9 \u00e9chang\u00e9s.</p> <pre><code>def echange(tab:list, i:int, j:int) -&gt; list:\n    temp = tab[i]\n    tab[i] = tab[j]\n    tab[j] = temp\n    return tab\n</code></pre>"},{"location":"T02_Programmation/accueil/","title":"Th\u00e8me 2 : Langages et Programmation","text":""},{"location":"T02_Programmation/accueil/#theme-2-langages-et-programmation","title":"Th\u00e8me 2 : Langages et Programmation","text":"<p>Histoire de l'informatique</p> <p> </p> <p></p> <p>En 1962, Ole-Johan Dahl et Kristen Nygaard cr\u00e9ent le langage Simula, premier langage \u00e0 classes. </p> <p>Au d\u00e9but des ann\u00e9es 1970, Alan Kay s'inspire de Simula pour cr\u00e9er le langage Smalltalk, qui est le premier langage orient\u00e9 objet.</p> <p>Aujourd'hui, il existe de nombreux langages \u00e0 objets, sous forme fonctionnelle, imp\u00e9rative, ou les deux, comme Python par exemple.</p> <p> </p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_Exercices/","title":"T2.1 POO: Exercices","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_Exercices/#t21-poo-exercices","title":"T2.1 POO: Exercices","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <ol> <li>Compl\u00e9ter la classe <code>Balle</code> avec la m\u00e9thode <code>avance</code> qui doit actualiser les coordonn\u00e9es de l'objet en g\u00e9rant les rebonds sur les bords de la fen\u00eatre.</li> <li>Cr\u00e9er une liste de 100 instances de cette classe et compl\u00e9ter la boucle des \u00e9v\u00e9nements.</li> <li>Si possible, g\u00e9rer les collisions...</li> </ol> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire une classe <code>Voiture</code> qui contiendra les attributs <code>kilometrage</code>, <code>consommation</code> dont les valeurs seront donn\u00e9es comme arguments \u00e0 l'initialisation et un attribut <code>carburant</code> valant <code>0</code> par d\u00e9faut.</li> <li>Doter la classe d'une m\u00e9thode <code>affiche</code> qui donne le kilom\u00e9trage et le carburant disponible.</li> <li>Doter la classe d'une m\u00e9thode <code>remplir</code> qui prend en argument un entier correspondant au volume de carburant \u00e0 ajouter au r\u00e9servoir.</li> <li>Doter la classe d'une m\u00e9thode <code>avance</code> qui prend en argument un entier correspondant au nombre de kilom\u00e8tres parcourus et qui actualise les valeurs des attributs <code>kilometrage</code> et <code>carburant</code>.</li> </ol> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; christine = Voiture(0, 8)\n&gt;&gt;&gt; christine.affiche()\nLa voiture a parcouru 0 kilom\u00e8tres et il y a 0 litres d'essence dans le r\u00e9servoir.\n&gt;&gt;&gt; christine.remplir(25)\n&gt;&gt;&gt; christine.avance(200)\n&gt;&gt;&gt; christine.affiche()\nLa voiture a parcouru 200 kilom\u00e8tres et il y a 9.0 litres d'essence dans le r\u00e9servoir.\n</code></pre> <pre><code>class Voiture:\n    def __init__(self, km, conso):\n        self.kilometrage = km\n        self.consommation = conso\n        self.carburant = 0\n\n    def affiche(self):\n        return f'La voiture a parcouru {self.kilometrage} kilom\u00e8tres et il y a {self.carburant} litres d essence dans le r\u00e9servoir.')\n\n    def remplir(self, litres):\n        self.carburant += litres\n\n    def avance(self, kilometres):\n        self.kilometrage += kilometres\n        self.carburant -= kilometres/100 * self.consommation\n</code></pre> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire une classe <code>Chrono</code> qui contiendra les attributs <code>heures</code>, <code>minutes</code> et <code>secondes</code>.</li> <li>Doter la classe d'une m\u00e9thode <code>affiche()</code> qui affichera le temps <code>t</code>.</li> <li>Doter la classe d'une m\u00e9thode <code>avance(s)</code> qui fera avancer le temps <code>t</code> de <code>s</code> secondes.</li> </ol> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; t = Chrono(17,25,38)\n&gt;&gt;&gt; t.heures\n17\n&gt;&gt;&gt; t.minutes\n25\n&gt;&gt;&gt; t.secondes\n38\n&gt;&gt;&gt; t.affiche()\n'Il est 17 heures, 25 minutes et 38 secondes'\n&gt;&gt;&gt; t.avance(27)\n&gt;&gt;&gt; t.affiche()\n'Il est 17 heures, 26 minutes et 5 secondes'\n</code></pre> <pre><code>class Chrono:\n    def __init__(self, h, m, s):\n        self.heures = h\n        self.minutes = m\n        self.secondes = s\n\n    def affiche(self):\n        return f'Il est {self.heures} heures, {self.minutes} minutes et {self.secondes} secondes.'\n\n    def avance(self, s):\n        self.secondes += s\n        self.minutes += self.secondes // 60\n        self.secondes = self.secondes % 60\n        self.heures += self.minutes // 60\n        self.minutes = self.minutes % 60\n</code></pre> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une classe <code>Player</code> qui :</p> <ul> <li>ne prendra aucun argument lors de son instanciation.</li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>energie</code> valant 3 par d\u00e9faut. </li> <li>affectera \u00e0 chaque objet cr\u00e9\u00e9 un attribut <code>alive</code> valant <code>True</code> par d\u00e9faut.</li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>blessure()</code> qui diminue l'attribut <code>energie</code> de 1.</li> <li>fournira \u00e0 chaque objet une m\u00e9thode <code>soin()</code> qui augmente l'attribut <code>energie</code> de 1.</li> <li>si l'attribut <code>energie</code> passe \u00e0 0, l'attribut <code>alive</code> doit passer \u00e0 <code>False</code> et ne doit plus pouvoir \u00e9voluer.</li> </ul> Exemple d'utilisation de la classe<pre><code>&gt;&gt;&gt; mario = Player()\n&gt;&gt;&gt; mario.energie\n3\n&gt;&gt;&gt; mario.soin()\n&gt;&gt;&gt; mario.energie\n4\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.alive\nTrue\n&gt;&gt;&gt; mario.blessure()\n&gt;&gt;&gt; mario.alive\nFalse\n&gt;&gt;&gt; mario.soin()\n&gt;&gt;&gt; mario.alive\nFalse\n&gt;&gt;&gt; mario.energie\n0\n</code></pre> <pre><code>class Player:\n    def __init__(self):\n        self.energie = 3\n        self.alive = True\n\n    def blessure(self):\n        if self.alive:\n            self.energie -= 1\n            if self.alive:\n                self.alive = False\n\n    def soin(self):\n        if self.alive:\n            self.energie += 1\n</code></pre> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>On souhaite construire une base d'objets servant \u00e0 cr\u00e9er des jeux utilisant des d\u00e9s.</p> <ul> <li> <p>Un d\u00e9 doit poss\u00e9der un nombre de faces, ainsi qu'une valeur (la face sup\u00e9rieure du d\u00e9 une fois qu'on l'a lanc\u00e9, et la valeur -1 s'il n'a pas encore \u00e9t\u00e9 lanc\u00e9). On doit pouvoir lancer le d\u00e9, c'est-\u00e0-dire lui attribuer une valeur al\u00e9atoire entre 1 et son nombre de faces). </p> </li> <li> <p>Un jeu de d\u00e9s poss\u00e8de un nombre de d\u00e9s ainsi qu'un ensemble de ces d\u00e9s. On doit pouvoir lancer tous les d\u00e9s (en une fois), faire la somme des valeurs des d\u00e9s, et on souhaite afficher la valeur des d\u00e9s ainsi que leur somme.</p> </li> </ul> <p>Questions:</p> <ol> <li>Cr\u00e9er un diagramme de classe pour deux classes repr\u00e9sentant ce probl\u00e8me: une classe <code>Jeu</code> et une classe <code>De</code>.</li> <li>\u00c9crire les classes, sachant qu'une instance de classe <code>Jeu</code> doit prendre en arguments le nombre de d\u00e9s et le nombre de faces de chaque d\u00e9 (identique pour tous les d\u00e9s), et qu'une instance de classe <code>De</code> doit prendre en argument son nombre de faces.</li> </ol> Exemples d'utilisation<pre><code>&gt;&gt;&gt; j = Jeu(3, 6)  #pour cr\u00e9er un jeu de 3 d\u00e9s \u00e0 6 faces\n&gt;&gt;&gt; print(j)\nLes d\u00e9s n'ont pas \u00e9t\u00e9 lanc\u00e9s\n&gt;&gt;&gt; j.lancer()\n&gt;&gt;&gt; j.somme()\n13\n&gt;&gt;&gt; print(j)\nLes d\u00e9s valent 2, 5 et 6 et leur somme vaut 13.\n</code></pre> <pre><code>import random\n\nclass De():\n    def __init__(self, n):\n        self.nb_faces = n\n        self.valeur = -1\n\n    def lancer(self):\n        self.valeur = random.randint(1, self.nb_faces)\n\nclass Jeu:\n    def __init__(self, n, f):\n        self.nb_des = n\n        self.faces_de = f\n        self.des = [De(self.faces_de) for _ in range(self.nb_des)]\n\n    def lancer(self):\n        for de in self.des:\n            de.lancer()\n\n    def somme(self):\n        s = 0\n        for de in self.des:\n            s += de.valeur\n        return s\n\n    # ou return sum([de.valeur for de in self.des])\n\n    def __str__(self):\n        if self.somme() &lt; 0:\n            return 'Les d\u00e9s n ont pas \u00e9t\u00e9 lanc\u00e9s'\n        else:\n            valeurs = ', '.join([str(self.des[k].valeur) for k in range(self.nb_des-1)])\n            return f'Les d\u00e9s valent {valeurs} et {self.des[-1].valeur} et leur somme vaut {self.somme()}.'\n\n\n\nj = Jeu(3, 6)\n</code></pre> <p>Exercice  6</p> \u00c9nonc\u00e9Correction <p>On d\u00e9finit une classe g\u00e9rant une adresse IPv4.</p> <p>On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de <code>192.168.0.0</code> \u00e0 <code>192.168.0.255</code>.</p> <p>On consid\u00e8re que les adresses IP saisies sont valides.</p> <p>Les adresses IP <code>192.168.0.0</code> et <code>192.168.0.255</code> sont des adresses r\u00e9serv\u00e9es.</p> <p>Le code ci-dessous impl\u00e9mente la classe <code>AdresseIP</code>.</p> <p></p><pre><code>class AdresseIP:\n    def __init__(self, adresse):\n        self.adresse = ... \n\n    def liste_octets(self):\n        \"\"\"\n        renvoie une liste de nombres entiers,\n        la liste des octets de l'adresse IP\n        \"\"\"\n        # Note : split d\u00e9coupe la chaine de caract\u00e8res \n        # en fonction du s\u00e9parateur\n        return [int(i) for i in self.adresse.split(\".\")]\n\n    def est_reservee(self):\n        \"\"\"\n        renvoie True si l'adresse IP est une adresse\n        r\u00e9serv\u00e9e, False sinon\n        \"\"\"\n        reservees = [ ... ] \n        return ... \n\n    def adresse_suivante(self):\n        \"\"\"\n        renvoie un objet de AdresseIP avec l'adresse\n        IP qui suit l'adresse self si elle existe et None sinon\n        \"\"\"\n        octets = ... \n        if ... : \n            return None\n        octet_nouveau = ... + ... \n        return ...\n</code></pre> Compl\u00e9ter le code ci-dessus et instancier trois objets : adresse1, adresse2, adresse3 avec respectivement les arguments suivants : <code>'192.168.0.1'</code>, <code>'192.168.0.2'</code>, <code>'192.168.0.0'</code>.<p></p> <p>V\u00e9rifier que:</p> <pre><code>&gt;&gt;&gt; adresse1.liste_octets()\n[192, 168, 0, 1]\n&gt;&gt;&gt; adresse1.est_reservee()\nFalse\n&gt;&gt;&gt; adresse3.est_reservee()\nTrue\n&gt;&gt;&gt; adresse2.adresse_suivante().adresse # acces valide \u00e0 adresse\n# ici car on sait que l'adresse suivante existe\n'192.168.0.3'\n</code></pre> <p>Exercices Type BAC</p> <p> \u00c9nonc\u00e9 1  \u00c9nonc\u00e9 2  \u00c9nonc\u00e9 3 (EP) </p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO1/","title":"T2.1 POO : Programmation Orient\u00e9e Objet (part one)","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_POO1/#t21-poo-programmation-orientee-objet-part-one","title":"T2.1 POO : Programmation Orient\u00e9e Objet (part one)","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_POO1/#211-retour-sur-le-tp","title":"2.1.1 Retour sur le TP","text":"<p>Et si maintenant on doit cr\u00e9er 100 balles qui rebondissent?</p> <p> </p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO1/#212-introduction","title":"2.1.2 Introduction","text":"<p>Paradigme Objet</p> <p>La POO est un paradigme de programmation, au m\u00eame titre que la programmation imp\u00e9rative (que nous pratiquons d\u00e9j\u00e0) ou la programmation fonctionnelle (qui sera \u00e9tudi\u00e9e cette ann\u00e9e en Terminale), ou encore d'autres paradigmes (la liste est longue).</p> <p>Un paradigme de programmation pourrait se d\u00e9finir comme une philosophie dans la mani\u00e8re de programmer : c'est un parti-pris revendiqu\u00e9 dans la mani\u00e8re d'aborder le probl\u00e8me \u00e0 r\u00e9soudre. Une fois cette d\u00e9cision prise, des outils sp\u00e9cifiques au paradigme choisi sont utilis\u00e9s. </p> <p> </p> <p>Mais qu'est-ce qu'un objet? </p> <p>Vocabulaire</p> <p>En POO, une classe est un mod\u00e8le (on parle parfois de moule) de cr\u00e9ation d\u2019objets (en Python c\u2019est un type). Un objet est une valeur (au sens large), instance d\u2019une classe.</p> <p>La classe permet de d\u00e9finir quels seront les  attributs (ou variables d\u2019instance, c\u2019est \u00e0 dire les donn\u00e9es associ\u00e9es \u00e0 l\u2019objet, qui le caract\u00e9risent) et les m\u00e9thodes (comportement de l\u2019objet) qui sont des fonctions qui s'appliquent uniquement aux objets de cette classe.</p> <p>Nous en avons d\u00e9j\u00e0 manipul\u00e9s sans le savoir:</p> <pre><code>&gt;&gt;&gt; n = 42\n&gt;&gt;&gt; type(n)\n&lt;class 'int'&gt;\n</code></pre> <p><code>n</code> est une instance de classe <code>int</code>. Dans l'inspecteur d'objet de Thonny, on observe que cet objet poss\u00e8de des attributs (comme <code>real</code> par exemple) ainsi que des m\u00e9thodes (comme <code>bit_length</code> par exemple). </p> <p> </p> <p>On manipule ces objets (attributs et m\u00e9thodes) par la notation  point\u00e9e sp\u00e9cifique \u00e0 la POO...</p> <pre><code>&gt;&gt;&gt; n.real\n42\n&gt;&gt;&gt; n.bit_length()\n6\n</code></pre> <p>Un autre exemple avec la classe <code>list</code> bien connue:</p> <pre><code>&gt;&gt;&gt; tab = [1, 2, 3]\n&gt;&gt;&gt; type(tab)\n&lt;class 'list'&gt;\n&gt;&gt;&gt; tab.append(4)\n&gt;&gt;&gt; tab\n[1, 2, 3, 4]\n</code></pre>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO1/#213-creation-dune-classe","title":"2.1.3 Cr\u00e9ation d'une classe","text":"<p>Cr\u00e9ons une classe permettant de structurer l'objet \u00abballe\u00bb du DL2.</p> <p> </p> <p>D\u00e9finition de la classe</p> <p>On d\u00e9finit le nom d'une classe avec le mot-cl\u00e9 <code>class</code>, avec une majuscule (par convention):</p> <pre><code>class Balle:\n    pass\n</code></pre> <p>On peut d\u00e8s \u00e0 pr\u00e9sent cr\u00e9er une instance de <code>Balle</code>, mais avec une d\u00e9finition aussi pauvre, on ne peut pas en faire grand chose, sauf cr\u00e9er des attributs de fa\u00e7on anarchique:</p> <pre><code>&gt;&gt;&gt; b = Balle()\n&gt;&gt;&gt; type(b)\n&lt;class '__main__.Balle'&gt;\n&gt;&gt;&gt; b.x = 1\n&gt;&gt;&gt; b.nimp = True\n</code></pre> <p>M\u00e9thode constructeur</p> <p>Il s'agit de munir une instance de ses attributs d\u00e8s sa cr\u00e9ation, \u00e0 l'aide de la m\u00e9thode sp\u00e9ciale (ou magique) <code>__init__</code> qui comme son nom l'indique, initialise les attributs de l'objet avec les valeurs pass\u00e9es en param\u00e8tre. C'est un passage oblig\u00e9.</p> Avec param\u00e8tresSans (tous les) param\u00e8tres <p>La fa\u00e7on classique de d\u00e9finir un objet est de donner les valeurs de ses attributs lors de la cr\u00e9ation. </p><pre><code>class Balle:\n    def __init__(self, abscisse, ordonnee, dep_h, dep_v, coul, r):\n        self.x = abscisse\n        self.y = ordonnee\n        self.dx = dep_h\n        self.dy = dep_v\n        self.couleur = coul\n        self.rayon = r\n</code></pre> On peut alors cr\u00e9er un objet <code>Balle</code>, de position de d\u00e9part <code>(10, 50)</code>, de d\u00e9placement <code>(2, 3)</code>, rouge et de rayon 8:<p></p> <pre><code>&gt;&gt;&gt; b = Balle(10, 50, 2, 3, (255, 0, 0), 8)\n</code></pre> <p> </p> <p>On peut aussi affecter des valeurs identiques pour toutes les instances d'une classe, ou bien les choisir al\u00e9atoirement. </p><pre><code>import random\n\nwidth, height = 320, 240\n\nclass Balle:\n    def __init__(self, coul):\n        self.x = random.randint(0, width)\n        self.y = random.randint(0, height)\n        self.dx = random.randint(2, 4)\n        self.dy = random.randint(2, 4)\n        self.couleur = coul\n        self.rayon = 8\n</code></pre><p></p> <p>Pour d\u00e9clarer un objet, on ne donne ici que sa couleur:</p> <pre><code>&gt;&gt;&gt; b = Balle((255, 110, 66))\n</code></pre> <p>Param\u00e8tre <code>self</code></p> <p>Le premier param\u00e8tre d'une m\u00e9thode de classe (comme <code>__init__</code> ci-dessus) est toujours <code>self</code>. Stricto sensu, ce n'est pas un mot r\u00e9serv\u00e9 du langage Python (mais par convention oui), il sert \u00e0 pr\u00e9ciser que les variables d'instance (les attributs) et les m\u00e9thodes sont propres \u00e0 l'objet que l'on d\u00e9finit dans la classe. </p> <p>Ajout d'une m\u00e9thode</p> <p>On d\u00e9finit les m\u00e9thodes comme des fonctions, dans le corps de la classe (c'est-\u00e0-dire en respectant l'indentation), et avec <code>self</code> en premier param\u00e8tre.</p> <pre><code>class Balle:\n    def __init__(self, abscisse, ordonnee, dep_h, dep_v, coul, r):\n        self.x = abscisse\n        self.y = ordonnee\n        self.dx = dep_h\n        self.dy = dep_v\n        self.couleur = coul\n        self.rayon = r\n\n    def affiche(self):\n        pygame.draw.circle(screen, self.couleur, (self.x,self.y), self.rayon) \n</code></pre> <p>Dans la fonction <code>circle</code>, on distingue donc <code>screen</code> qui est une variable globale (pas de <code>self</code>) des autres variables d'instance (pr\u00e9fix\u00e9es par <code>self</code>).</p> <p>Appel d'une m\u00e9thode</p> <p>On peut appeler une m\u00e9thode de deux fa\u00e7ons (avec <code>obj</code> instance d'une classe <code>Classe</code> poss\u00e9dant une m\u00e9thode <code>methode</code>):</p> <ul> <li><code>obj.methode(*args)</code></li> <li><code>Classe.methode(obj, *args)</code></li> </ul> <p>Bien que ces deux syntaxes sont techniquement identiques, on n'utilise dans la pratique que la premi\u00e8re, mais conna\u00eetre la deuxi\u00e8me permet de comprendre pourquoi le param\u00e8tre <code>self</code> est toujours en premier, pourquoi l\u2019oublier peut produire des bugs difficiles \u00e0 trouver, et pourquoi ce n\u2019est pas un mot r\u00e9serv\u00e9 (c\u2019est un simple nom de param\u00e8tre, mais conventionnellement, on l\u2019appelle <code>self</code>).</p> <p>Exemple:</p> <pre><code>&gt;&gt;&gt; l = [1, 2, 3]\n&gt;&gt;&gt; l.append(4)\n&gt;&gt;&gt; list.append(l, 5)\n&gt;&gt;&gt; l\n[1, 2, 3, 4, 5]\n</code></pre>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/","title":"T2.1 POO (part two)","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#t21-poo-part-two","title":"T2.1 POO (part two)","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#214-des-inconvenients","title":"2.1.4 Des inconv\u00e9nients","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#mauvaise-utilisation","title":"Mauvaise utilisation","text":"<p>Reprenons l'exemple de la classe <code>Voiture</code> de l'exercice 2 et imaginons l'utilisation suivante:</p> <pre><code>&gt;&gt;&gt; dmc12 = Voiture(0, 20)\n&gt;&gt;&gt; dmc12.remplir(25000)\n&gt;&gt;&gt; dmc12.avance(-500)\n&gt;&gt;&gt; dmc12.affiche()\nLa voiture a parcouru -500 kilom\u00e8tres et il y a 25100.0 litres d'essence dans le r\u00e9servoir.\n</code></pre> <p>Quels probl\u00e8mes illustre cet exemple?</p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#differentes-implementations","title":"Diff\u00e9rentes impl\u00e9mentations","text":"<p>Revenons maintenant sur la classe <code>Chrono</code> de l'exercice 3. L'objectif de cette classe est de manipuler un chronom\u00e8tre, et donc d'utiliser exclusivement les m\u00e9thodes <code>affiche</code> et <code>avance</code>. On aurait donc tr\u00e8s bien pu ne g\u00e9rer qu'un seul attribut <code>temps</code> donnant le temps en secondes, et de calculer les heures et minutes \u00e0 partir de la valeur de cet attribut. Par exemple:</p> <pre><code>class Chrono:\n    def __init__(self, t):\n        self.temps = t\n\n    def affiche(self):\n        h = self.temps // 3600\n        m = self.temps // 60 - 60*h\n        s = self.temps - 3600*h - 60*m\n        return f'Il est {h} heures, {m} minutes et {s} secondes.'\n\n    def avance(self, s):\n        self.temps += s\n</code></pre>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#215-un-remede-lencapsulation","title":"2.1.5 Un rem\u00e8de: l'encapsulation","text":"<p>Priv\u00e9 \u2260 Public</p> <p>Dans la philosophie de la POO, les attributs doivent \u00eatre priv\u00e9s, c'est \u00e0 dire qu'ils ne doivent pas \u00eatre modifiables directement. Leur manipulation doit se faire uniquement par des m\u00e9thodes. L'utilisateur ne doit pas avoir besoin de conna\u00eetre ces attributs, cela reste dans les choix d'impl\u00e9mentation.</p> <p>Les m\u00e9thodes, elles, sont publiques: elles constituent ce qu'on appelle l'interface de la classe.</p> <p>Pour acc\u00e9der ou modifier les valeurs des attributs, on passe donc par des m\u00e9thodes d\u00e9di\u00e9es : c'est le principe de l'encapsulation.</p> <p>Exemple: accesseurs et mutateurs</p> <pre><code>class Voiture:\n    def __init__(self, k, conso):\n        self.kilometrage = k\n        self.consommation = conso\n        self.carburant = 0\n\n    def get_kilometrage(self):\n        return self.kilometrage\n\n    def set_kilometrage(self, k):\n        if k &gt; self.get_kilometrage():\n            self.kilometrage = k\n</code></pre> <p>\u25b6 La m\u00e9thode <code>get_kilometrage</code> est ce qu'on appelle un accesseur (getter en anglais). Sa seule et unique vocation est de donner la valeur de l'attribut correspondant, celui-ci n'\u00e9tant pas accessible puisque priv\u00e9.</p> <p>\u25b6 La m\u00e9thode <code>set_kilometrage</code> est ce qu'on appelle un mutateur (setter en anglais). Il permet de modifier la valeur de l'attribut, en permettant d'effectuer tous les contr\u00f4les \u00e9ventuels sur cette valeur.</p> <p>Exercice  7</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire un accesseur et un mutateur pour l'attribut <code>carburant</code>.</li> <li>R\u00e9\u00e9crire la m\u00e9thode <code>avance</code> de la classe <code>Voiture</code> en utilisant les accesseurs et mutateurs.</li> </ol> <p>Exercice  8</p> \u00c9nonc\u00e9Correction <p>Reprendre la classe <code>Chrono</code> (impl\u00e9mentation ci-dessus, avec un seul attribut) en ajoutant les m\u00e9thodes getter et setter (avec contr\u00f4le sur l'argument) et en modifiant les m\u00e9thodes existantes.</p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#216-complements-hors-programme","title":"2.1.6 Compl\u00e9ments (Hors programme)","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#methodes-speciales","title":"M\u00e9thodes sp\u00e9ciales","text":"<p>Les m\u00e9thodes sp\u00e9ciales (parfois appel\u00e9es m\u00e9thodes magiques) sont encadr\u00e9es par des <code>__</code>. Ces m\u00e9thodes (il en existe environ une centaine) sont appel\u00e9es dans des contextes particuliers (par exemple <code>__init__</code> est appel\u00e9e apr\u00e8s que l\u2019objet a \u00e9t\u00e9 allou\u00e9, pour initialiser ses attributs). Utiliser <code>__init__</code> est un passage oblig\u00e9. </p> <p>Un autre passage presque oblig\u00e9 est l\u2019obtention d\u2019un affichage human-friendly d\u2019un objet, ce qu'on a fait avec nos fonctions <code>affiche</code> dans les exemples/exercices pr\u00e9c\u00e9dents.</p> <ul> <li> <p><code>__str__</code> : donne une repr\u00e9sentation de l'objet en cha\u00eene de caract\u00e8res d\u00e8s que Python en a besoin, par exemple pour <code>print</code>.</p> </li> <li> <p><code>__repr__</code> : est utilis\u00e9e pour afficher l'objet lors de son \u00e9valuation, en console par exemple. S\u2019il n\u2019y a pas de m\u00e9thode <code>__str__</code> c\u2019est <code>__repr__</code> qui est utilis\u00e9e lors d\u2019un affichage avec <code>print</code>.</p> </li> <li> <p><code>__len__</code> est appel\u00e9e automatiquement si on demande la taille d\u2019un objet avec la fonction <code>len</code>. </p> </li> </ul> <p>Exemples</p> Avec une m\u00e9thode normaleAvec <code>__str__</code>Avec <code>__repr__</code>La m\u00e9thode <code>__len__</code> <pre><code>class Chrono:\n    def __init__(self, t):\n        self.temps = t\n\n    def get_h(self):\n        return self.temps // 3600\n\n    def get_m(self):\n        return self.temps // 60 - 60*self.get_h\n\n    def get_s(self):\n        return self.temps - 3600*self.get_h - 60*self.get_m\n\n    def affiche(self):\n        return f'Il est {self.get_h} heures, {self.get_m} minutes et {self.get_s} secondes.'\n</code></pre> Utilisation en console<pre><code>&gt;&gt;&gt; c = Chrono(1978)\n&gt;&gt;&gt; c\n&lt;__main__.Chrono object at 0x7fc8986c7cd0&gt;\n&gt;&gt;&gt; print(c)\n  &lt;__main__.Chrono object at 0x7fc8986c7cd0&gt;\n&gt;&gt;&gt; c.affiche()\n'Il est 0 heures, 32 minutes et 58 secondes.'\n</code></pre> <pre><code>class Chrono:\n    def __init__(self, t):\n        self.temps = t\n\n    def get_h(self):\n        return self.temps // 3600\n\n    def get_m(self):\n        return self.temps // 60 - 60*self.get_h\n\n    def get_s(self):\n        return self.temps - 3600*self.get_h - 60*self.get_m\n\n    def __str__(self):\n        return f'Il est {self.get_h} heures, {self.get_m} minutes et {self.get_s} secondes.'\n</code></pre> Utilisation en console<pre><code>&gt;&gt;&gt; c = Chrono(1978)\n&gt;&gt;&gt; c\n&lt;__main__.Chrono object at 0x7f701d943460&gt;\n&gt;&gt;&gt; print(c)\n  Il est 0 heures, 32 minutes et 58 secondes.\n</code></pre> <pre><code>class Chrono:\n    def __init__(self, t):\n        self.temps = t\n\n    def get_h(self):\n        return self.temps // 3600\n\n    def get_m(self):\n        return self.temps // 60 - 60*self.get_h\n\n    def get_s(self):\n        return self.temps - 3600*self.get_h - 60*self.get_m\n\n    def __repr__(self):\n        return f'Il est {self.get_h} heures, {self.get_m} minutes et {self.get_s} secondes.'\n</code></pre> Utilisation en console<pre><code>&gt;&gt;&gt; c = Chrono(1978)\n&gt;&gt;&gt; c\nIl est 0 heures, 32 minutes et 58 secondes.\n&gt;&gt;&gt; print(c)\n  Il est 0 heures, 32 minutes et 58 secondes.\n</code></pre> <p>Avec cette m\u00e9thode sp\u00e9ciale, on d\u00e9cide de ce que signifie la taille (longueur) de l'objet (si cela signifie quelque chose, n'est-ce pas... ). Si elle n'est pas d\u00e9finie dans la classe, appeler la fonction <code>len</code> entra\u00eenera une erreur:</p> <pre><code>TypeError: object of type 'Chrono' has no len()\n</code></pre> <pre><code>class Parcours:\n    def __init__(self, spes, options):\n        self.trc = ['Philo', 'HG', 'LVA', 'LVB', 'ES', 'EPS']\n        self.spes = spes\n        self.options = options\n\n    def __len__(self):\n        return len(self.trc) + len(self.spes) + len(self.options)\n</code></pre> <pre><code>&gt;&gt;&gt; mpi = Parcours(['Maths', 'NSI'], ['Maths expertes'])\n&gt;&gt;&gt; len(mpi)\n9\n</code></pre>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#proprietes","title":"Propri\u00e9t\u00e9s","text":"<p>En POO, Python permet de combiner:</p> <ul> <li>le respect des getters et setters (probl\u00e8me g\u00e9n\u00e9ral \u00e0 la POO);</li> <li>la souplesse syntaxique de la manipulation des attributs.</li> </ul> <p>On utilise pour cela des propri\u00e9t\u00e9s. Pour l'illustrer, on observe une classe <code>Point</code> qui repr\u00e9sente un point par une abscisse et une ordonn\u00e9e (comme c'est original) positives</p> <p></p><pre><code>class Point:\n    def __init__(self, x, y):\n        self._x = x\n        self._y = y\n\n    def get_x(self):\n        return self._x\n\n    def set_x(self, x):\n        if x &gt;=0:\n            self._x = x\n    # idem pour y\n\n    x = property(get_x, set_x)\n    y = property(get_y, set_y)\n</code></pre> Dans le code qui pr\u00e9c\u00e8de, <code>_x</code> est un attribut, <code>get_x</code> et <code>set_x</code> sont des m\u00e9thodes (qui se trouvent \u00eatre un getter et un setter), et <code>x</code> est une propri\u00e9t\u00e9.<p></p> <p>Si on \u00e9crit \u00e0 pr\u00e9sent :</p> <pre><code>&gt;&gt;&gt; p = Point(1, 0)\n&gt;&gt;&gt; p.x\n1\n&gt;&gt;&gt; p.x = -2\n&gt;&gt;&gt; p.x\n1\n&gt;&gt;&gt; p.x += 3\n&gt;&gt;&gt; p.x\n4\n</code></pre> <p>En utilisant la propri\u00e9t\u00e9 <code>x</code>, Python utilise automatiquement le getter ou le setter selon le contexte. Noter que dans <code>p.x += 3</code>, le getter et le setter sont utilis\u00e9s.</p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#decorateurs","title":"D\u00e9corateurs","text":"<p>Voici une autre syntaxe possible, mais on n'a plus acc\u00e8s directement aux getter et setter.</p> <pre><code>class Point:\n    def __init__(self, x, y):\n        self._x = x\n        self._y = y\n\n    @property\n    def x(self):\n        return self._x\n\n    @x.setter\n    def x(self, x):\n        self._x = x\n</code></pre>"},{"location":"T02_Programmation/T2.1_POO/T2.1_POO2/#heritage","title":"H\u00e9ritage","text":"<p>Un des piliers de la POO (mais hors-programme) est le concept d'h\u00e9ritage. En bref, cela signifie qu'une classe peut \u00eatre \u00e9crite \u00e0 partir d'une classe parent d\u00e9j\u00e0 existante, et donc h\u00e9ritera de ses attributs et m\u00e9thodes.</p> <p>Par exemple, si on veut des points color\u00e9s, il suffit d'ajouter un atttibut de couleur \u00e0 la classe pr\u00e9c\u00e9dente.</p> <pre><code>class PointColore(Point):\n    def __init__(self, x, y, couleur):\n        super().__init__(x, y)\n        self.couleur = couleur\n</code></pre> <p>On signale que la classe <code>PointColore</code> h\u00e9rite de la classe parent <code>Point</code> (ligne 1).</p> <p>Ensuite, la m\u00e9thode <code>__init__</code> a \u00e9t\u00e9 red\u00e9finie. On notera l\u2019appel \u00e0 la m\u00e9thode <code>__init__</code> de la classe parent en utilisant <code>super</code> pour les attributs de la classe <code>Point</code>.</p> <p>Toute instance de la classe <code>PointColore</code> b\u00e9n\u00e9ficie des m\u00e9thodes dej\u00e0 existantes dans <code>Point</code>, sans avoir besoin de les red\u00e9finir.</p>"},{"location":"T02_Programmation/T2.1_POO/T2.1_TP/","title":"TP : introduction \u00e0 Pygame","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_TP/#tp-introduction-a-pygame","title":"TP : introduction \u00e0 Pygame","text":""},{"location":"T02_Programmation/T2.1_POO/T2.1_TP/#ressources","title":"Ressources","text":"<p>Si besoin, consulter les pages sur le site de premi\u00e8re:</p> <ul> <li>Introduction \u00e0 Pygame </li> <li>Animation simple (sans \u00e9v\u00e9nements) </li> <li>Dessiner avec Pygame </li> </ul>"},{"location":"T02_Programmation/T2.1_POO/T2.1_TP/#enonce","title":"\u00c9nonc\u00e9","text":"<ol> <li> <p>\u00c0 partir du code donn\u00e9 en exemple avec une repr\u00e9sentation de la balle par un cercle (cf. Dessiner avec Pygame), terminer le programme pour faire rebondir la balle sur tous les bords de la fen\u00eatre.     </p> <pre><code>import pygame\nfrom pygame.locals import *\n\npygame.init()\n\nwidth, height = 320, 240\nscreen = pygame.display.set_mode((width, height))\n\n# Caract\u00e9ristiques de la balle\nrayon = \nx = width // 2 \ny = height // 2\ndx = 1\ncouleur = (255, 110, 66)\n# Dessin du cercle\npygame.draw.circle(screen, couleur, (x, y), rayon)\n\ncontinuer = True\nwhile continuer:\n    for evenement in pygame.event.get():\n        if evenement.type == QUIT:\n            continuer = False\n\n    x = x + dx\n\n    screen.fill([0, 0, 0])\n    pygame.draw.circle(screen, couleur, (x, y), rayon)\n    pygame.display.flip()\n\npygame.quit()\n</code></pre> </li> <li> <p>Ajouter une deuxi\u00e8me balle, dont la position de d\u00e9part, la couleur et le d\u00e9placement seront al\u00e9atoires (utiliser le module <code>random</code>).</p> </li> <li>G\u00e9rer la collision entre deux balles:<ul> <li>en cr\u00e9ant une fonction <code>distance</code> qui renvoie la distance entre les centres de deux balles;</li> <li>en \u00e9changeant les d\u00e9placements des balles lorsqu'il y a collision.</li> </ul> </li> </ol>"},{"location":"T02_Programmation/T2.2_Recursivite/T2.2_Recursivite/","title":"T2.2 R\u00e9cursivit\u00e9","text":""},{"location":"T02_Programmation/T2.2_Recursivite/T2.2_Recursivite/#t22-recursivite","title":"T2.2 R\u00e9cursivit\u00e9","text":"<p>Voir ici</p> <p> </p> <p>Dans le m\u00eame \u00e9tat d'esprit, chez Google:</p> <p> </p>"},{"location":"T02_Programmation/T2.2_Recursivite/T2.2_Recursivite/#221-principe","title":"2.2.1 Principe","text":"<p>En r\u00e8gle g\u00e9n\u00e9rale, un objet est dit r\u00e9cursif s'il se d\u00e9finit \u00e0 partir de lui-m\u00eame. On trouve donc des acronymes r\u00e9cursifs, comme GNU dans GNU/Linux (GNU is Not Unix), le logiciel d'\u00e9mulation WINE (Wine Is Not an Emulator), les cartes bancaire VISA (Visa International Service Association), le moteur de recherche Bing (Bing is not Google), etc.</p> <p>Mais aussi des images illustrant la mise en ab\u00eeme:</p> <p> </p> <p>En informatique, on parle de programme r\u00e9cursif ou plut\u00f4t de fonction r\u00e9cursive:</p> <p>D\u00e9finition</p> <p>Une fonction r\u00e9cursive est une fonction qui s'appelle elle-m\u00eame dans sa propre d\u00e9finition.</p> <p>Un programme est r\u00e9cursif lorsqu'il fait intervenir une fonction r\u00e9cursive (ou plusieurs).</p>"},{"location":"T02_Programmation/T2.2_Recursivite/T2.2_Recursivite/#222-premiers-exemples-et-precautions-dusage","title":"2.2.2 Premiers exemples et pr\u00e9cautions d'usage","text":"<p>No infinite recursion !</p> <p>Voici trois premiers exemples de fonctions r\u00e9cursives. Dans chaque cas, rep\u00e9rer l'appel r\u00e9cursif \u00e0 la fonction.</p> <p>Une seule de ces 3 fonctions est correcte, laquelle?</p> Fonction 1Fonction 2Fonction 3 <pre><code>def f(n):\n    print(n)\n    f(n-1)\n    print(\"Hello world!\")\n</code></pre> <pre><code>def f(n):\n    if n == 0:\n        print(\"Hello world!\")\n    else:\n        print(n)\n        f(n-1)\n</code></pre> <pre><code>def f(n):\n    if n == 0:\n        print(\"Hello world!\")\n    else:\n        print(n)\n        f(n)\n</code></pre> <p>Cas de base</p> <p>Lorsqu'on \u00e9crit une fonction r\u00e9cursive, le pi\u00e8ge classique est de cr\u00e9er une boucle infinie.</p> <p>Hormis les blaques de geeks  d'initi\u00e9s, la r\u00e9cursivit\u00e9 en informatique ne tol\u00e8re pas l'auto-r\u00e9f\u00e9rence infinie: il faut pr\u00e9voir une condition d'arr\u00eat qui traite le cas de base !!!</p> <p> </p> <p>Terminaison</p> <p>Pour s'assurer qu'une fonction r\u00e9cursive se termine, il faut absolument que la cha\u00eene d'appel conduise au cas de base. </p> <ul> <li>si le param\u00e8tre de la fonction est un entier, alors l'appel doit se faire avec un entier strictement inf\u00e9rieur;</li> <li>si le param\u00e8tre de la fonction est une liste, alors l'appel doit se faire avec une liste de longueur strictement inf\u00e9rieure;</li> <li>etc.</li> </ul> <p>Exemples \u00e0 conna\u00eetre</p> Somme des n premiers entiersFactorielle <p>On souhaite calculer la somme suivante:  \\(S = 0 + 1 + 2 + 3 + \\dots + (n-1) + n\\)</p> <p>En premi\u00e8re, on a vu comment construire une fonction it\u00e9rative le permettant, \u00e0 l'aide d'une boucle <code>for</code> (d'o\u00f9 le terme it\u00e9ratif) et d'une variable accumulatrice:</p> <pre><code>def somme(n):\n    s = 0\n    for k in range(n+1):\n        s += k\n    return s\n</code></pre> <p>Une autre fa\u00e7on de voir le probl\u00e8me, c'est de se dire que cette somme peut s'\u00e9crire \\(S = n + (n-1) + \\dots + 3 + 2 + 1 + 0\\) et que c'est la somme de \\(n\\) et de la somme des \\(n-1\\) premiers entiers : \\(S = n + \\underbrace{(n-1) + \\dots + 3 + 2 + 1 + 0}_{\\text{somme des entiers jusqu'\u00e0 } n-1}\\).</p> <p>On \u00e9crit alors de fa\u00e7on \u00abassez naturelle\u00bb la fonction r\u00e9cursive suivante:</p> <pre><code>def somme(n):\n    if n == 0:\n        return 0\n    else:\n        return n + somme(n-1)\n</code></pre> <p>En math\u00e9matiques, la factorielle d'un nombre entier \\(n\\), not\u00e9e \\(n!\\), est le produit de tous les entiers positifs non nuls inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\).</p> <p>Autrement dit, \\(n! = 1 \\times 2 \\times 3 \\times \\dots \\times (n-1) \\times n = n \\times (n-1)  \\times \\dots \\times 3 \\times 2 \\times 1\\).</p> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>S'inspirer des fonctions <code>somme</code> pr\u00e9c\u00e9dentes pour \u00e9crire deux fonctions <code>facto_iter</code> (it\u00e9rative) et <code>facto_rec</code> (r\u00e9cursive) renvoyant la factorielle d'un nombre entier <code>n</code> strictement positif.</p>"},{"location":"T02_Programmation/T2.2_Recursivite/T2.2_Recursivite/#223-mecanisme","title":"2.2.3 M\u00e9canisme","text":"<p>Maintenant qu'on a vu le principe d'une fonction r\u00e9cursive, il faut comprendre comment se passent les appels successifs \u00e0 la fonction, pour un param\u00e8tre diff\u00e9rent. </p> <p>Reprenons l'exemple de la fonction r\u00e9cursive <code>somme</code>. Si on appelle cette fonction: </p><pre><code>&gt;&gt;&gt; somme(5)\n</code></pre> Puisque l'argument <code>5</code> ne correspond pas au cas de base, la fonction va faire appel \u00e0 <code>somme(4)</code>. Il faut retenir que l'ex\u00e9cution de la fonction <code>somme</code> est interrompue (avec l'argument <code>5</code>) pour rappeler la fonction <code>somme</code> (avec l'argument <code>4</code>)... <p></p> <p>Pour g\u00e9rer ces diff\u00e9rents appels, le syst\u00e8me utilise une pile d'ex\u00e9cution:</p> <p></p> <p>On parle de pile, car les ex\u00e9cutions successives \u00abs'empilent\u00bb les unes sur les autres. Lorsque le cas de base est atteint, on \u00abd\u00e9pile\u00bb les instructions.</p> <p>D'o\u00f9 l'importance de l'existence du cas de base, et de s'assurer qu'il sera bien atteint... </p> <p>Limitation de la taille de la pile</p> <p>Dans l'exemple pr\u00e9c\u00e9dent, la pile a une profondeur de 6. La profondeur de la pile n'est pas illimit\u00e9e: </p><pre><code>&gt;&gt;&gt; somme(1000)\nTraceback (most recent call last):\n  File \"&lt;console&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;tmp 1&gt;\", line 5, in somme\n    return n + somme(n-1)\n  File \"&lt;tmp 1&gt;\", line 5, in somme\n    return n + somme(n-1)\n  File \"&lt;tmp 1&gt;\", line 5, in somme\n    return n + somme(n-1)\n  [Previous line repeated 984 more times]\n  File \"&lt;tmp 1&gt;\", line 2, in somme\n    if n == 0:\nRecursionError: maximum recursion depth exceeded in comparison\n</code></pre> Vous venons de provoquer un \u00abd\u00e9bordement de pile\u00bb, le c\u00e9l\u00e8bre stack overflow.<p></p> <p>De mani\u00e8re g\u00e9n\u00e9rale, les programmes r\u00e9cursifs sont souvent proches de la d\u00e9finition du probl\u00e8me \u00e0 r\u00e9soudre et assez naturels \u00e0 \u00e9crire, mais ils sont susceptibles de g\u00e9n\u00e9rer un trop grand nombre d'appels \u00e0 eux-m\u00eames et de n\u00e9cessiter un temps d'ex\u00e9cution trop grand ou un d\u00e9bordement de pile. Il est parfois possible de les optimiser, comme nous le verrons dans le cours concernant la programmation dynamique. </p>"},{"location":"T02_Programmation/T2.2_Recursivite/T2.2_Recursivite/#224-exercices","title":"2.2.4 Exercices","text":"<p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>somme_tab</code> qui prend en param\u00e8tre:</p> <ul> <li>un tableau d'entiers <code>tab</code> </li> <li>un indice <code>i</code> </li> </ul> <p>et qui renvoie la somme des \u00e9l\u00e9ments du tableau \u00e0 partir de l'indice donn\u00e9.</p> <p>Conseil: Bien r\u00e9fl\u00e9chir au cas d'arr\u00eat et \u00e0 l'appel r\u00e9cursif avant de se lancer dans l'\u00e9criture de la fonction...</p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction r\u00e9cursive <code>puissance(x, n)</code> qui renvoie le nombre \\(x^n\\).</p> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire une fonction r\u00e9cursive <code>nb_chiffres(n)</code> qui renvoie le nombre de chiffres du nombre entier <code>n</code> (penser \u00e0 la division euclidienne par 10).</li> <li>\u00c9crire une fonction r\u00e9cursive <code>nb_bits(n)</code> qui renvoie le nombre de bits dans l'\u00e9criture binaire du nombre entier <code>n</code> (penser \u00e0 la division euclidienne par 2).</li> </ol> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>Le plus grand diviseur commun de deux nombres entiers \\(a\\) et \\(b\\), not\u00e9 \\(\\text{pgcd}(a, b)\\), v\u00e9rifie les propri\u00e9t\u00e9s suivantes:</p> <ul> <li>\\(\\text{pgcd}(a, 0) = a\\)</li> <li>\\(\\text{pgcd}(a, b) = \\text{pgcd}(b, c)\\) o\u00f9 \\(c\\) est le reste dans la division euclidienne de \\(a\\) par \\(b\\).</li> </ul> <p>\u00c9crire une fonction r\u00e9cursive qui calcule le pgcd de deux nombres entiers.</p> <p>Exercice  6</p> \u00c9nonc\u00e9IndicationsCorrection <p>La multiplication \u00e9gyptienne, dite aussi du paysan russe, \u00e9tait utilis\u00e9e par les scribes d\u00e8s l'Antiquit\u00e9. Elle ne n\u00e9cessite pas de conna\u00eetre les tables de multiplication (sic), seulement la division par deux et l'addition.</p> <p>Principe pour multiplier \\(a\\) par \\(b\\):</p> <ul> <li>on divise \\(a\\) par 2 tant qu'on peut en doublant \\(b\\);</li> <li>sinon on d\u00e9cr\u00e9mente \\(a\\) et on ajoute \\(b\\) au r\u00e9sultat.</li> </ul> <p>\u00c9crire une fonction r\u00e9cursive qui multiplie deux entiers donn\u00e9s en param\u00e8tre par cette m\u00e9thode.</p> <ul> <li>Effectuer \u00e0 la main des multiplications \u00e9gyptiennes.</li> <li>Bien r\u00e9fl\u00e9chir au cas de base.</li> </ul> <p>Exercice  7 : r\u00e9cursivit\u00e9 double</p> \u00c9nonc\u00e9Correction <p>En math\u00e9matiques, la suite de Fibonacci est d\u00e9finie ainsi:</p> <ul> <li>\\(F_0=1\\) et \\(F_1=1\\)</li> <li>pour tout entier \\(n \\geqslant 2\\): \\(F_{n+2} = F_{n+1} + F_n\\).</li> </ul> <p>On a donc par exemple \\(F_2 = 1+1=2\\), \\(F_3=2+1=3\\), \\(F_4=3+2=5\\), etc.</p> <ol> <li>Impl\u00e9menter une fonction r\u00e9cursive <code>fibo</code> qui calcule les termes de la suite de Fibonacci.</li> <li>Dessiner sous forme d'un arbre les appels de <code>fibo(6)</code>.     D\u00e9but de l'arbre:      </li> </ol> <p>Exercice  8 : r\u00e9cursivit\u00e9 crois\u00e9e</p> \u00c9nonc\u00e9Correction <p>L'objectif est d'\u00e9crire deux fonctions <code>est_pair</code> et <code>est_impair</code> qui testent la parit\u00e9 d'un nombre entier.</p> <p>Seules op\u00e9rations autoris\u00e9es : test de nullit\u00e9 et soustraire 1.</p> <p>Exercice  9: les tours de Hano\u00ef</p> \u00c9nonc\u00e9Correction <p>Le probl\u00e8me des tours de Hano\u00ef, invent\u00e9 par le math\u00e9maticien \u00c9douard Lucas en 1889, consiste \u00e0 d\u00e9placer des disques de diam\u00e8tres diff\u00e9rents d'une tour de d\u00e9part \u00e0 une tour d'arriv\u00e9e, en passant par une tour interm\u00e9diaire.</p> <p>On ne peut d\u00e9placer qu'un disque \u00e0 la fois, et on ne peut pas placer un disque sur un plus petit que lui.</p> <p>Le but est bien entendu de minimiser le nombre de d\u00e9placements.</p> <p> </p> <ol> <li>Essayer de trouver une strat\u00e9gie optimale en s'entra\u00eenant par exemple ici </li> <li> <p>Observer les \u00e9tapes-cl\u00e9s suivantes:</p> \u00c9tape 1\u00c9tape 2\u00c9tape 3\u00c9tape 4 <p> </p> <p> </p> <p> </p> <p> </p> </li> <li> <p>\u00c9crire une fonction r\u00e9cursive <code>hanoi(n, depart, arrivee, inter)</code> affichant les d\u00e9placements successifs (par ex. <code>1 -&gt; 3</code>) pour d\u00e9placer <code>n</code> disques de la tour <code>depart</code> vers la tour <code>arrivee</code> en passant par la tour interm\u00e9diaire <code>inter</code>.</p> </li> </ol> <p> Code Pygame  </p> <p>Exercice  10: rendu de monnaie, le retour</p> \u00c9nonc\u00e9IndicationsCorrection <p>\u00c9crire une fonction r\u00e9cursive <code>nb_pieces(pieces, somme)</code> o\u00f9 <code>pieces</code> est une liste de valeurs de pieces (tri\u00e9e dans l'ordre d\u00e9croissant) et <code>somme</code> un entier donnant la somme \u00e0 atteindre, et qui renvoie le nombre de pi\u00e8ces minimal.</p> <p>Pour cela, on envisagera la strat\u00e9gie suivante:</p> <ul> <li>en notant <code>h</code> le premier \u00e9l\u00e9ment de la liste et <code>t</code> la liste compl\u00e8te priv\u00e9e du premier \u00e9l\u00e9ment, la liste de pi\u00e8ces est <code>[h] + t</code>.</li> <li>on se retrouve face \u00e0 deux options: soit on prend <code>h</code> et il reste \u00e0 faire la somme <code>somme - h</code> avec la liste compl\u00e8te, soit on ne prend pas <code>h</code> et il reste \u00e0 faire la somme <code>somme</code> avec la liste <code>t</code></li> <li>on choisit le minimum renvoy\u00e9 par ces deux options...</li> </ul> <ul> <li>Envisager le cas o\u00f9 la somme est n\u00e9gative ou qu'il n'y a pas de pi\u00e8ces \u00e0 prendre.</li> <li>Pour obtenir un nombre arbitrairement grand, on peut utiliser <code>math.inf</code> du module <code>math</code>.</li> <li>Slicing (hors-programme): pour obtenir une liste priv\u00e9e de son premier \u00e9l\u00e9ment, on \u00e9crit <code>liste[1:]</code>.</li> </ul> <p>Exercice  11: le sac \u00e0 dos, le retour</p> \u00c9nonc\u00e9Correction <p>En analysant le probl\u00e8me de fa\u00e7on similaire \u00e0 l'exercice pr\u00e9c\u00e9dent, compl\u00e9ter la fonction r\u00e9cursive suivante:</p> <pre><code>def choix_recursif(poids:list, valeurs:list, M:int) -&gt; tuple:\n    '''\n    Renvoie le poids, la valeur et la s\u00e9lection d'objets sous forme d'un tuple (int, int, list)\n    '''\n    if poids == []:\n        return ...\n    # Cas o\u00f9 on ne prend pas l'objet 0\n    poids1, valeur1, choix1 = choix_recursif(..., ..., ...)\n    if M &gt;= poids[0]:\n        # Cas o\u00f9 on prend l'objet 0\n        poids2, valeur2, choix2 = choix_recursif(..., ..., ...)\n        poids2 += ...\n        valeur2 += ...\n        if valeur2 &gt; valeur1:\n            return ...\n        else:\n            return ...\n    else:\n        return ...\n</code></pre> <p>Exercice  12</p> \u00c9nonc\u00e9Correction <p>En classe de premi\u00e8re, on a vu un programme it\u00e9ratif impl\u00e9mentant l'algorithme de recherche dichotomique.</p> <p>Il s'agit de faire une recherche d'une valeur dans une liste tri\u00e9e en \u00abcoupant\u00bb la liste en deux \u00e0 chaque comparaison de la valeur cherch\u00e9e avec la valeur centrale de la liste. Pour rappel, voir ici.</p> <p>\u00c9crire une fonction <code>recherche_dichotomie</code> qui prend en param\u00e8tre une liste d'entiers <code>tab</code> (tri\u00e9e par ordre croissant) et une valeur <code>n</code> et qui renvoie  un bool\u00e9en indiquant la pr\u00e9sence ou non de la valeur <code>n</code> dans la liste <code>tab</code>.</p> <p>Exceptionnellement, le slicing est autoris\u00e9:</p> <ul> <li><code>tab[i:]</code> renvoie la liste des \u00e9l\u00e8ments de <code>tab</code> de l'indice <code>i</code> (inclus) jusqu'\u00e0 la fin de la liste ;</li> <li><code>tab[:i]</code> renvoie la liste des \u00e9l\u00e8ments de <code>tab</code> de l'indice 0 \u00e0 l'indice <code>i</code> (exclus).</li> </ul> <p>Exercice  13</p> \u00c9nonc\u00e9Correction <p>Les coefficients binomiaux se calculent ais\u00e9ment \u00e0 l'aide du triangle de pascal qui permet de les repr\u00e9senter:</p> p=0 p=1 p=2 p=3 p=4 p=5 n=0 1 n=1 1 1 n=2 1 2 1 n=3 1 3 3 1 n=4 1 4 6 4 1 n=5 1 5 10 10 5 1 <p>Le mode de calcul du coefficient \\(C(n, p)\\) est le suivant:</p> <ul> <li>\\(C(n,0)=1\\) et \\(C(n,n)=1\\)</li> <li>Dans les autres cas (\\(0 &lt; p &lt; n\\)), on a \\(C(n,p)=C(n-1,p-1)+C(n-1,p)\\).</li> </ul> <p>\u00c9crire une fonction r\u00e9cursive <code>C(n, p)</code> qui prend deux entiers en param\u00e8tres et renvoie le coefficient binomial correspondant.</p> <p>Exercice  14: le flocon de Koch</p> \u00c9nonc\u00e9Correction <p>Le flocon de Koch est une figure fractale obtenue par it\u00e9rations successives d'une m\u00eame transformation sur chacun de ses segments.</p> <p>La transformation est la suivante: chaque segment de longueur <code>l</code> donne naissance \u00e0 4 segments de longueur <code>l/3</code>, en construisant une pointe de triangle \u00e9quilat\u00e9ral sur le deuxi\u00e8me tiers du segment.</p> <p> </p> <p>Animation des premi\u00e8res \u00e9tapes:</p> <p> </p> ConsignesIndicationsTrac\u00e9 avec le module <code>turtle</code> <ol> <li>\u00c9crire une fonction r\u00e9cursive <code>segment</code> qui prend un entier <code>n</code> et un entier <code>l</code>  et qui trace le segment de longueur <code>l</code>  correspondant \u00e0 l'\u00e9tape <code>n</code>.</li> <li>\u00c9crire une fonction <code>flocon</code> qui trace le flocon entier (m\u00eames param\u00e8tres).</li> </ol> <ul> <li>Le trac\u00e9 ne se fait qu'\u00e0 l'\u00e9tape 0;</li> <li>l'\u00e9tape <code>n</code> fait 4 appels r\u00e9cursifs \u00e0 l'\u00e9tape <code>n-1</code> .</li> </ul> <p>Commencer par importer le module <code>turtle</code> et r\u00e9gler la vitesse de trac\u00e9 au maximum (et cahcer la souris):</p> <pre><code>import turtle\n\nturtle.speed('fastest')\nturtle.hideturtle()\n</code></pre> <p>On aura besoin des fonctions suivantes:</p> <ul> <li><code>turtle.forward(n)</code> : trace un segment de longueur <code>n</code> ;</li> <li><code>turtle.left(a)</code> : tourner d'un angle de <code>a</code> degr\u00e9s vers la gauche;</li> <li><code>turtle.right(a)</code> : tourner d'un angle de <code>a</code> degr\u00e9s vers la droite.</li> </ul> <p>Ajouter \u00e9ventuellement l'instruction en fin de programme (pour \u00e9viter les soucis de fermeture de fen\u00eatre):</p> <pre><code>turtle.exitonclick()\n</code></pre> <p>Pyd\u00e9fis</p> <ul> <li>Par ici la monnaie </li> <li>Le cr\u00e9pier (psycho-rigide) </li> </ul>"},{"location":"T03_Algorithmique/accueil/","title":"Th\u00e8me 3 : Algorithmique","text":""},{"location":"T03_Algorithmique/accueil/#theme-3-algorithmique","title":"Th\u00e8me 3 : Algorithmique","text":"<p>Comparatif des algorithmes de tri \u00e9tudi\u00e9s en NSI</p> Nom du tri Meilleur cas Pire cas En moyenne S\u00e9lection \\(O(n^2)\\) \\(O(n^2)\\) \\(O(n^2)\\) Insertion \\(O(n)\\) \\(O(n^2)\\) \\(O(n^2)\\) Fusion \\(O(n\\log n)\\) \\(O(n\\log n)\\) \\(O(n\\log n)\\) Rapide \\(O(n\\log n)\\) \\(O(n^2)\\) \\(O(n\\log n)\\) Timsort (Python) \\(O(n)\\) \\(O(n\\log n)\\) \\(O(n\\log n)\\) <p>Source : https://fr.wikipedia.org/wiki/Algorithme_de_tri </p> <p> </p>"},{"location":"T03_Algorithmique/T3.1_Diviser/T3.1_Diviser/","title":"T3.1 Diviser pour r\u00e9gner","text":""},{"location":"T03_Algorithmique/T3.1_Diviser/T3.1_Diviser/#t31-diviser-pour-regner","title":"T3.1 Diviser pour r\u00e9gner","text":"<p>L'image <code>gif</code> ci-dessus pr\u00e9sente  diff\u00e9rentes \u00e9tapes du d\u00e9roulement d'un algorithme de rotation d'images inspir\u00e9 d'un travail pr\u00e9sent\u00e9 par Laurent Abbal du lyc\u00e9e fran\u00e7ais de Tokyo, qui utilise l'approche diviser pour r\u00e9gner.</p> <p>L'image source repr\u00e9sente l'oeuvre Matsuri Yatai Dragon du peintre japonais Hokusai. Elle est dans le domaine public et disponible sur https://commons.wikimedia.org.</p> <p>Principe</p> <p>La m\u00e9thode diviser pour r\u00e9gner (en anglais divide and conquer) est une technique algorithmique de r\u00e9solution d'un probl\u00e8me qui consiste \u00e0 :</p> <ol> <li>d\u00e9composer le probl\u00e8me initial en (un ou) plusieurs sous-probl\u00e8mes de taille inf\u00e9rieure et ind\u00e9pendants;</li> <li>r\u00e9soudre chacun des sous-probl\u00e8mes;</li> <li>combiner (\u00e9ventuellement) les solutions des sous-probl\u00e8mes pour obtenir la solution au probl\u00e8me initial.</li> </ol> <p>La plupart du temps la r\u00e9solution des sous-probl\u00e8mes se fait de fa\u00e7on r\u00e9cursive.</p> Une impression de \u00abd\u00e9j\u00e0-vu\u00bb? <p>Nous avons d\u00e9j\u00e0 utilis\u00e9 cette technique. Par exemple:</p> <ul> <li> <p>en premi\u00e8re en \u00e9tudiant la recherche dichotomique dans une liste tri\u00e9e;  </p> </li> <li> <p>en terminale en \u00e9tudiant les algorithmes sur les arbres binaires.</p> </li> </ul> <p>Un autre exemple ? D\u00e8s le DS 0001:</p> Exponentiation rapide<pre><code>def puissance(x:float, n:int) -&gt; float :\n    if n == 0 :\n        return  1\n    else :\n        if n%2 == 0:\n            return puissance(x*x, n//2)\n        else :\n            return  x * puissance(x**2, (n-1)//2)\n</code></pre> <p>Nous allons mettre en \u0153uvre cette m\u00e9thode sur quelques probl\u00e8mes classiques...</p>"},{"location":"T03_Algorithmique/T3.1_Diviser/T3.1_Diviser/#1-le-tri-fusion","title":"1. Le tri fusion","text":"<p>Algorithme du tri fusion (merge sort)</p> PrincipeIllustration en vid\u00e9oIllustration en noticeIllustration en GIF <p>L'algorithme du tri fusion consiste \u00e0:</p> <ol> <li>couper le tableau \u00e0 trier en deux moiti\u00e9s;</li> <li>trier ind\u00e9pendammment en place chaque moiti\u00e9;</li> <li>fusionner (to merge) les deux moiti\u00e9s tri\u00e9es.</li> </ol> <p></p><p> </p><p></p> <p> </p> <p></p><p> </p><p></p> <p>Source: Gilles Lassus</p> <p>Partie I: la fusion / merge</p> <p>On veut pouvoir fusionner deux listes tri\u00e9es. Pour cela on construit une nouvelle liste, dans laquelle on ajoute successivement le minimum des plus petits \u00e9l\u00e9ments des deux listes. Il faut donc g\u00e9rer deux indices: un pour chaque liste, o\u00f9 l'indice correspond \u00e0 l'\u00e9l\u00e9ment \u00e0 comparer.</p> <pre><code>def fusion(tab1:list, tab2:list) -&gt; list:\n    tab_fusion = []\n    i1 = 0\n    i2 = 0\n    # Tant qu'il reste des \u00e9l\u00e9ments \u00e0 comparer dans les deux listes\n    while ...:\n        if tab1[i1] &lt; tab2[i2]:\n            tab_fusion.append( ...)\n            ...\n        else:\n            ...\n            ...\n\n    # Une fois qu'une des deux listes est totalement trait\u00e9e, on compl\u00e8te avec ce \n    # qu'il reste dans l'autre\n    if i1 == len(tab1):\n        while ...:\n            ...\n            ...\n    else:\n        while ...:\n            ...\n            ...        \n\n    return \n</code></pre> <p>Pouvez-vous estimer la complexit\u00e9 de cette fonction?</p> <p>Partie II: le tri / sort</p> <p>Reprenons l'algorithme du tri fusion: il faut d'abord couper le tableau en deux moiti\u00e9s. On va utiliser les deux fonctions ci-dessous dont la liste renvoy\u00e9e est \u00e0 compl\u00e9ter en compr\u00e9hension:</p> <pre><code>def moitie_gauche(tab:list) -&gt; list:\n    m = len(tab) // 2\n    return [tab[k] for k in range(...)]\n\ndef moitie_droite(tab:list):\n    m = len(tab) // 2\n    return [tab[k] for k in range(...)]\n</code></pre> <p>Maintenant \u00e9crivons la fonction <code>tri_fusion</code> \u00e0 proprement parler, qui va fusionner les deux moiti\u00e9s de la liste qui ont \u00e9t\u00e9 tri\u00e9es par fusion:</p> <pre><code>def tri_fusion(tab:list) -&gt; list:\n    if len(tab) &lt;= 1:\n        return ...\n    else:\n        tab1 = ...\n        tab2 = ...\n        return fusion(..., ...)\n</code></pre> <p>Il est \u00e0 noter que cette version du tri fusion ne trie pas en place, c'est-\u00e0-dire que la liste initiale \u00e0 trier n'est pas modifi\u00e9e et qu'une nouvelle liste, tri\u00e9e, est cr\u00e9\u00e9e par la fonction <code>tri_fusion</code>. Exactement comme le fait la fonction <code>sorted</code> de Python.</p> <pre><code>&gt;&gt;&gt; tab = [3, 4, 1, 6, 8, 7, 2]\n&gt;&gt;&gt; tri_fusion(tab)\n[1, 2, 3, 4, 6, 7, 8]\n&gt;&gt;&gt; tab\n[3, 4, 1, 6, 8, 7, 2]\n</code></pre> <p>On peut faire en sorte que le tri fusion trie en place une liste (comme la m\u00e9thode <code>sort</code> de Python), c'est-\u00e0-dire qu'aucune autre liste ne sera cr\u00e9\u00e9e, mais la liste initiale aura \u00e9t\u00e9 tri\u00e9e.</p> <p>On veut alors plut\u00f4t ce genre de comportement: </p><pre><code>&gt;&gt;&gt; tab = [3, 4, 1, 6, 8, 7, 2]\n&gt;&gt;&gt; tri_fusion(tab)\n&gt;&gt;&gt; tab\n[1, 2, 3, 4, 6, 7, 8]\n</code></pre><p></p> <p>Pour cela, on utilise le caract\u00e8re mutable d'une liste. Il faut faire en sorte de passer la liste en param\u00e8tre de la fonction <code>fusion</code> et de remplacer ses \u00e9l\u00e9ments un \u00e0 un (plut\u00f4t que de cr\u00e9er une liste vide puis de la peupler), en g\u00e9rant un indice de plus.</p> Fusion en place<pre><code>def fusion(tab, tab1, tab2):\n    i, i1, i2 = 0, 0, 0\n    while i1 &lt; len(tab1) and i2 &lt; len(tab2):\n        if tab1[i1] &lt; tab2[i2]:\n            tab[i] = tab1[i1]\n            i1 += 1\n        else:\n            tab[i] = tab2[i2]\n            i2 += 1\n        i += 1                  # indice pour tab\n    if i1 == len(tab1):\n        while i2 &lt; len(tab2):\n            tab[i] =  tab2[i2]\n            i2 += 1\n            i += 1              # indice pour tab\n    else:\n        while i1 &lt; len(tab1):\n            tab[i] = tab1[i1]\n            i1 += 1\n            i += 1              # indice pour tabt\n</code></pre> <p>La fonction <code>tri_fusion</code> se modifie alors ainsi:</p> Tri fusion en place<pre><code>def tri_fusion(tab:list):\n    if len(tab) &gt; 1:\n        tab1 = moitie_gauche(tab)\n        tab2 = moitie_droite(tab)\n        tri_fusion(tab1)\n        tri_fusion(tab2)\n        fusion(tab, tab1, tab2)\n</code></pre> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>En s'inspirant de ce qui a \u00e9t\u00e9 fait en classe de premi\u00e8re sur le tri par s\u00e9lection , mesurer le temps d'ex\u00e9cution pour plusieurs tailles de listes construites al\u00e9atoirement (ou pas, \u00e0 vous de voir) et construire un graphique pour estimer la complexit\u00e9 du tri fusion.</p>"},{"location":"T03_Algorithmique/T3.1_Diviser/T3.1_Diviser/#2-le-tri-rapide","title":"2. Le tri rapide","text":"<p>Algorithme du tri rapide (quick sort)</p> PrincipeIllustration en vid\u00e9oIllustration en notice <p>L'algorithme du tri rapide consiste \u00e0:</p> <ol> <li>choisir une valeur pivot (le premier \u00e9l\u00e9ment, le dernier, au hasard...);</li> <li>placer tous les \u00e9l\u00e9ments plus petits que le pivot avant les \u00e9l\u00e9ments qui sont plus grands que le pivot;</li> <li>trier r\u00e9cursivement chacune des deux parties.</li> </ol> <p></p><p> </p><p></p> <p> </p> <p>Partie I : le tri</p> <p>Un peu comme le tri fusion, la fonction de tri \u00e0 proprement parler n'est pas tr\u00e8s compliqu\u00e9e \u00e0 \u00e9crire: elle suit l'algorithme donn\u00e9 \u00e0 la lettre.</p> <p>Si on dispose d'une fonction <code>partition</code> qui proc\u00e8de aux \u00e9changes successifs des \u00e9l\u00e9ments de la liste entre deux indices et qui renvoie la position du pivot (qui est n\u00e9cessairement bien plac\u00e9 \u00e0 l'issue de ce partitionnement), on obtient le code suivant:</p> <pre><code>def tri_rapide(lst:list, indice_gauche:int, indice_droit:int):\n    if indice_gauche &lt; indice_droit:\n        indice_pivot = partition(lst, indice_gauche, indice_droit)\n        tri_rapide(lst, indice_gauche, indice_pivot-1)\n        tri_rapide(lst, indice_pivot+1, indice_droit)\n</code></pre> <p>Partie II: la partition</p> <p>L'\u00e9tape d\u00e9licate du tri rapide est celle qui consiste \u00e0 r\u00e9aliser le partitionnement de la liste \u00e0 trier en 3 parts:</p> <ul> <li>les \u00e9l\u00e9ments inf\u00e9rieurs au pivot;</li> <li>le pivot;</li> <li>les \u00e9l\u00e9ments sup\u00e9rieurs au pivot.</li> </ul> <p>Il faut noter qu'une fois partitionn\u00e9e, le pivot est n\u00e9cessairement \u00e0 sa position d\u00e9finitive, c'est l'int\u00e9r\u00eat de cet algorithme...</p> <p>Il existe plusieurs fa\u00e7ons de r\u00e9aliser ce partitionnement, et plusieurs fa\u00e7ons de choisir le pivot. Nous choisirons syst\u00e9matiquement le pivot en derni\u00e8re position et \u00e9changerons les valeurs inf\u00e9rieures au pivot en g\u00e9rant leur indice d'\u00e9change. Une fois toutes les valeurs de la liste parcourues (et \u00e9ventuellement \u00e9chang\u00e9es), cet indice d'insertion d\u00e9signe celui du pivot, un dernier \u00e9change interviendra.</p> <p>Compl\u00e9ter le code suivant:</p> <pre><code>def partition(lst:list, indice_gauche:int, indice_droit:int) -&gt; int:\n    '''\n    - \u00e9change les \u00e9l\u00e9ments de lst selon leur ordre par rapport au pivot\n    - place le pivot \u00e0 son indice d\u00e9finitif\n    - renvoie l'indice du pivot\n    '''\n    pivot = lst[...] # on choisit comme pivot le dernier \u00e9l\u00e9ment\n    i = ...          # i est l'indice d'\u00e9change\n    for j in range(indice_gauche, indice_droit):\n        if lst[j] &lt;= pivot:\n            echange(lst, ..., ...)\n            ...\n    #Une fois tous les \u00e9changes possibles r\u00e9alis\u00e9s, le pivot doit se trouver en\n    #position i, donc on l'\u00e9change et on renvoie cet indice\n    echange(lst, ..., ...)\n    return ...\n</code></pre> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Il manque la fonction <code>echange</code>... \u00c9crivez-la.</p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>M\u00eame question qu'\u00e0 l'exercice 1 sur le tri fusion...</p>"},{"location":"T03_Algorithmique/T3.1_Diviser/T3.1_Diviser/#3-generation-dun-labyrinthe","title":"3. G\u00e9n\u00e9ration d'un labyrinthe","text":"<p>Dans ce probl\u00e8me, on consid\u00e8rera qu'un labyrinthe est compos\u00e9 initialement d'une grille de cellules poss\u00e9dant chacune quatre murs. La cellule en haut \u00e0 gauche est de coordonn\u00e9es \\((0, 0)\\).</p> <p> </p> <p>Pour cr\u00e9er un labyrinthe \u00e0 partir de cette grille, on va utiliser la m\u00e9thode diviser pour r\u00e9gner en appliquant r\u00e9cursivement une m\u00e9thode <code>creer_labyrinthe</code> sur des sous-grilles en coupant la grille en deux puis en reliant les deux sous-labyrinthes en cr\u00e9ant un passage entre eux.</p> <p> </p> Algorithme de g\u00e9n\u00e9ration <p>Plus pr\u00e9cis\u00e9ment, voici l'algorithme \u00e0 utiliser:</p> <pre><code>creer_labyrinthe(i, j, di, dj):\n    ''' g\u00e9n\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche '''\n    Si di = 1 ou dj = 1:\n        enlever tous les murs reliant les cases situ\u00e9es sur la ligne droite entre (i, j) et (i+di\u22121, j+dj\u22121)\n    Sinon\n        Si di &gt;= dj:\n            tirer au hasard c entre 1 et di\u22121\n            appeler creer_labyrinthe(i, j, c, dj)\n            appeler creer_labyrinthe(i+c, j, di\u2212c, dj).\n        Sinon\n            tirer au hasard c entre 1 et dj\u22121\n            appeler creer_labyrinthe(i, j, di, c)\n            creer_labyrinthe(i, j+c, di, dj\u2212c).\n        Enlever un mur al\u00e9atoirement entre les deux sous-labyrinthes cr\u00e9\u00e9s.\n</code></pre> Partie 1: Mise en place <p>On mod\u00e9lise le labyrinthe \u00e0 l'aide de deux classes:</p> <ul> <li>une classe <code>Cellule</code> qui contient un unique attribut <code>murs</code> de type <code>dict</code> dont les cl\u00e9s sont <code>'N'</code>, <code>'E'</code>, <code>'S'</code> et <code>'O'</code> et dont les valeurs sont des bool\u00e9ens;</li> <li>une classe <code>Labyrinthe</code>  qui contient un unique attribut <code>grille</code> de type <code>list</code> qui contient des cellules et dont il faut compl\u00e9ter la m\u00e9thode <code>construire_grille</code>.</li> </ul> <pre><code>class Cellule:\n    def __init__(self, mur_nord, mur_est, mur_sud, mur_ouest):\n        self.murs = {'N':mur_nord, 'E':mur_est, 'S':mur_sud, 'O':mur_ouest}\n\nclass Labyrinthe:\n    def __init__(self, hauteur, largeur):\n        self.grille = self.construire_grille(hauteur, largeur)\n\n    def construire_grille(self, h, l):\n        grille = \n        return grille\n</code></pre> <p>Pour contr\u00f4ler notre travail, il faut un outil graphique pour dessiner les labyrinthes. On utilisera naturellement le module <code>pygame</code>.</p> Mod\u00e8le \u00e0 utiliser et \u00e0 compl\u00e9ter au fur et \u00e0 mesure<pre><code>import pygame\nfrom pygame.locals import *\n\n## Classes\n\n\n## Constantes\nhauteur_laby, largeur_laby, cote_cellule = 10, 10, 10\ntaille_ecran = (largeur_laby*cote_cellule, hauteur_laby*cote_cellule)\n\n## Instanciation d'un labyrinthe et g\u00e9n\u00e9ration\n\n## Initialisation de Pygame\npygame.init()\n\n## \u00c9cran\nscreen = pygame.display.set_mode(taille_ecran)\nscreen.fill([255, 255, 255])\npygame.display.set_caption(\"G\u00e9n\u00e9ration d'un labyrinthe\")\n\n## Boucle des \u00e9v\u00e9nements\n\n# affichage du labyrinthe\n\ncontinuer = True\nwhile continuer:\n    for evenement in pygame.event.get():\n        if evenement.type == pygame.QUIT:\n            continuer = False\n\n    pygame.display.flip()\n\n## Fermeture de la fen\u00eatre\npygame.quit()\n</code></pre> <p>Partie 2: Affichage</p> <p>Pour chaque cellule de la grille du labyrinthe, il faut tracer un segment pour chaque mur existant (valeur <code>True</code> pour les cl\u00e9s du dictionnaire).</p> <p> Pour passer des coordonn\u00e9es \\((i, j)\\) d'une cellule dans la grille aux coordonn\u00e9es de dessin dans la fen\u00eatre <code>pygame</code>, il faut multiplier par la longueur choisie pour le c\u00f4t\u00e9 des cellules (nomm\u00e9e <code>cote_cellule</code> dans le code pr\u00e9c\u00e9dent).</p> <p> L'indice de ligne <code>i</code> correspond aux ordonn\u00e9es de la fen\u00eatre de dessin et l'indice de colonne <code>j</code> aux abscisses...</p> <p>Par exemple pour tracer le mur nord d'une cellule de coordonn\u00e9es \\((i, j)\\) dans la grille, il faut tracer un segment entre les points de coordonn\u00e9es <code>[cote_cellule*j, cote_cellule*i]</code> et <code>[cote_cellule*(j+1), cote_cellule*i]</code>.</p> <p>Compl\u00e9ter la m\u00e9thode <code>afficher</code> (de <code>Labyrinthe</code>):</p> <pre><code>def afficher(self, c):\n    '''\n    affiche le labyrinthe, avec c qui d\u00e9signe la longueur du c\u00f4t\u00e9 d'une cellule\n    '''\n    for i in range(...):\n        for j in range(...):\n            if self.grille[i][j].murs[...]:\n                pygame.draw.line(screen, [0, 0, 0], [..., ...], [..., ...], 2)\n            ...\n</code></pre> <p>Partie 3: cr\u00e9ation d'un passage</p> <p>Il s'agit de passer les valeurs \u00e0 <code>False</code> pour les murs correspondant au passage entre deux cellules. Tout d'abord il faut rep\u00e9rer si le passage est horizontal ou vertical...</p> <p>Compl\u00e9ter la m\u00e9thode <code>creer_passsage</code> (de <code>Labyrinthe</code>) :</p> <pre><code>def creer_passage(self, i1, j1, i2, j2):\n    '''\n    cr\u00e9e une ouverture entre les cellules d'adresses (i1, j1) et (i2, j2)\n    '''\n    if ... : #ouverture horizontale\n        if ... :\n            self.grille[i1][j1].murs['E'] = False\n            self.grille[i2][j2].murs['O'] = False\n        else:\n            ...\n    else:\n        ...\n</code></pre> <p>Partie 4: cr\u00e9ation du labyrinthe</p> <p>Utiliser l'algorithme \u00e9tabli en d\u00e9but d'activit\u00e9 pour \u00e9crire la m\u00e9thode <code>creer_labyrinthe</code>.</p> <pre><code>def creer_labyrinthe(self, i, j, di, dj):\n    '''\n    g\u00e9n\u00e9r\u00e8re un labyrinthe de dimension (di, dj) \u00e0 partir de la case (i, j) en haut \u00e0 gauche.\n    '''\n</code></pre>"},{"location":"T03_Algorithmique/T3.2_ProgDyn/T3.2_ProgDyn/","title":"T3.2 Programmation dynamique","text":""},{"location":"T03_Algorithmique/T3.2_ProgDyn/T3.2_ProgDyn/#t32-programmation-dynamique","title":"T3.2 Programmation dynamique","text":"<p>On a d\u00e9j\u00e0 rencontr\u00e9 plusieurs paradigmes algorithmiques:</p> <ul> <li>l'algorithme glouton : il construit de fa\u00e7on it\u00e9rative une solution en optimisant un crit\u00e8re de mani\u00e8re locale, sans assurance de construire une solution globale optimale;</li> <li>la m\u00e9thode \u00abdiviser pour r\u00e9gner\u00bb : on divise un probl\u00e8me en sous-probl\u00e8mes ind\u00e9pendants qu'on r\u00e9sout r\u00e9cursivement, puis on combine les solutions des sous-probl\u00e8mes pour construire une solution globale.</li> </ul> <p>Mais que se passe-t-il lorsque les sous-probl\u00e8mes se chevauchent, c'est-\u00e0-dire qu'ils ne sont pas ind\u00e9pendants, comme dans le calcul (na\u00eff) des termes de la suite de Fibonacci (exercice 6 du T2.2)?</p> <p> </p> <p>Principe</p> <p>La programmation dynamique consiste \u00e0 diviser un probl\u00e8me en sous-probl\u00e8mes ind\u00e9pendants puis \u00e0 r\u00e9soudre chaque sous-probl\u00e8me du plus petit au plus grand en stockant au fur et \u00e0 mesure les r\u00e9sultats afin de ne pas avoir \u00e0 les recalculer.</p> <p>Cette technique  a \u00e9t\u00e9 d\u00e9velopp\u00e9e par Richard Bellman dans les ann\u00e9es 1950 chez RAND Corporation et permet de r\u00e9soudre de nombreux probl\u00e8mes d'optimisation de fa\u00e7on tr\u00e8s performante.</p> <p>Nous illustrerons cette technique par deux proc\u00e9d\u00e9s: la m\u00e9mo\u00efsation et la m\u00e9thode \u00abbottom-up\u00bb.</p>"},{"location":"T03_Algorithmique/T3.2_ProgDyn/T3.2_ProgDyn/#1-principe-de-memoisation","title":"1. Principe de m\u00e9mo\u00efsation","text":"<p>La m\u00e9mo\u00efsation consiste tout simplement \u00e0 stocker les valeurs d\u00e9j\u00e0 calcul\u00e9es par une fonction pour des \u00abpetits\u00bb arguments. On peut pour cela utiliser un tableau ou un dictionnaire.</p> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>fibo</code> r\u00e9cursive et m\u00e9mo\u00efs\u00e9e: on commence par consulter le dictionnaire pour savoir si la valeur est connue, auquel cas on se contente de la renvoyer, sinon on la calcule comme na\u00efvement.</p> <p>Rappel de la fonction na\u00efve: </p><pre><code>def fibo(n):\n    if n &lt; 2:\n        return 1\n    else:\n        return fibo(n-2) + fibo(n-1)\n</code></pre><p></p> Python's corner <p>En Python il existe un d\u00e9corateur qui permet de m\u00e9mo\u00efser automatiquement une fonction:</p> <pre><code>from functools import lru_cache\n\n@lru_cache()\ndef fibo(n):\n    if n &lt; 2:\n        return 1\n    else:\n        return fibo(n-2) + fibo(n-1)\n</code></pre> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>La fonction suivante donne le nombre minimal de pi\u00e8ces pour payer la somme demand\u00e9e (cf. le probl\u00e8me du rendu de monnaie):</p> <pre><code>def rendu_monnaie(somme: int, pieces: list) -&gt; int:\n    '''\n    D\u00e9termine le nombre minimal de pi\u00e8ces pour payer la somme demand\u00e9e.\n    La liste pieces est suppos\u00e9e tri\u00e9e dans l'ordre croissant.\n    '''\n    if somme == 0:\n        return 0\n    rendu = somme \n    for p in pieces:\n        if p &lt;= somme:\n            rendu = min(rendu, 1 + rendu_monnaie(somme - p, pieces))\n    return rendu\n</code></pre> <ol> <li> <p>Tester la fonction avec les appels:</p> <ul> <li><code>rendu_monnaie(12, [1, 2, 5, 10, 20, 50, 100])</code> </li> <li><code>rendu_monnaie(28, [1, 2, 5, 10, 20, 50, 100])</code> </li> <li><code>rendu_monnaie(37, [1, 2, 5, 10, 20, 50, 100])</code> </li> </ul> </li> <li> <p>M\u00e9mo\u00efser la fonction <code>rendu_monnaie</code>:</p> <ul> <li>initialiser correctement un dictionnaire <code>memo_rendu</code>;</li> <li>consulter d'abord le dictionnaire pour voir si <code>somme</code> lui appartient;</li> <li>sinon calculer la valeur <code>rendu</code> de la m\u00eame fa\u00e7on et l'ajouter au dictionnaire <code>memo_rendu</code> avant de la renvoyer.</li> </ul> </li> </ol>"},{"location":"T03_Algorithmique/T3.2_ProgDyn/T3.2_ProgDyn/#2-methode-bas-haut-bottom-up","title":"2. M\u00e9thode \u00abbas-haut\u00bb (\u00abbottom-up\u00bb)","text":"<p>Dans la m\u00e9thode \u00abbottom-up\u00bb on va construire un tableau (1D ou 2D) comme dans la m\u00e9thode de m\u00e9mo\u00efsation, mais en commen\u00e7ant par les \u00abpetits\u00bb r\u00e9sultats pour aller vers la solution globale. On peut alors (parfois) transformer un programme r\u00e9cursif en un programme it\u00e9ratif.</p> <p>Exemple avec Fibonacci</p> <pre><code>def fibo_bottom_up(n):\n    lst_fibo = [1] * (n+1)\n    for i in range(2, n+1):\n        lst_fibo[i] = lst_fibo[i-2] + lst_fibo[i-1]\n    return lst_fibo[n]\n</code></pre> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Adapter la m\u00e9thode \u00abbottom-up\u00bb pour la fonction <code>rendu_monnaie</code> pr\u00e9c\u00e9dente en compl\u00e9tant le code suivant:</p> <pre><code>def rendu_monnaie_bu(somme: int, pieces: list) -&gt; int:\n    '''\n    D\u00e9termine le nombre minimal de pi\u00e8ces pour payer la somme demand\u00e9e.\n    La liste pieces est suppos\u00e9e tri\u00e9e dans l'ordre croissant.\n    '''\n    rendu = [0] * ...\n    for s in range(1, somme+1):\n        rendu[s]\u00a0= ... # on initialise avec le nombre de pieces dans le pire des cas\n        for p in pieces:\n            if p &lt;= s:\n                rendu[s] = min(..., ...)\n    return rendu[...]\n</code></pre> <p>Exercice  4</p> \u00c9nonc\u00e9IndicationCorrection <p>Sur une grille rectangulaire, combien de chemins m\u00e8nent du coin sup\u00e9rieur gauche au coin inf\u00e9rieur droit, en se d\u00e9pla\u00e7ant uniquement le long des traits horizontaux vers la droite et le long des traits verticaux vers le bas?</p> <p> </p> <ol> <li>\u00c9crire une fonction r\u00e9cursive <code>nb_chemins_rec</code> qui r\u00e9pond au probl\u00e8me puis la \u00abm\u00e9mo\u00efser\u00bb.</li> <li>\u00c9crire une fonction it\u00e9rative <code>nb_chemins</code> selon la m\u00e9thode \u00abbottom-up\u00bb qui utilise un tableau 2D.</li> </ol> <p>On remarquera:</p> <ul> <li>qu'un d\u00e9placement uniquement vertical ou uniquement horizontal ne donne qu'un seul chemin.</li> <li>que pour arriver en bas \u00e0 droite, on ne peut arriver que de deux endroits: juste au-dessus ou juste \u00e0 gauche.</li> </ul>"},{"location":"T03_Algorithmique/T3.2_ProgDyn/T3.2_ProgDyn/#3-un-probleme-pour-finir-en-beaute","title":"3. Un probl\u00e8me pour finir en beaut\u00e9","text":"<p>Dans l'image ci-dessous, quel est la taille du plus grand carr\u00e9 blanc, c'est-\u00e0-dire qui ne contient aucun pixel noir?</p> <p> </p> Indication Sous-probl\u00e8meObservation cl\u00e9Correction <p>On d\u00e9termine la taille \\(PGCB(x, y)\\) du plus grand carr\u00e9 blanc dont le pixel en bas \u00e0 droite a pour coordonn\u00e9es \\((x, y)\\).</p> <p> </p> <p> </p>"},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/","title":"T3.3 Recherche textuelle","text":""},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/#t33-recherche-textuelle","title":"T3.3 Recherche textuelle","text":""},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/#1-recherche-naive-et-efficacite","title":"1. Recherche na\u00efve et efficacit\u00e9","text":"<p>Illustration de l'algorithme</p> <p></p> <p>Exercice  1: BNS 2024, sujet 21, exercice 1</p> \u00c9nonc\u00e9Proposition de correction <p>\u00c9crire une fonction <code>recherche_motif</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>motif</code> non vide et une cha\u00eene de caract\u00e8res <code>texte</code> et qui renvoie la liste des positions de <code>motif</code> dans <code>texte</code>. Si <code>motif</code> n\u2019appara\u00eet pas, la fonction renvoie une liste vide.</p> <p>Exemples:</p> <pre><code>&gt;&gt;&gt; recherche_motif(\"ab\", \"\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"cdcdcdcd\")\n[]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabra\")\n[0, 7]\n&gt;&gt;&gt; recherche_motif(\"ab\", \"abracadabraab\")\n[0, 7, 11]\n</code></pre> <pre><code>def recherche_motif(motif:str, texte:str) -&gt; list:\n    \"\"\"\n    Renvoie une liste, \u00e9ventuellement vide, des positions de motif dans texte.\n    \"\"\"\n    positions = []\n    i = 0\n    while i &lt;= len(texte)-len(motif):\n        j = 0\n        while j &lt; len(motif) and texte[i+j] == motif[j] :\n            j += 1\n        if j == len(motif):\n            positions.append(i)\n        i += 1\n    return positions\n\nassert recherche_motif(\"ab\", \"\") == []\nassert recherche_motif(\"ab\", \"cdcdcdcd\") == []\nassert recherche_motif(\"ab\", \"abracadabra\") == [0, 7]\nassert recherche_motif(\"ab\", \"abracadabraab\") == [0, 7, 11]\n</code></pre> <p>Exercice  2: 1 ecicrexe ,12 tejus ,4202 SNB</p> <p>Modifier la fonction pr\u00e9c\u00e9dente pour quelle effectue la recherche \u00ab\u00e0 l'envers\u00bb, c'est-\u00e0-dire en partant de la fin de <code>motif</code>.</p> <p>Illustration de l'algorithme</p> <p></p> <p>Cette fonction permet de rechercher n'importe quelle cha\u00eene de caract\u00e8res dans ... n'importe quelle cha\u00eene de caract\u00e8res. On utilise la plupart du temps (avec souvent le raccourci <code>CTRL+F</code>) cette recherche pour chercher un fragment de code (un nom de variable \u00e0 remplacer par exemple) dans un programme ou bien pour chercher une occurence d'un mot dans une page web. </p> <p>Pour mesurer l'efficacit\u00e9 de cet algorithme na\u00eff, nous allons faire une recherche dans le texte int\u00e9gral de L'Avare, de Moli\u00e8re, mis \u00e0 disposition l\u00e9galement par le Projet Gutenberg .</p> <p>Exercice  3</p> <p>Mesurer le temps d'ex\u00e9cution de la fonction <code>recherche_motif</code> sur 3 cha\u00eenes de caract\u00e8res:</p> <ul> <li>une courte, dont on est s\u00fbr.e qu'elle appara\u00eet dans le texte;</li> <li>une (plus) longue, dont on est s\u00fbr.e qu'elle appara\u00eet dans le texte (par exemple <code>'Il faut, pour me donner conseil, que je voie ma cassette.'</code>);</li> <li>une derni\u00e8re dont on est s\u00fbr.e qu'elle n'appara\u00eet pas dans le texte (par exemple <code>'Iron Man'</code>, <code>'Gouygou'</code>, <code>\"le gras c'est la vie.\"</code>, etc.).</li> </ul> <p>On peut utiliser pour cela le code suivant (\u00e0 compl\u00e9ter):</p> <pre><code>import time\n\nwith open('......') as f:\n    piece = f.read().replace('\\n', ' ') # pour obtenir une seule cha\u00eene de caract\u00e8res (certes tr\u00e8s longue)\n\ndef chrono(motif, texte):\n    t0 = time.time()\n    recherche_naive(motif, texte)\n    return time.time() - t0\n\nfor m in [...]:\n    print(chrono(..., ...))\n</code></pre>"},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/#2-algorithme-de-boyer-moore-horspool","title":"2. Algorithme de Boyer-Moore(-Horspool)","text":""},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/#21-principe","title":"2.1 Principe","text":"<p>L'id\u00e9e est d'am\u00e9liorer le code pr\u00e9c\u00e9dent (celui o\u00f9 on parcourt le motif \u00e0 l'envers) en sautant directement au prochain endroit potentiellement valide.</p> <p>Pour cela on regarde le caract\u00e8re <code>X</code> du texte sur lequel on s'est arr\u00eat\u00e9 (car <code>X</code> n'\u00e9tait pas \u00e9gal au caract\u00e8re de rang \u00e9quivalent dans le motif):</p> <ul> <li> <p>si <code>X</code> est dans le motif (sauf \u00e0 la derni\u00e8re place du motif !), on va regarder la place de la derni\u00e8re occurence de <code>X</code> dans le motif et de d\u00e9placer de ce nombre, afin de faire co\u00efncider le <code>X</code> du motif et le <code>X</code> du texte.</p> </li> <li> <p>si <code>X</code> n'est pas dans le motif, il est inutile d'avancer \"de 1\" : on retomberait tout de suite sur <code>X</code>, c'est du temps perdu. On se d\u00e9cale donc juste assez pour d\u00e9passer <code>X</code>, donc de la longueur du motif cherch\u00e9.</p> </li> </ul> <p>Illustration de l'algorithme</p> <p></p>"},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/#22-pretraitement","title":"2.2 Pr\u00e9traitement","text":"<p>Dans cet algorithme, on a donc besoin de savoir si un caract\u00e8re appartient ou non au motif, et si oui, quel est le rang de sa derni\u00e8re occurence dans le motif. On exclut le dernier caract\u00e8re du motif cependant, car sinon cela poserait un probl\u00e8me lors du d\u00e9calage (on d\u00e9calerait de 0...).</p> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>\u00c9crire une fonction <code>dico_lettres</code> qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res <code>mot</code> et qui renvoie un dictionnaire associant \u00e0 chaque caract\u00e8re de <code>mot</code> (sauf le dernier) son dernier indice dans <code>mot</code>.</p> <p>Exemple:</p> <pre><code>&gt;&gt;&gt; dico_lettres('MARGUERITE')\n{'M': 0, 'A': 1, 'R': 6, 'G': 3, 'U': 4, 'E': 5, 'I': 7, 'T': 8}\n</code></pre> <pre><code>def dico_lettres(mot):\n    dico = {}\n    for i in range(len(mot)-1):\n        dico[mot[i]] = i\n    return dico\n</code></pre>"},{"location":"T03_Algorithmique/T3.3_Texte/T3.3_RechercheTexte/#23-implementation-de-lalgorithme-de-bmh","title":"2.3 Impl\u00e9mentation de l'algorithme de BMH","text":"<p>Il s'agit maintenant de modifier la recherche na\u00efve \u00ab\u00e0 l'envers\u00bb, en avan\u00e7ant non plus l'indice de recherche <code>i</code> syst\u00e9matiquement de 1, mais du bon nombre de caract\u00e8res en fonction de l'apparition ou non du caract\u00e8re dans le motif.</p> <p>Un exemple \u00e0 la main pour commencer...</p> <p>Appliquer l'algorithme de BMH \u00e0 la main (dans un tableau) pour la recherche du motif <code>'ATGCGA'</code> dans le texte <code>'AACATATGXGATGCGAGGTCGTAGT'</code>.</p> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Compl\u00e9ter la fonction de recherche par l'algorithme de Boyer-Moore-Horspool.</p> <pre><code>def recherche_BMH(motif:str, texte:str) -&gt; list:\n    \"\"\"\n    Renvoie une liste, \u00e9ventuellement vide, des positions de motif dans texte.\n    \"\"\"\n    dico = ...\n    positions = []\n    i = 0\n    while i &lt;= len(texte)-len(motif):\n        j = len(motif) - 1\n        while j &gt;= 0 and texte[i+j] == motif[j] :\n            j -= 1\n        if j == -1:\n            positions.append(i)\n            i += ...\n        else:\n            if ... :\n                i += ...\n            else:\n                i += ...\n    return positions\n</code></pre> </li> <li> <p>Reprendre les mesures de temps d'\u00e9x\u00e9cution et comparer avec la recherche na\u00efve.</p> </li> </ol>"},{"location":"T04_BasesDonnees/accueil/","title":"Th\u00e8me 4 : Bases de donn\u00e9es","text":""},{"location":"T04_BasesDonnees/accueil/#theme-4-bases-de-donnees","title":"Th\u00e8me 4 : Bases de donn\u00e9es","text":"<p>Le d\u00e9veloppement des traitements informatiques n\u00e9cessite la manipulation de donn\u00e9es de plus en plus nombreuses. Leur organisation et leur stockage constituent un enjeu essentiel de performance. Le recours aux bases de donn\u00e9es relationnelles est aujourd\u2019hui une solution tr\u00e8s r\u00e9pandue. Ces bases de donn\u00e9es permettent d\u2019organiser, de stocker, de mettre \u00e0 jour et d\u2019interroger des donn\u00e9es structur\u00e9es volumineuses utilis\u00e9es simultan\u00e9ment par diff\u00e9rents programmes ou diff\u00e9rents utilisateurs. Cela est impossible avec les repr\u00e9sentations tabulaires \u00e9tudi\u00e9es en classe de premi\u00e8re.</p> <p> </p> <p>Des syst\u00e8mes de gestion de bases de donn\u00e9es (SGBD) de tr\u00e8s grande taille (de l\u2019ordre du p\u00e9taoctet) sont au centre de nombreux dispositifs de collecte, de stockage et de production d\u2019informations. L\u2019acc\u00e8s aux donn\u00e9es d\u2019une base de donn\u00e9es relationnelle s\u2019effectue gr\u00e2ce \u00e0 des requ\u00eates d\u2019interrogation et de mise \u00e0 jour qui peuvent par exemple \u00eatre r\u00e9dig\u00e9es dans le langage SQL (Structured Query Language). Les traitements peuvent conjuguer le recours au langage SQL et \u00e0 un langage de programmation.</p>"},{"location":"T04_BasesDonnees/prequel/","title":"Prequel","text":""},{"location":"T04_BasesDonnees/prequel/#prequel","title":"Prequel","text":"<p>Imaginons qu'on doive cr\u00e9er un jeu sur le th\u00e8me de l'univers d'\u00abHarry Potter\u00bb.</p> <p> </p> <p>Il va falloir stocker et g\u00e9rer plusieurs informations sur chacun des personnages, comme le statut (\u00e9l\u00e8ve, professeur, cr\u00e9ature...), la moyenne (pour les \u00e9l\u00e8ves),la baguette,  la maison (Gryffondor, Serdaigle, Poufsouffle, Serpentard), leur relations d'amiti\u00e9, etc.</p> <p>Sachant qu'\u00e9galement chaque maison poss\u00e8de un professeur r\u00e9f\u00e9rent , un dortoir (qui peut \u00eatre dans une tour ou au sous-sol)...</p> <p>Par exemple:</p> <ul> <li>Harry Potter est un \u00e9l\u00e8ve, a 17 de moyenne, poss\u00e8de une baguette en Houx et plume de Ph\u00e9nix, est ami avec Ron Weasley et Hermione Granger, appartient \u00e0 la maison Gryffondor qui a pour r\u00e9f\u00e9rent le professeur MacGonagall et dont le dortoir est dans une tour;</li> <li>Drago Malefoy est un \u00e9l\u00e8ve, a 13 de moyenne, poss\u00e8de une baguette en Aub\u00e9pine et crin de licorne, est ami avec Vincent Crabbe et Gregory Goyle, appartient \u00e0 la maison Serpentard qui a pour r\u00e9f\u00e9rent le professeur Rogue et dont le dortoir est dans un sous-sol;</li> <li>Albus Dumbledore est un professeur, poss\u00e8de la baguette de Sureau, est affili\u00e9 \u00e0 la maison Gryffondor...</li> </ul> <p>Probl\u00e9matique</p> <ol> <li>Comment stocker et repr\u00e9senter l'ensemble des personnages ainsi que les informations qui leurs sont associ\u00e9es?</li> <li>Comment r\u00e9cup\u00e9rer les membres d'une maison? les personnages dont la baguette est en Bois de vigne? amis avec Neville Londubat?</li> </ol>"},{"location":"T04_BasesDonnees/Exercices/Exercices/","title":"Exercices interactifs","text":""},{"location":"T04_BasesDonnees/Exercices/Exercices/#exercices-interactifs","title":"Exercices interactifs","text":"<p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>Questions interactives \u00e0 r\u00e9aliser sur le site sqlzoo.net.</p> <ol> <li> <p>Travail sur SELECT, (base de donn\u00e9es Nobel) : ici.</p> </li> <li> <p>Travail sur SUM et COUNT, (base de donn\u00e9es World) : ici. (jusqu'\u00e0 la question 5.)</p> </li> <li> <p>Travail sur JOIN, (base de donn\u00e9es Euro2012) : ici.</p> </li> </ol> <p>\u00c0 consulter ici : https://github.com/jisaw/sqlzoo-solutions.</p> <p>Exercice  2</p> <p>Gestion d'un r\u00e9seau d'agences de location de voitures.  D'apr\u00e8s le travail de J. Le Coupanec (Acad\u00e9mie de Rennes)</p> <p>La base de donn\u00e9es locations.db contient les tables <code>Agences</code>,<code>Locations</code>, <code>Vehicules</code>. </p> Questions sur la relation <code>Agences</code> <p>Q1. Visualisez toute la relation <code>Agences</code></p> Correction <pre><code>SELECT * \nFROM Agences\n</code></pre> <p>Q2. Listez uniquement les noms des agences et de leur ville.</p> Correction <pre><code>SELECT nom, ville \nFROM Agences\n</code></pre> <p>Q3. Listez les noms des agences de la ville de Lorient</p> Correction <pre><code>SELECT nom \nFROM Agences\nWHERE ville = 'Lorient'\n</code></pre> <p>Q4. Listez les noms des agences du d\u00e9partement du Morbihan (code postal 56***) ainsi que les codes postaux en utilisant par exemple un <code>WHERE LIKE</code>.</p> Correction <pre><code>SELECT nom, code \nFROM Agences\nWHERE code LIKE '56%'\n</code></pre> Questions sur la relation <code>Vehicules</code> <p>Q5. D\u00e9terminez le nombre de voitures que vous poss\u00e9dez. </p> Correction <pre><code>SELECT COUNT(*) \nFROM Vehicules\n</code></pre> <p>Q6. D\u00e9terminez l'\u00e2ge minimum et maximum de vos v\u00e9hicules.</p> Correction <pre><code>SELECT MAX(age), MIN(age) \nFROM Vehicules\n</code></pre> <p>Q7. Quels sont la marque et le mod\u00e8le de votre derni\u00e8re acquisition qui date de trois mois ?</p> Correction <pre><code>SELECT nom \nFROM Vehicules\nWHERE age = 3\n</code></pre> <p>Q8.  Quel est le kilom\u00e9trage maximum des v\u00e9hicules ?</p> Correction <pre><code>SELECT MAX(kilometrage) \nFROM Vehicules\n</code></pre> <p>Q9.  Quel est le kilom\u00e9trage moyen des v\u00e9hicules ?</p> Correction <pre><code>SELECT AVG(kilometrage) \nFROM Vehicules\n</code></pre> <p>Q10. Afficher toute la flotte de v\u00e9hicules par ordre d\u00e9croissant de kilom\u00e9trage.</p> Correction <pre><code>SELECT * \nFROM Vehicules\nORDER BY kilometrage DESC\n</code></pre> Questions sur la relation <code>Locations</code> <p>Q11. Visualisez toute la relation Locations. </p> Correction <pre><code>SELECT * \nFROM Locations\n</code></pre> <p>Q12. D\u00e9terminez le nombre de locations effectu\u00e9es avec changement d'agence</p> Correction <pre><code>SELECT COUNT(*) \nFROM Locations\nWHERE depart != retour\n</code></pre> <p>Q13. D\u00e9terminez le nombre total de kilom\u00e8tres effectu\u00e9s durant les locations</p> Correction <pre><code>SELECT SUM(kilometrage) \nFROM Locations\n</code></pre> <p>Q14. Listez toutes les locations en y associant les caract\u00e9ristiques du v\u00e9hicule</p> Correction <pre><code>SELECT * \nFROM Locations\nJOIN Vehicules ON Locations.vehicule = Vehicules.immatriculation\n</code></pre> <p>Q15. Affichez le nom et l'immatriculation du v\u00e9hicule ainsi que la date de la location et le kilom\u00e9trage r\u00e9alis\u00e9 pour chacune des locations</p> Correction <pre><code>SELECT Vehicules.nom, Vehicules.immatriculation, Locations.date, Locations.kilometrage \nFROM Locations\nJOIN Vehicules ON Locations.vehicule = Vehicules.immatriculation\n</code></pre> <p>Q16. Affichez une seule fois le nom et l'immatriculation des v\u00e9hicules ayant d\u00e9j\u00e0 \u00e9t\u00e9 lou\u00e9s.</p> Correction <pre><code>SELECT DISTINCT nom, immatriculation \nFROM Locations\nJOIN Vehicules ON Locations.vehicule = Vehicules.immatriculation\n</code></pre> <p>Q17. Affichez les locations du v\u00e9hicule immatricul\u00e9 AB-224-BA en pr\u00e9cisant le nom de l'agence de d\u00e9part ainsi que la ville de d\u00e9part dans l'ordre chronologique des locations.</p> Correction <pre><code>SELECT Agences.nom, Agences.ville, Locations.* \nFROM Locations\nJOIN Agences ON Locations.depart = Agences.id\nWHERE vehicule = 'AB-224-BA'\nORDER BY Locations.date\n</code></pre> <p>Exercice  3 : The SQL Murder Mystery </p> <p>Cet exercice en ligne est propos\u00e9 par le Knight Lab de l'universit\u00e9 am\u00e9ricaine Northwerstern University.</p> <p></p> <p>Le point de d\u00e9part de l'histoire : un meurtre a \u00e9t\u00e9 commis dans la ville de SQL City le 15 janvier 2018.</p> <p>\u00c0 partir de ce point de d\u00e9part et d'une base de donn\u00e9es dont le diagramme est donn\u00e9 ci-dessous, il s'agit de trouver le meurtrier.</p> <p></p> <p>Rendez-vous sur cette page, et bonne enqu\u00eate \u00e0 coups de requ\u00eates !</p> <p>Vous pouvez travailler en ligne ou bien dans votre SGBD pr\u00e9f\u00e9r\u00e9, avec la base sql-murder-mystery.db. Attention pour valider votre r\u00e9ponse, il faudra vous rendre en bas de la page officielle.</p>"},{"location":"T04_BasesDonnees/Exercices/Exo1_22MEJ2/","title":"Exercice BAC 1 : Base de donn\u00e9es musicale","text":""},{"location":"T04_BasesDonnees/Exercices/Exo1_22MEJ2/#exercice-bac-1-base-de-donnees-musicale","title":"Exercice BAC 1 : Base de donn\u00e9es musicale","text":"<p>D'apr\u00e8s 2022, M\u00e9tropole, J2, Ex. 4</p> <p>On pourra utiliser les mots cl\u00e9s SQL suivants : <code>SELECT, FROM, WHERE, JOIN, ON, INSERT, INTO, VALUES, UPDATE, SET, AND</code>. </p> <p>La clause <code>ORDER BY</code> suivie d'un attribut permet de trier les r\u00e9sultats par ordre croissant de l'attribut. L'instruction <code>COUNT(*)</code> renvoie le nombre de lignes d'une requ\u00eate.</p> <p>Un musicien souhaite cr\u00e9er une base de donn\u00e9es relationnelle contenant ses morceaux et interpr\u00e8tes pr\u00e9f\u00e9r\u00e9s. Pour cela il utilise le langage SQL.</p> <p>Il cr\u00e9e une table <code>morceaux</code> qui contient entre autres attributs les titres des morceaux et leur ann\u00e9e de sortie :</p> <code>id_morceau</code> <code>titre</code> <code>annee</code> <code>id_interprete</code> 1 Like a Rolling Stone 1965 1 2 Respect 1967 2 3 Imagine 1970 3 4 Hey Jude 1968 4 5 Smells Like Teen Spirit 1991 5 6 I Want To hold Your Hand 1963 4 <p>Il cr\u00e9e la table <code>interpretes</code> qui contient les interpr\u00e8tes et leur pays d'origine :</p> <code>id_interprete</code> <code>nom</code> <code>pays</code> 1 Bob Dylan \u00c9tats-Unis 2 Aretha Franklin \u00c9tats-Unis 3 John Lennon Angleterre 4 The Beatles Angleterre 5 Nirvana \u00c9tats-Unis <p><code>id_morceau</code> de la table <code>morceaux</code> et <code>id_interprete</code> de la table <code>interpretes</code> sont des cl\u00e9s primaires.</p> <p>L'attribut <code>id_interprete</code> de la table <code>morceaux</code> fait directement r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire de la table <code>interpretes</code>.</p> <p>1.a. \u00c9crire le r\u00e9sultat de la requ\u00eate suivante :</p> <pre><code>SELECT titre\n    FROM morceaux\n    WHERE id_interprete = 4;\n</code></pre> <p>1.b. \u00c9crire une requ\u00eate permettant d'afficher les noms des interpr\u00e8tes originaires d'Angleterre.</p> <p>1.c. \u00c9crire le r\u00e9sultat de la requ\u00eate suivante :</p> <pre><code>SELECT titre, annee\n    FROM morceaux\n    ORDER BY annee;\n</code></pre> <p>1.d. \u00c9crire une requ\u00eate permettant de calculer le nombre de morceaux dans la table <code>morceaux</code>.</p> <p>1.e. \u00c9crire une requ\u00eate affichant les titres des morceaux par ordre alphab\u00e9tique.</p> <p>2.a. Citer, en justifiant, la cl\u00e9 \u00e9trang\u00e8re de la table <code>morceaux</code>.</p> <p>2.b. \u00c9crire un sch\u00e9ma relationnel des tables <code>interpretes</code> et <code>morceaux</code>.</p> <p>2.c. Expliquer pourquoi la requ\u00eate suivante produit une erreur :</p> <pre><code>INSERT INTO interpretes\n    VALUES (1, 'Trust', 'France');\n</code></pre> <p>3.a. Une erreur de saisie a \u00e9t\u00e9 faite. \u00c9crire une requ\u00eate SQL permettant de changer l'ann\u00e9e du titre \u00ab Imagine \u00bb en 1971.</p> <p>3.b. \u00c9crire une requ\u00eate SQL permettant d'ajouter l'interpr\u00e8te \u00ab The Who \u00bb venant d'Angleterre \u00e0 la table <code>interpretes</code>. On lui donnera un <code>id_interprete</code> \u00e9gal \u00e0 6.</p> <p>3.c. \u00c9crire une requ\u00eate SQL permettant d'ajouter le titre \u00ab My Generation \u00bb de \u00ab The Who \u00bb \u00e0 la table <code>morceaux</code>. Ce titre est sorti en 1965 et on lui donnera un <code>id_morceau</code> de 7 ainsi que l'<code>id_interprete</code> qui conviendra.</p> <p>4. \u00c9crire une requ\u00eate permettant de lister les titres des interpr\u00e8tes venant des \u00c9tats-Unis.</p> Proposition de correction <p>1.a. On obtient les titres <code>'Hey Jude'</code> et <code>'I Want To hold Your Hand'</code>.</p> <p>1.b. <code>SELECT nom FROM interpretes WHERE pays = 'Angleterre';</code> </p> <p>1.c. On obtient :</p> <code>titre</code> <code>annee</code> I Want To hold Your Hand 1963 Like a Rolling Stone 1965 Respect 1967 Hey Jude 1968 Imagine 1970 Smells Like Teen Spirit 1991 <p>1.d. <code>SELECT COUNT(*) FROM morceaux;</code> </p> <p>1.e. <code>SELECT titre FROM morceaux ORDER BY titre ASC;</code> </p> <p>2.a. La cl\u00e9 \u00e9trang\u00e8re est <code>id_interprete</code> qui fait r\u00e9f\u00e9rence \u00e0 la cl\u00e9 primaire  de la table <code>interpretes</code>.</p> <p>2.b. Sch\u00e9ma des deux relations:</p> <ul> <li>interpretes(id_interprete : INT, nom : TEXT, pays : TEXT)</li> <li>morceaux(id_morceau : INT, titre : TEXT, annee : INT, #id_interprete : INT)</li> </ul> <p>2.c. Cette requ\u00eate provoque une erreur, car elle essaye d\u2019ajouter \u00e0 la table interpretes une entr\u00e9e ayant pour <code>id_interprete</code> 1. Or, l\u2019attribut <code>id_interprete</code> (qui est une cl\u00e9 primaire) a d\u00e9j\u00e0 une entr\u00e9e avec la valeur 1 (la cl\u00e9 primaire    doit \u00eatre unique).</p> <p>3.a. <code>UPDATE morceaux SET annee = 1971 WHERE titre = 'Imagine';</code> </p> <p>3.b. <code>INSERT INTO interpretes VALUES (6, 'The Who', 'Angleterre');</code> </p> <p>3.c. <code>INSERT INTO morceaux VALUES (7, 'My Generation', 1965, 6);</code> </p> <p>4.</p> <pre><code>SELECT morceaux.titre FROM morceaux\nJOIN interpretes ON morceaux.id_interprete = interpretes.id_interprete\nWHERE interpretes.pays = '\u00c9tats-Unis';\n</code></pre>"},{"location":"T04_BasesDonnees/Exercices/Exo2_22CEJ1/","title":"Exercice BAC 2: Mesures du r\u00e9chauffement climatique","text":""},{"location":"T04_BasesDonnees/Exercices/Exo2_22CEJ1/#exercice-bac-2-mesures-du-rechauffement-climatique","title":"Exercice BAC 2: Mesures du r\u00e9chauffement climatique","text":"<p>Dans le cadre d'une \u00e9tude sur le r\u00e9chauffement climatique, un centre m\u00e9t\u00e9orologique rassemble des donn\u00e9es. On consid\u00e8re que la base de donn\u00e9es contient deux relations (tables). La relation <code>Centres</code> qui contient l'identifiant des centres m\u00e9t\u00e9orologiques, la ville, la latitude, la longitude et l'altitude du centre. La relation <code>Mesures</code> qui contient l'identifiant de la mesure, l'identifiant du centre, la date de la mesure, la temp\u00e9rature, la pression et la pluviom\u00e9trie mesur\u00e9es.</p> <p>Le sch\u00e9ma relationnel de la relation <code>Centres</code> est le suivant :</p> <p><code>Centres(id_centre: INT, nom_ville: VARCHAR, latitude: FLOAT, longitude: FLOAT, altitude: FLOAT)</code></p> <p>Le sch\u00e9ma relationnel de la relation <code>Mesures</code> est le suivant :</p> <p><code>Mesures(id_mesure: INT, id_centre: INT, date_mesure: DATE, temperature: FLOAT, pression: INT, pluviometrie: INT)</code></p> <p>On fournit ci-dessous le contenu des deux relations.</p> <p>Relation <code>Centres</code></p> <code>id_centre</code> <code>nom_ville</code> <code>latitude</code> <code>longitude</code> <code>altitude</code> 213 Amiens 49.894 2.293 60 138 Grenoble 45.185 5.723 550 263 Brest 48.388 -4.49 52 185 Tignes 45.469 6.909 2594 459 Nice 43.706 7.262 260 126 Le Puy-en-Velay 45.042 3.888 744 317 G\u00e9rardmer 48.073 6.879 855 <p>Relation <code>Mesures</code></p> <code>id_mesure</code> <code>id_centre</code> <code>date_mesure</code> <code>temperature</code> <code>pression</code> <code>pluviometrie</code> 1566 138 2021-10-29 8.0 1015 3 1568 213 2021-10-29 15.1 1011 0 2174 126 2021-10-30 18.2 1023 0 2200 185 2021-10-30 5.6 989 20 2232 459 2021-10-31 25.0 1035 0 2514 213 2021-10-31 17.4 1020 0 2563 126 2021-11-01 10.1 1005 15 2592 459 2021-11-01 23.3 1028 2 3425 317 2021-11-02 9.0 1012 13 3430 138 2021-11-02 7.5 996 16 3611 263 2021-11-03 13.9 1005 8 3625 126 2021-11-03 10.8 1008 8 <p>1.a. Proposer une cl\u00e9 primaire pour la relation <code>Mesures</code>. Justifier votre choix.</p> <p>1.b. Avec quel attribut peut-on faire une jointure entre la relation <code>Centres</code> et la relation <code>Mesures</code> ?</p> <p>2.a. Qu'affiche la requ\u00eate suivante ?</p> <pre><code>SELECT * FROM Centres WHERE altitude &gt; 500;\n</code></pre> <p>2.b. On souhaite r\u00e9cup\u00e9rer le nom de la ville des centres m\u00e9t\u00e9orologiques situ\u00e9s \u00e0 une altitude comprise entre 700 m et 1200 m. \u00c9crire la requ\u00eate SQL correspondante.</p> <p>2.c. On souhaite r\u00e9cup\u00e9rer la liste des longitudes et des noms des villes des centres m\u00e9t\u00e9orologiques dont la longitude est sup\u00e9rieure \u00e0 5. La liste devra \u00eatre tri\u00e9e par ordre alphab\u00e9tique des noms de ville. \u00c9crire la requ\u00eate SQL correspondante.</p> <p>3.a. Qu'affiche la requ\u00eate suivante ?</p> <pre><code>SELECT * FROM Mesures WHERE date_mesure = \"2021-10-30\";\n</code></pre> <p>3.b. \u00c9crire une requ\u00eate SQL permettant d'ajouter une mesure prise le 8 novembre 2021 dans le centre num\u00e9ro 138, o\u00f9 la temp\u00e9rature \u00e9tait de 11 \u00b0C, la pression de 1013 hPa et la pluviom\u00e9trie de 0 mm. La donn\u00e9e dont l'attribut est <code>id_mesure</code> aura pour valeur 3650.</p> <p>4.a. Expliquer ce que renvoie la requ\u00eate SQL suivante.</p> <pre><code>SELECT * FROM Centres WHERE latitude = (SELECT MIN(latitude) FROM Centres);\n</code></pre> <p>4.b. \u00c9crire une requ\u00eate SQL donnant la liste des villes dans lesquelles on a enregistr\u00e9 une temp\u00e9rature inf\u00e9rieure \u00e0 10 \u00b0C en octobre 2021. On utilisera le mot cl\u00e9 <code>DISTINCT</code> afin d'\u00e9viter d'avoir des doublons. On rappelle que l'on peut utiliser les op\u00e9rateurs de comparaison avec les dates.</p>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/","title":"T4.1 Mod\u00e8le relationnel","text":""},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#t41-modele-relationnel","title":"T4.1 Mod\u00e8le relationnel","text":"<p>En classe de premi\u00e8re nous avons commenc\u00e9 \u00e0 appr\u00e9hender les tables de donn\u00e9es , sous forme (plate) d'une liste de dictionnaires.</p> <p>Nous avons \u00e9galement vu que la manipulation de ces donn\u00e9es ainsi structur\u00e9es n'est pas toujours pratique. Aujourd'hui, on doit stocker et manipuler rapidement des donn\u00e9es de tailles gigantesques et il faut donc adopter un mod\u00e8le plus efficace  : le mod\u00e8le relationnel.</p> <p></p> <p>Histoire de l'informatique</p> <p>Th\u00e9oris\u00e9 en 1970 par le Britannique Edgar F. Codd, le mod\u00e8le relationnel est \u00e0 ce jour le mod\u00e8le de base de donn\u00e9es le plus utilis\u00e9, m\u00eame si l'\u00e8re actuelle du Big Data tend \u00e0 mettre en avant d'autres mod\u00e8les non relationnels.</p>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#411-le-modele-relationnel","title":"4.1.1 Le mod\u00e8le relationnel","text":"<p>Exemple-type: la base de donn\u00e9e \u00abBiblioth\u00e8que\u00bb</p> <p>Pour illustrer ce chapitre, on s'int\u00e9ressera \u00e0 l'exemple classique de la gestion des emprunts dans une biblioth\u00e8que. Ce syst\u00e8me d'information - syst\u00e8me technique (informatique) permettant de g\u00e9rer de l'information - contient plusieurs cat\u00e9gories d'\u00abobjets\u00bb:</p> <ul> <li>des livres: par exemple \u00abAlgorithmes, notions de base\u00bb, Thomas H. Cormen, Dunod, 2013, 978-2-10-070151-3</li> <li>des usagers: Alice Martin, amartin@protonmail.fr, n\u00b0 abonn\u00e9 125</li> <li>des emprunts: \u00abAlgorithmes, notions de base\u00bb, Alice Martin, 14/11/2022</li> </ul> <p>Vocabulaire</p> <p>Dans le mod\u00e8le relationnel, on d\u00e9crit chaque objet - appel\u00e9 plut\u00f4t entit\u00e9 ou enregistrement - de chaque cat\u00e9gorie - appel\u00e9e relation - par un n-uplet de valeurs (qui peuvent \u00eatre des chaines de caract\u00e8res, des nombres, etc.) associ\u00e9es \u00e0 des attributs.</p> <p>Une relation est donc un ensemble de n-uplets dont les valeurs appartiennent aux domaines des attributs, qu'on repr\u00e9sente sous forme de table (on confond parfois les termes de table et de relation).</p> <p>Le cardinal d'une relation R est le nombre d'\u00e9l\u00e9ments (ou enregistrements ou entit\u00e9s) qu'elle contient.  On le note #R.</p> <p>Dans l'exemple-type, on a donc trois relations. Dans la premi\u00e8re relation, les \u00ablivres\u00bb, on d\u00e9crit une entit\u00e9 par 5 attributs:</p> <ul> <li>le titre, domaine : <code>String</code></li> <li>l'auteur (ou les auteurs), domaine : <code>String</code></li> <li>l'\u00e9diteur, domaine : <code>String</code></li> <li>l'ann\u00e9e de parution, domaine : <code>Int</code></li> <li>l'ISBN, domaine : <code>String</code></li> </ul> Domaines <p>Les domaines sont des ensembles de valeurs que peut prendre une donn\u00e9e (comme les types en Python): chaines de caract\u00e8res, entiers, flottants, bool\u00e9ens, dates, temps...</p> <p>Table/relation \u00abLivres\u00bb</p> <p> </p> <p>Dans cette table, <code>('Histoire des codes secrets', 'Simon Singh', 'Le livre de poche', 1999, '978-2-253-15097-8')</code> est un \u00e9l\u00e9ment/enregistrement/entit\u00e9 de la relation sous forme d'un n-uplet.</p> <p>Sch\u00e9ma d'une relation / sch\u00e9ma relationnel</p> <ul> <li> <p>On appelle sch\u00e9ma d'une relation l'ensemble ordonn\u00e9 de ses attributs sous la forme : nom <code>domaine</code>.</p> <p>Exemple:</p> <p>Livres (titre <code>String</code>, auteur <code>String</code>, \u00e9diteur <code>String</code>, ann\u00e9e <code>Int</code>, ISBN <code>String</code>)</p> </li> <li> <p>Lorsqu'une base de donn\u00e9es contient plusieurs relations, l'ensemble des sch\u00e9mas des relations constitue le sch\u00e9ma relationnel de la base de donn\u00e9es.</p> </li> </ul> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>\u00c9crire ce que pourraient \u00eatre les sch\u00e9mas des relations Usagers et Emprunts de la base de donn\u00e9es \u00abBiblioth\u00e8que\u00bb.</p> <p>Usagers (nom <code>String</code>, prenom <code>String</code>, mail <code>String</code>, id_usager <code>Int</code>)</p> <p>Emprunts (ISBN <code>String</code>, id_usager <code>Int</code>, retour <code>Date</code>)</p> <p>Mod\u00e9lisation et contraintes d'une base de donn\u00e9es</p> <p>Mod\u00e9liser des donn\u00e9es avec pour but de construire une base de donn\u00e9es se fait en plusieurs \u00e9tapes:</p> <ol> <li>D\u00e9terminer les entit\u00e9s que l'on souhaite manipuler;</li> <li>Regrouper les entit\u00e9s en relations/tables en choisissant les domaines ad\u00e9quats pour les attributs;</li> <li>D\u00e9finir les contraintes (d'int\u00e9grit\u00e9) de la base de donn\u00e9es, c'est-\u00e0-dire les r\u00e8gles qui assurent la coh\u00e9rence logique des donn\u00e9es.</li> </ol>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#412-cles-primaires-et-etrangeres","title":"4.1.2 Cl\u00e9s primaires et \u00e9trang\u00e8res","text":"<p>Cl\u00e9 primaire</p> <p>Une des premi\u00e8res contraintes dont il faut s'occuper, c'est la contrainte de relation: les donn\u00e9es doivent pouvoir \u00eatre identifi\u00e9es de mani\u00e8re unique.</p> <p>Pour cela, chaque relation doit poss\u00e9der un attribut (ou parfois un ensemble d'attributs) dont la valeur va permettre d'identifier chaque entit\u00e9 de mani\u00e8re unique. On l'appelle cl\u00e9 primaire de la relation, et on la souligne dans le sch\u00e9ma de la relation.</p> <p>Si lors de la mod\u00e9lisation on ne dispose pas d'attribut pouvant servir de cl\u00e9 primaire, on cr\u00e9e la plupart du temps une valeur num\u00e9rique servant de cl\u00e9 primaire: un num\u00e9ro d'identifiant.</p> Sch\u00e9ma de la relation \u00abLivres\u00bb <p>Le seul attribut de cette relation pouvant servir de cl\u00e9 primaire est l'ISBN  (c'est d'ailleurs sa raison d'\u00eatre...)</p> <p>On \u00e9crit donc le sch\u00e9ma en soulignant la cl\u00e9 primaire:</p> <p>Livres (titre <code>String</code>, auteur <code>String</code>, \u00e9diteur <code>String</code>, ann\u00e9e <code>Int</code>, ISBN <code>String</code>)</p> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Quelles sont les cl\u00e9s primaires des relations Usagers et Emprunts ?</p> <p>La cl\u00e9 primaire de la relation Usagers est l'attribut id_usager et celle de la relation Emprunts est ISBN.</p> <p>Les cl\u00e9s primaires servent \u00e9galement \u00e0 cr\u00e9er des r\u00e9f\u00e9rences entre diff\u00e9rentes tables. Par exemple, l'utilisation d'un attribut \u00abnom\u00bb dans la relation Emprunts peut causer une erreur ou anomalie dans la base de donn\u00e9es si deux personnes homonymes figurent dans la relation Usagers. Il est donc pr\u00e9f\u00e9rable d'utiliser la cl\u00e9 primaire de la table Usagers pour identifier l'emprunteur dans la relation Emprunts.</p> <p>Cl\u00e9 \u00e9trang\u00e8re</p> <p>Une cl\u00e9 \u00e9trang\u00e8re d'une relation est un attribut qui sert \u00e0 caract\u00e9riser une entit\u00e9 et qui est une cl\u00e9 primaire dans une relation li\u00e9e.</p> <p>Dans le sch\u00e9ma d'une relation, on indique les cl\u00e9s \u00e9trang\u00e8res en les soulignant en pointill\u00e9s ou pr\u00e9c\u00e9d\u00e9es d'un <code>#</code>.</p> <p>Les cl\u00e9s \u00e9trang\u00e8res servent \u00e0 v\u00e9rifier les contraintes d'int\u00e9grit\u00e9 r\u00e9f\u00e9rentielles.</p> Exemple <p>Une cl\u00e9 \u00e9trang\u00e8re peut \u00eatre \u00e9galement cl\u00e9 primaire.</p> <p>Emprunts (#ISBN <code>String</code>, #id_usager <code>Int</code>, retour <code>Date</code>)</p>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#413-normalisation-des-bases-de-donnees-redondance-et-atomicite-des-donnees","title":"4.1.3 Normalisation des bases de donn\u00e9es : redondance et atomicit\u00e9 des donn\u00e9es","text":"<p>Outre les contraintes d'int\u00e9grit\u00e9, on souhaite respecter certains principes pour \u00e9viter les anomalies dans une base de donn\u00e9es: on parle de normalisation de la base. Parmi ces principes, il faut s'assurer de la non-redondance des donn\u00e9es (les donn\u00e9es ne doivent pas appara\u00eetre plusieurs fois) et de l'atomicit\u00e9 des donn\u00e9es (les donn\u00e9es doivent \u00eatre ins\u00e9cables, pas de listes par exemple).</p>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#exemple-de-redondance-des-donnees","title":"Exemple de redondance des donn\u00e9es","text":"<p>Consid\u00e9rons une autre conception de la relation Emprunts:</p> id_usager date_retour Nom Pr\u00e9nom titre auteur ISBN 845 27/11/2022 DURAND Bob Histoire des codes secrets Simon Singh 978-2-253-15097-8 125 03/12/2022 MARTIN Alice La disparition Georges Perec 978-2-07-071523-7 125 03/12/2022 MARTIN Alice La loi des s\u00e9ries Manu Larcenet 978-2-85-815217-9 <p>En quoi cette relation contredit le principe de non-redondance des donn\u00e9es?</p>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#atomicite-des-donnees","title":"Atomicit\u00e9 des donn\u00e9es","text":"<p>Comme on l'a vu en introduction, il est plut\u00f4t compliqu\u00e9 de devoir faire des recherches dans des donn\u00e9es compos\u00e9es (comme des listes par exemple). Si l'on veut faire une requ\u00eate dans notre base de donn\u00e9es sur les ouvrages \u00e9crits par J.K. Rowling par exemple, on constate que dans la relation Livres appara\u00eet un livre comportant plusieurs auteurs, dont J.K. Rowling. Pour am\u00e9liorer les performances de la base de donn\u00e9es, il faut \u00e9viter cela : on parle d'atomicit\u00e9 des donn\u00e9es.</p> <p>Pour y rem\u00e9dier, on va simplifier la relation Livres en supprimant les auteurs:</p> titre \u00e9diteur ann\u00e9e ISBN Algorithmes, notions de base Dunod 2013 978-2-10-070151-3 Harry Potter \u00e0 l\u2019\u00e9cole des sorciers, version illustr\u00e9e Gallimard Jeunesse 2015 978-2-07-066907-3 Harry Potter et la coupe de feu Gallimard Jeunesse 2017 978-2-07-058520-4 Histoire des codes secrets Le livre de Poche 1999 978-2-253-15097-8 La disparition Gallimard 1989 978-2-07-071523-7 La loi des s\u00e9ries Dargaud 1999 978-2-85-815217-9 <p>Puis construire une relation Auteurs et une relation Auteur_de qui relie les auteurs \u00e0 leurs ouvrages.</p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Proposer un sch\u00e9ma de chacune de ces relations, puis construire les tables.</p> <p>Auteurs(id_auteur <code>Int</code>, nom <code>String</code>, pr\u00e9nom <code>String</code>)</p> id_auteur nom pr\u00e9nom 1 Cormen Thomas H. 2 Rowling J.K. 3 Kay Jim 4 Singh Simon 5 P\u00e9rec Georges 6 Larcenet Manu <p>Auteur_de(#id_auteur <code>Int</code>, #ISBN <code>String</code>)</p> id_auteur ISBN 1 978-2-10-070151-3 2 978-2-07-066907-3 2 978-2-07-058520-4 3 978-2-07-066907-3 4 978-2-253-15097-8 5 978-2-07-071523-7 6 978-2-85-815217-9"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#414-contraintes-dintegrite","title":"4.1.4 Contraintes d'int\u00e9grit\u00e9","text":"<p>Pour terminer, r\u00e9capitulons les diff\u00e9rentes contraintes d'int\u00e9grit\u00e9, c'est-\u00e0-dire les r\u00e8gles qui assurent la coh\u00e9rence des donn\u00e9es au sein de la base de donn\u00e9es.</p> <ul> <li>Contrainte de relation: chaque entit\u00e9 est identifi\u00e9e de mani\u00e8re unique, \u00e0 l'aide d'une cl\u00e9 primaire.</li> <li>Contrainte de domaine: les valeurs d'un attribut sont restreintes \u00e0 un domaine, ce qui \u00e9vite qu'on puisse donner une valeur ill\u00e9gale.</li> <li> <p>Contrainte de r\u00e9f\u00e9rence: dans deux relations associ\u00e9es, la cl\u00e9 \u00e9trang\u00e8re permet de garantir l'existence d'une entit\u00e9 dans la relation primaire. En particulier:</p> <ul> <li>une cl\u00e9 \u00e9trang\u00e8re est imp\u00e9rativement une cl\u00e9 primaire dans la relation \u00e0 laquelle elle se r\u00e9f\u00e8re;</li> <li>une entit\u00e9 de la relation primaire ne peut pas \u00eatre supprim\u00e9e si elle poss\u00e8de des entit\u00e9s li\u00e9es;</li> <li>si des entit\u00e9s sont li\u00e9s, la cl\u00e9 primaire ne peut pas \u00eatre chang\u00e9e .</li> </ul> </li> </ul>"},{"location":"T04_BasesDonnees/T4.1_ModeleRel/T4.1_ModeleRel/#415-exercices","title":"4.1.5 Exercices","text":"<p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>Deux relations mod\u00e9lisent la flotte de voitures d'un r\u00e9seau de location de voitures.</p> <p>Agences</p> id_agence Ville D\u00e9partement 1 Poitiers 86 2 La Rochelle 17 3 Angoul\u00eame 16 4 Cognac 16 <p>Voitures</p> id_voiture Marque Mod\u00e8le Kilom\u00e9trage Couleur id_agence 1 Renault Clio 12000 Rouge 2 2 Peugeot 206 22000 Noir 3 3 Toyota Yaris 33500 Rouge 3 <ol> <li>Quelle relation a pour cardinal 3 ?</li> <li>Peut-on ajouter une entit\u00e9 <code>(2, 'Rochefort', 17)</code> \u00e0 la relation Agences? Pourquoi?</li> <li>Donner le sch\u00e9ma de chaque relation.</li> <li>Quelle table peut contenir des donn\u00e9es redondantes? Comment y rem\u00e9dier?</li> </ol> <ol> <li>C'est la relation Voitures (trois enregistrements/lignes).</li> <li>On ne peut pas car l'attribut <code>id_agence</code> va servir de cl\u00e9 primaire. Cela enfreindrait la contrainte de relation.</li> <li> <p>Agences(id_agence <code>Int</code>, Ville <code>String</code>, D\u00e9partement <code>String</code>)</p> <p>Voitures(id_voiture <code>Int</code>, Marque <code>String</code>, Mod\u00e8le <code>String</code>, Kilom\u00e9trage <code>Int</code>, Couleur <code>String</code>, # id_agence <code>Int</code>)</p> </li> </ol> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>On souhaite mod\u00e9liser un annuaire t\u00e9l\u00e9phonique dans lequel chaque personne est repr\u00e9sent\u00e9e par son nom, son pr\u00e9nom et son num\u00e9ro de t\u00e9l\u00e9phone. </p> <p>Proposer un sch\u00e9ma de cette relation, en pr\u00e9cisant la cl\u00e9 primaire.</p> <p><code>Annuaire (num\u00e9ro STRING, nom STRING, pr\u00e9nom STRING)</code></p> <p>Exercice  6</p> \u00c9nonc\u00e9Correction <p>Donner la mod\u00e9lisation relationnelle d'un bulletin scolaire. Pr\u00e9ciser les cl\u00e9s primaires et \u00e9trang\u00e8res.</p> <p>On doit pouvoir repr\u00e9senter:</p> <ul> <li>des \u00e9l\u00e8ves, poss\u00e9dant un num\u00e9ro d'\u00e9tudiant alphanum\u00e9rique (INE);</li> <li>des mati\u00e8res;</li> <li>au plus une note sur 20, par mati\u00e8re et par \u00e9l\u00e8ve.</li> </ul> <p> </p> <p>Exercice  7</p> \u00c9nonc\u00e9Correction <p>Donner une mod\u00e9lisation relationnelle correspondant \u00e0 la situation du \u00abPrequel\u00bb. </p> <p>Peupler chaque table de quelques enregistrements pour illustrer.</p>"},{"location":"T04_BasesDonnees/T4.2_SBGD/T4.2_SGBD/","title":"T4.2 SGBD","text":""},{"location":"T04_BasesDonnees/T4.2_SBGD/T4.2_SGBD/#t42-sgbd","title":"T4.2 SGBD","text":""},{"location":"T04_BasesDonnees/T4.2_SBGD/T4.2_SGBD/#421-differents-sgbd","title":"4.2.1 Diff\u00e9rents SGBD","text":"<p>Comme son nom l'indique, un SGBD - pour Syst\u00e8me de Gestion de Bases de Donn\u00e9es - est un logiciel qui permet de g\u00e9rer les bases de donn\u00e9es, c'est-\u00e0-dire:</p> <ul> <li>cr\u00e9er et supprimer des relations (ou tables);</li> <li>mettre \u00e0 jour les tables (cr\u00e9ation, modification, suppression d'enregitrements dans les tables);</li> <li>rechercher des donn\u00e9es particuli\u00e8res selon plusieurs crit\u00e8res...</li> </ul> <p>Ces actions sur les  bases de donn\u00e9es s'appellent des requ\u00eates et on utilise le langage SQL (pour Structured Query Language) pour communiquer ces requ\u00eates au SGBD, qui s'assure de pr\u00e9server l'int\u00e9grit\u00e9 de la base de donn\u00e9es.</p> <p>La majorit\u00e9 des SGBD les plus utilis\u00e9s s'appuient sur le mod\u00e8le relationnel : Oracle, MySQL, Microsoft SQL Server, PostgreSQL, Microsoft Access, SQLite, MariaDB...</p> <p> </p> <p>Mais de plus en plus de SGBD non-relationnels sont utilis\u00e9s, sp\u00e9cialement adapt\u00e9s \u00e0 des donn\u00e9es plus diverses et moins structur\u00e9es. On les retrouve sous l'appelation NoSQL (pour Not only SQL). Citons parmi eux MongoDB, Cassandra (Facebook), BigTable (Google)...</p> <p>La plupart des SGBD sont bas\u00e9s sur le sch\u00e9ma client-serveur : les bases de donn\u00e9es et le SGBD sont situ\u00e9s sur un serveur et le client est un programme qui effectue les requ\u00eates en se connectant au serveur.</p> <p> </p> <p>En NSI, nous utiliserons SQLite qui ne reproduit pas ce sch\u00e9ma et qui sera plus simple d'utilisation, \u00e0 travers une interface graphique DB Browser for SQLite (ou Capytale).</p>"},{"location":"T04_BasesDonnees/T4.2_SBGD/T4.2_SGBD/#422-utilisation-de-sqlite","title":"4.2.2 Utilisation de SQLite","text":"<p>Avec DB Browser for SQLite</p> <ol> <li> <p>Ouvrir un terminal puis entrer la ligne de commande (mot de passe <code>nsi</code>):</p> <pre><code>sudo apt-get update\n</code></pre> </li> <li> <p>Installer le logiciel par:</p> <pre><code>sudo apt-get install sqlitebrowser\n</code></pre> </li> </ol> <p>On pourra ensuite cr\u00e9er une nouvelle base de donn\u00e9es ou en ouvrir une (au format <code>.db</code>), consulter la structure (le sch\u00e9ma relationnel), parcourir les donn\u00e9es (visualiser le contenu des tables) et \u00e9x\u00e9cuter du code SQL (lancer des ordres).</p> <p> </p> <p>Dans le terminal, sans environnement graphique</p> <p>On utilise l'interpr\u00e9teur <code>sqlite3</code>, dont les commandes sont toutes pr\u00e9fix\u00e9es par un point, sans <code>;</code> en fin de ligne. Les commandes que l'on peut utiliser (voir ici pour plus de commandes) sont <code>.open</code>, <code>.import</code>, <code>.mode</code>, <code>.headers</code>, <code>.schema</code>, <code>.exit</code>.</p> <p> </p> <p>Installer <code>sqlite3</code> par :</p> <pre><code>sudo apt-get install sqlite3\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/","title":"T4.3 Langage SQL (partie 1)","text":""},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#t43-langage-sql-partie-1","title":"T4.3 Langage SQL (partie 1)","text":"<p>Le langage SQL permet de communiquer avec le SGBD pour exploiter une base de donn\u00e9es \u00e0 l'aide de requ\u00eates. Il comporte plusieurs parties, dont la partie langage de d\u00e9finition des donn\u00e9es (LDD) et la partie langage de manipulation des donn\u00e9es (LMD) qui sont au programme de NSI (plus ou moins explicitement...).</p>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#431-la-definition-des-donnees-ldd","title":"4.3.1 La d\u00e9finition des donn\u00e9es (LDD)","text":""},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#les-types-de-donnees-domaines","title":"\u25b6 Les types de donn\u00e9es (Domaines)","text":"<p>Non standardisation</p> <p>Les diff\u00e9rents types de donn\u00e9es peuvent varier d'un SGBD \u00e0 l'autre... </p> <p>Dans le tableau suivant, on donne les types les plus traditionnels (tels qu'on les manipulera avec SQLite et donn\u00e9s dans les sujets de BAC).</p> Classe de stockage Type de donn\u00e9e repr\u00e9sent\u00e9e <code>INTEGER</code> Nombre entier (sur n bits, selon la taille) <code>REAL</code> Nombre flottant (8 bits, norme IEEE-754) <code>DATE</code> Format date, norme ISO AAAA-MM-JJ <code>DATETIME</code> Format date et heure, norme ISO AAAA-MM-JJ HH:MM:SS.SSS <code>TEXT</code> Cha\u00eene de caract\u00e8res cod\u00e9es selon l\u2019encodage sp\u00e9cifi\u00e9 (UTF-8, ...) <code>VARCHAR(n)</code> Cha\u00eene de caract\u00e8res limit\u00e9e \u00e0 <code>n</code> caract\u00e8res <code>BLOB</code> Donn\u00e9es brutes, octets, images\u2026 stock\u00e9es au format binaire."},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#create-table","title":"\u25b6 CREATE TABLE","text":"<p>Le mot-cl\u00e9 <code>CREATE TABLE</code> permet de cr\u00e9er une table (\u00e9tonnant, non?) en pr\u00e9cisant son sch\u00e9ma.</p> Exemple de cr\u00e9ation d'une table<pre><code>CREATE TABLE livre (\n    titre TEXT,\n    editeur VARCHAR(45),\n    annee INTEGER,\n    isbn VARCHAR(17) PRIMARY KEY\n);\n</code></pre> <p>Syntaxe</p> <p>Si dans une requ\u00eate SQL la casse n'est pas importante (on aurait tr\u00e8s bien pu \u00e9crire <code>Create Table</code> ou <code>create table</code>), il ne faut pas oublier le \u00ab <code>;</code> \u00bb en fin de requ\u00eate !</p> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <ol> <li>Lancer DB Browser for SQLite et cr\u00e9er une nouvelle base de donn\u00e9e <code>bibliotheque.db</code> (ne pas oublier l'extension). Fermer la fen\u00eatre de cr\u00e9ation.</li> <li>Dans l'onglet Ex\u00e9cuter le SQL, copier-coller le code pr\u00e9c\u00e9dent, puis ex\u00e9cuter le code (bouton \u25b6 ou F5).</li> <li>Dans l'onglet Structure de la Base de Donn\u00e9es, v\u00e9rifier le sch\u00e9ma de cette table livre.</li> <li>De la m\u00eame fa\u00e7on, cr\u00e9er la table usager en reprenant le sch\u00e9ma du chapitre T4.1.</li> </ol> <pre><code>CREATE TABLE usager (\n    nom VARCHAR(45),\n    prenom VARCHAR(30),\n    id_usager INTEGER PRIMARY KEY\n);\n</code></pre> <p>Pour d\u00e9finir une cl\u00e9 \u00e9trang\u00e8re dans la cr\u00e9ation d'une table, on utilisera le mot-cl\u00e9 <code>REFERENCES</code> en indiquant la table et l'attribut auquel la cl\u00e9 fait r\u00e9f\u00e9rence. Par exemple, pour cr\u00e9er la table emprunt, on commencera par:</p> <pre><code>CREATE TABLE emprunt (\n    isbn VARCHAR(17) PRIMARY KEY REFERENCES livre(isbn),\n    ...\n);\n</code></pre> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Terminer la requ\u00eate de cr\u00e9ation de la table emprunt.</p> <pre><code>CREATE TABLE emprunt (\n    isbn VARCHAR(17) PRIMARY KEY REFERENCES livre(isbn),\n    id_usager INTEGER REFERENCES usager(id_usager),\n    date_retour DATE\n);\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#drop-table","title":"\u25b6 DROP TABLE","text":"<p>Le mot-cl\u00e9 <code>DROP TABLE</code> permet de supprimer une table.</p> Script SQL pour effacer la base de donn\u00e9es<pre><code>DROP TABLE emprunt;\nDROP TABLE usager;\nDROP TABLE livre;\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#432-la-manipulation-des-donnees-lmd-requetes-de-mise-a-jour","title":"4.3.2 La manipulation des donn\u00e9es (LMD) : Requ\u00eates de mise \u00e0 jour","text":"<p>Commen\u00e7ons par cr\u00e9er la table \u00e9l\u00e8ve suivante (je sais, il y a des erreurs):</p> id_eleve pr\u00e9nom nom moyenne maison 1 Harry Potter 17 Gryffondor 2 Hermione Granger 9 Gryffondor 3 Luna Lovegood 13 Serdaigle 4 Drago Malefoy 15 Poufsouffle"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#insert","title":"\u25b6 INSERT","text":"<p>Pour ins\u00e9rer dans une table une ligne (un enregistrement, une entit\u00e9) sous la forme d'un n-uplet de valeurs, on utilise les mots-cl\u00e9s <code>INSERT INTO ... VALUES ...</code>.</p> Exemple d'insertion dans une table<pre><code>INSERT INTO eleve VALUES\n    (1, 'Harry', 'Potter', 17, 'Gryffondor');\n</code></pre> <p>On peut \u00e9galement ins\u00e9rer plusieurs lignes \u00e0 la fois, en s\u00e9parant les n-uplets par des virgules:</p> Exemple d'insertion multiple dans une table<pre><code>INSERT INTO eleve VALUES\n    (2, 'Hermione', 'Granger', 9, 'Gryffondor'),\n    (3, 'Luna', 'Lovegood', 13, 'Serdaigle');\n</code></pre> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <ol> <li>Dans une nouvelle base de donn\u00e9es, cr\u00e9er la table \u00e9l\u00e8ve.</li> <li>Ins\u00e9rer les valeurs dans la table.</li> <li>Ajouter la ligne <code>(4, 'Ron', 'Wisley', 16, 'Gryffondor')</code>. Que se passe-t-il? Pourquoi?</li> <li>Ajouter la ligne en rectifiant.</li> </ol> <pre><code>-- 1.\nCREATE TABLE eleve (\n    id_eleve INTEGER PRIMARY KEY,\n    prenom VARCHAR(30),\n    nom VARCHAR(30),\n    moyenne REAL,\n    maison VARCHAR(15) REFERENCES maison(nom)\n);\n\n-- 2.\nINSERT INTO eleve VALUES\n    (1, 'Harry', 'Potter', 17, 'Gryffondor'),\n    (2, 'Hermione', 'Granger', 9, 'Gryffondor'),\n    (3, 'Luna', 'Lovegood', 13, 'Serdaigle'),\n    (4, 'Drago', 'Malefoy', 15, 'Poufsouffle');\n\n-- 3.\nINSERT INTO eleve VALUES (4, 'Ron', 'Wisley', 16, 'Gryffondor');\n\n-- 4.\nINSERT INTO eleve VALUES (5, 'Ron', 'Wisley', 16, 'Gryffondor');\n</code></pre> <p>L'insertion de la ligne <code>(4, 'Ron', 'Wisley', 16, 'Gryffondor')</code> provoque une erreur (violation de la contrainte de relation) car une valeur de 4 existe d\u00e9j\u00e0 dans la table eleve pour l'attribut <code>id_eleve</code> qui est une cl\u00e9 primaire.</p> Astuce hors-programme <p>On peut d\u00e9l\u00e9guer la gestion des cl\u00e9s primaires avec l'instruction <code>AUTOINCREMENT</code>.</p> <pre><code>CREATE TABLE eleve (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    prenom VARCHAR(30),\n    nom VARCHAR(30),\n    moyenne REAL,\n    maison VARCHAR(12)\n);\n\nINSERT INTO eleve (prenom, nom, moyenne, maison) VALUES\n    ('Harry', 'Potter', 17, 'Gryffondor'),\n    ('Hermione', 'Granger', 9, 'Gryffondor'),\n    ('Luna', 'Lovegood', 13, 'Serdaigle'),\n    ('Drago', 'Malefoy', 15, 'Poufsouffle');\n</code></pre> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <ol> <li> <p>Dans la base de donn\u00e9es pr\u00e9c\u00e9dente, cr\u00e9er les tables professeur puis maison en suivant les sch\u00e9mas:</p> <ul> <li>professeur(id_prof <code>Int</code>, nom <code>String</code>, cours <code>String</code>)</li> <li>maison(nom <code>String</code>, dortoir <code>String</code>, #id_prof <code>Int</code>)</li> </ul> </li> <li> <p>Ins\u00e9rer dans la table professeur les lignes <code>(1, 'Rogue', 'potion'), (2, 'Macgonagall', 'm\u00e9tamorphose'), (3, 'Flitwick', 'sortil\u00e8ge'), (4, 'Chourave', 'botanique')</code>.</p> </li> <li> <p>Ins\u00e9rer dans la table maison les lignes <code>('Gryffondor', 'tour', 2), ('Poufsouffle', 'sous-sol', 4), ('Serpentard', 'cachot', 1)</code>.</p> </li> <li>Ins\u00e9rer dans la table maison la ligne <code>('Serdaigle', 'tour', 5)</code>. Que se passe-t-il? Pourquoi?</li> </ol> <pre><code>-- 1. \nCREATE TABLE professeur (\n    id_prof INTEGER PRIMARY KEY,\n    nom VARCHAR(30),\n    cours VARCHAR(25)\n);\n\nCREATE TABLE maison (\n    nom VARCHAR(15) PRIMARY KEY,\n    dortoir VARCHAR(15),\n    id_prof INTEGER REFERENCES professeur(id_prof)\n);\n\n-- 2.\nINSERT INTO professeur VALUES\n    (1, 'Rogue', 'potion'),\n    (2, 'Macgonagall', 'm\u00e9tamorphose'),\n    (3, 'Flitwick', 'sortil\u00e8ge'),\n    (4, 'Chourave', 'botanique')\n;\n\n-- 3.\nINSERT INTO maison VALUES\n    ('Gryffondor', 'tour', 2),\n    ('Poufsouffle', 'sous-sol', 4),\n    ('Serpentard', 'cachot', 1)\n;\n\n-- 4.\nINSERT INTO maison VALUES ('Serdaigle', 'tour', 5);\n</code></pre> <p>L'insertion provoque une erreur (violation de la contrainte de r\u00e9f\u00e9rence) car <code>id_prof</code> est une cl\u00e9 \u00e9trang\u00e8re et la valeur 5 n'existe pas dans la table professeur \u00e0 laquelle elle fait r\u00e9f\u00e9rence.</p>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#update","title":"\u25b6 UPDATE","text":"<p>Le mot-cl\u00e9 <code>UPDATE</code> permet d'actualiser une ou plusieurs valeurs d'une ligne (ou de plusieurs lignes).</p> Exemple de modification d'une valeur<pre><code>UPDATE eleve SET moyenne = 19\n    WHERE nom = 'Granger';\n</code></pre> <p>Remarques</p> <ul> <li>On a pr\u00e9cis\u00e9 la ligne o\u00f9 la modification doit avoir lieu avec la clause <code>WHERE</code>. Sans cette clause, toutes les valeurs de l'attribut moyenne auraient \u00e9t\u00e9 modifi\u00e9es.</li> <li>On peut modifier plusieurs attributs en les s\u00e9parant par une virgule apr\u00e8s le mot-cl\u00e9 <code>SET</code>.</li> </ul> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <ol> <li>Rectifier la maison de Drago Malefoy (Serpentard, pour les incultes).</li> <li>En une seule requ\u00eate, rectifier l'orthographe de Ron Weasley et augmenter sa moyenne de 0.5 point (on peut faire un calcul sur l'attribut).</li> </ol> <pre><code>-- 1.\nUPDATE eleve SET maison = 'Serpentard'\n    WHERE prenom = 'Drago';\n\n-- 2.\nUPDATE eleve SET nom = 'Weasley', moyenne = moyenne + 0.5\n    WHERE id = 5;\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL1/#delete","title":"\u25b6 DELETE","text":"<p>\u00c0 utiliser avec pr\u00e9caution, le mot-cl\u00e9 <code>DELETE</code> permet de supprimer une ou plusieurs lignes.</p> Exemple de suppression d'une ligne<pre><code>DELETE FROM eleve\n    WHERE nom = 'Malefoy';\n</code></pre> <p>Sans la clause <code>WHERE</code>, toutes les lignes de la table auraient \u00e9t\u00e9 supprim\u00e9es par la requ\u00eate <code>DELETE FROM eleve;</code> .</p> <p>Exercice  6</p> \u00c9nonc\u00e9Correction <p>Supprimer tous les \u00e9l\u00e8ves qui ne sont pas de la maison Gryffondor.</p> <pre><code>DELETE FROM eleve\n    WHERE maison != 'Gryffondor';\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL2/","title":"T4.3 Langage SQL (partie 2)","text":""},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL2/#t43-langage-sql-partie-2","title":"T4.3 Langage SQL (partie 2)","text":""},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL2/#433-la-manipulation-des-donnees-lmd-requetes-dinterrogation-avec-select","title":"4.3.3 La manipulation des donn\u00e9es (LMD) : Requ\u00eates d'interrogation avec SELECT","text":"<p><code>SELECT</code> est le mot-cl\u00e9 le plus important et le plus utilis\u00e9 en SQL : il permet de s\u00e9lectionner des lignes, des colonnes d'une ou plusieurs tables, mais aussi transformer des donn\u00e9es par l'utilisation de fonction ou encore r\u00e9aliser des calculs.</p> <p> </p> <p>Exemple-type</p> <p>Tous les exemples de ce chapitre sont \u00e0 tester \u00e0 partir de la base de donn\u00e9es livres.db issue de l'ouvrage paru chez Ellipses, cit\u00e9 en bibliographie dans les sources du site, qui reprend (\u00e0 peu-pr\u00e8s) le sch\u00e9ma de la base biblioth\u00e8que \u00e9tudi\u00e9e aux chapitres pr\u00e9c\u00e9dents.</p> <p>Syntaxe g\u00e9n\u00e9rale</p> <pre><code>SELECT colonnes ou \u00e9l\u00e9ments d'extraction\n    FROM table(s)\n    WHERE condition(s) - optionnel\n    ORDER BY tri(s) - optionnel\n;\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL2/#1-selection-et-projection","title":"1. S\u00e9lection et projection","text":"<p>S\u00e9lectionner des lignes</p> Sans conditionAvec une conditionAvec des conditionsAvec un triRequ\u00eate approch\u00e9e <p>On obtient alors l'int\u00e9gralit\u00e9 de la table. On utilise l'ast\u00e9risque <code>*</code> pour indiquer qu'on souhaite toutes les colonnes.</p> S\u00e9lectionner tous les usagers<pre><code>SELECT * FROM usager;\n</code></pre> <p>On utilise la clause <code>WHERE</code> pour indiquer une condition sur la s\u00e9lection des lignes.</p> S\u00e9lectionner les usagers vivant dans le 15e arrondissement de Paris<pre><code>SELECT * FROM usager WHERE cp = '75005';\n</code></pre> <p>On peut utiliser des op\u00e9rateurs bool\u00e9ens dans l'\u00e9criture de la condition.</p> S\u00e9lectionner les livres parus entre 2000 et 2005<pre><code>SELECT * FROM livre WHERE annee &gt;= 2000 AND annee &lt;= 2005;\n</code></pre> <p>On peut ajouter un tri sur les r\u00e9sultats, en pr\u00e9cisant l'attribut sur lequel s'effectue le tri et \u00e9ventuellement l'ordre de tri par les mots-cl\u00e9s <code>ASC</code> (par d\u00e9faut) ou <code>DESC</code> .</p> S\u00e9lectionner les livres parus entre 2000 et 2005 et les trier par editeur<pre><code>SELECT * FROM livre\n    WHERE annee &gt;= 2000 AND annee &lt;= 2005\n    ORDER BY editeur\n;\n</code></pre> <p>Si la condition de recherche porte sur une cha\u00eene de caract\u00e8res, l'op\u00e9rateur <code>=</code> peut ne pas \u00eatre appropri\u00e9. On utilise alors plut\u00f4t le mot-cl\u00e9 <code>LIKE</code>, avec une cha\u00eene de caract\u00e8re compos\u00e9e d'un motif utilisant des jokers <code>%</code> pour remplacer une cha\u00eene de caract\u00e8res quelconque.</p> S\u00e9lectionner les lignes dont le titre contient la cha\u00eene `Ast\u00e9rix`<pre><code>SELECT * FROM livre WHERE titre LIKE '%Ast\u00e9rix%';\n</code></pre> <p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>Effectuer les requ\u00eates suivantes:</p> <ol> <li>S\u00e9lectionner les livres qui ne sont pas parus en 2008, class\u00e9s du plus r\u00e9cent au plus vieux.</li> <li>S\u00e9lectionner les usagers dont le pr\u00e9nom est JULIEN ou DAVID.</li> <li>S\u00e9lectionner les auteurs dont le pr\u00e9nom commence par un M.</li> </ol> <p>S\u00e9lectionner des colonnes (projection)</p> <p>Plut\u00f4t que de s\u00e9lectionner toutes les colonnes avec le joker <code>*</code> on peut pr\u00e9ciser quels attributs on souhaite afficher dans les r\u00e9sultats de la requ\u00eate. On nomme cette op\u00e9ration projection.</p> Une colonnePlusieurs colonnesGestion des doublons S\u00e9lectionner uniquement les titres des livres parus en 2000<pre><code>SELECT titre FROM livre WHERE annee = 2000;\n</code></pre> S\u00e9lectionner les titres et l'ann\u00e9e de parution des livres parus avant 2000<pre><code>SELECT titre, annee FROM livre WHERE annee &lt; 2000;\n</code></pre> <p>Si on s\u00e9lectionne la colonne (l'attribut) editeur de la table livre par la requ\u00eate suivante, on s'aper\u00e7oit qu'on obtient plusieurs fois les m\u00eames noms d'\u00e9diteur.</p> <pre><code>SELECT editeur FROM livre;\n</code></pre> <p>Pour obtenir uniquement les valeurs diff\u00e9rentes de cette colonne, on utilise le mot-cl\u00e9 <code>DISTINCT</code> (le tri est facultatif, il est pr\u00e9sent ici pour bien visualiser l'absence des doublons):</p> <pre><code>SELECT DISTINCT editeur FROM livre ORDER BY editeur;\n</code></pre> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Effectuer les requ\u00eates suivantes sur la table livre:</p> <ol> <li>S\u00e9lectionner les titres et les ISBN des livres parus \u00e0 partir de 1990.</li> <li>S\u00e9lectionner les ann\u00e9es (sans doublon) pour lesquelles un livre est paru chez Flammarion, tri\u00e9es dans l'ordre croissant.</li> </ol>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL2/#2-agregation","title":"2. Agr\u00e9gation","text":"<p>Une autre utilisation de la clause <code>SELECT</code> est d'appeler une fonction d'agr\u00e9gation, c'est-\u00e0-dire une fonction que l'on applique \u00e0 l'ensemble des valeurs d'une colonne et qui renvoie une table r\u00e9duite \u00e0 une cellule contenant le r\u00e9sultat du calcul. On peut par exemple compter le nombre de valeurs (mot-cl\u00e9 <code>COUNT</code>), faire une somme (<code>SUM</code>), calculer une moyenne (<code>AVG</code>) ou encore trouver un minimum/maximum (<code>MIN</code> , <code>MAX</code>).</p> <p>Agr\u00e9gation</p> <code>COUNT</code><code>SUM</code>, <code>AVG</code><code>MIN</code>, <code>MAX</code> Compter le nombre d'usagers<pre><code>SELECT COUNT(*) FROM usager;\n</code></pre> <p>Remarque: on peut utiliser un alias avec <code>AS</code> pour nommer le r\u00e9sultat:</p> Avec utilisation d'un alias<pre><code>SELECT COUNT(*) AS total FROM usager;\n</code></pre> <p>Les fonctions <code>SUM</code> et <code>AVG</code> s'utilisent de la m\u00eame fa\u00e7on, ici un exemple (totalement d\u00e9nu\u00e9 de sens) pour illustrer <code>AVG</code> :</p> Calculer l'ann\u00e9e moyenne de parution<pre><code>SELECT AVG(annee) FROM livre;\n</code></pre> D\u00e9terminer l'ann\u00e9e de parution la plus r\u00e9cente parmi les livres \u00e9dit\u00e9s par Dargaud<pre><code>SELECT MAX(annee) FROM livre WHERE editeur LIKE 'Dargaud';\n</code></pre> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <ol> <li>\u00c9crire une requ\u00eate SQL qui permet de r\u00e9cup\u00e9rer le nombre de livres parus en 2012.</li> <li>\u00c9crire une requ\u00eate SQL qui permet de r\u00e9cup\u00e9rer la date de retour la plus ancienne en la nommant <code>'retard_max'</code></li> </ol> <pre><code>-- 1.\nSELECT COUNT(*) FROM livre WHERE annee = 2012;\n\n-- 2.\nSELECT MIN(retour) AS 'retard_max' FROM emprunt;\n</code></pre>"},{"location":"T04_BasesDonnees/T4.3_SQL/T4.3_SQL2/#3-jointures","title":"3. Jointures","text":"<p>Jusqu'\u00e0 pr\u00e9sent les requ\u00eates effectu\u00e9es sont relativement simples puisqu'elles ne concernent qu'une seule table \u00e0 la fois. Mais int\u00e9ressons-nous par exemple \u00e0 une requ\u00eate - pertinente - de savoir qui est en retard dans son emprunt. L'interrogation de la table emprunt permet de r\u00e9cup\u00e9rer les valeurs de l'attribut code_barre, mais ce n'est pas tr\u00e8s parlant pour un \u00eatre humain, le nom de la personne serait plus judicieux. Or ce nom se situe dans une autre table, la table usager... Il faut donc croiser les donn\u00e9es situ\u00e9es dans deux tables diff\u00e9rentes.</p> <p>Cette manipulation de fusion de plusieurs tables se nomme une jointure et s'effectue \u00e0 l'aide du mot-cl\u00e9 <code>JOIN ... ON ...</code>.</p> <p>Jointure</p> <p></p>Exemple de jointure sur l'attribut commun *code_barre*<pre><code>SELECT * FROM usager JOIN emprunt ON usager.code_barre = emprunt.code_barre;\n</code></pre> Remarques:<p></p> <ul> <li>On constate que la table renvoy\u00e9e par cette requ\u00eate contient autant de fois la ligne correspondant \u00e0 un usager que ce dernier a emprunt\u00e9 de ligne. De m\u00eame un usager n'ayant pas fait d'emprunt ne figure pas dans le r\u00e9sultat de la requ\u00eate.</li> <li>On doit pr\u00e9fixer les attributs de la table \u00e0 laquelle ils appartiennent.</li> </ul> <p>Il suffit maintenant d'ajouter un filtre sur la date de retour, et de n'afficher que le nom de l'usager, l'isbn et la date de retour.</p> Sans aliasAvec alias <pre><code>SELECT usager.nom, emprunt.isbn, emprunt.retour\n    FROM usager\n    JOIN emprunt ON usager.code_barre = emprunt.code_barre\n    WHERE emprunt.retour &lt; '2022-12-01'\n;\n</code></pre> <pre><code>SELECT u.nom, e.isbn, e.retour\n    FROM usager AS u\n    JOIN emprunt AS e ON u.code_barre = e.code_barre\n    WHERE e.retour &lt; '2022-12-01'\n;\n</code></pre> <p>On peut \u00e9galement effectuer une jointure sur plus de deux tables, par exemple si on souhaite afficher le titre du livre emprunt\u00e9 plut\u00f4t que son isbn...</p> On r\u00e9fl\u00e9chit d'abord... <pre><code>SELECT u.nom, l.titre, e.retour\n    FROM usager AS u\n    JOIN emprunt AS e ON u.code_barre = e.code_barre\n    JOIN livre AS l ON l.isbn = e.isbn\n    WHERE e.retour &lt; '2022-12-01'\n;\n</code></pre> <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>\u00c9crire les requ\u00eates SQL suivantes:</p> <ol> <li>Le <code>titre</code> des <code>livres</code> emprunt\u00e9s.</li> <li>Le <code>nom</code> et le <code>pr\u00e9nom</code> de l'auteur du livre <code>1984</code>.</li> <li>Les <code>titre</code> des <code>livres</code> publi\u00e9s strictement avant <code>Dune</code> (penser d'abord \u00e0 \u00e9crire une requ\u00eate donnant l'ann\u00e9e de parution de <code>Dune</code>).</li> <li>Les <code>noms</code> et <code>pr\u00e9noms</code> des auteurs des <code>livres</code> trouv\u00e9s \u00e0 la requ\u00eate pr\u00e9c\u00e9dente.</li> <li>M\u00eame requ\u00eate que pr\u00e9c\u00e9demment, sans doublon.</li> <li>Le nombre de r\u00e9sultats trouv\u00e9s \u00e0 la question pr\u00e9c\u00e9dente.</li> </ol> <pre><code>-- 1.\nSELECT livre.titre FROM livre\nJOIN emprunt ON livre.isbn = emprunt.isbn\n;\n\n-- 2.\nSELECT auteur.nom, auteur.prenom FROM auteur\nJOIN auteur_de ON auteur.a_id = auteur_de.a_id\nJOIN livre ON livre.isbn = auteur_de.isbn\nWHERE livre.titre = '1984'\n;\n\n-- 3.\nSELECT titre FROM livre\nWHERE annee &lt; (SELECT annee FROM livre WHERE titre = 'Dune')\n;\n\n-- 4.\nSELECT auteur.nom, auteur.prenom FROM auteur\nJOIN auteur_de ON auteur.a_id = auteur_de.a_id\nJOIN livre ON livre.isbn = auteur_de.isbn\nWHERE livre.annee  &lt; (SELECT annee FROM livre WHERE titre = 'Dune')\n;\n\n-- 5.  \nSELECT DISTINCT auteur.nom, auteur.prenom FROM auteur\nJOIN auteur_de ON auteur.a_id = auteur_de.a_id\nJOIN livre ON livre.isbn = auteur_de.isbn\nWHERE livre.annee  &lt; (SELECT annee FROM livre WHERE titre = 'Dune')\n;\n\n-- 6.\nSELECT COUNT(*) FROM (SELECT DISTINCT auteur.nom, auteur.prenom FROM auteur\nJOIN auteur_de ON auteur.a_id = auteur_de.a_id\nJOIN livre ON livre.isbn = auteur_de.isbn\nWHERE livre.annee  &lt; (SELECT annee FROM livre WHERE titre = 'Dune'))\n;\n</code></pre> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re les trois tables d\u00e9crites ci-dessous.</p> <p> </p> <p>Pour chaque requ\u00eate SQL suivantes, calculer son r\u00e9sultat (\u00e0 la main).</p> <ol> <li><code>SELECT * FROM x WHERE b &gt; 3;</code> </li> <li><code>SELECT DISTINCT e FROM z WHERE e &gt; 10 AND e &lt; 50;</code> </li> <li><code>SELECT * FROM y WHERE c % 2 = 0 ORDER BY d ASC;</code> </li> <li><code>SELECT x.a, x.b FROM x JOIN z ON z.a = x.a WHERE z.e &lt; 9;</code> </li> <li><code>SELECT DISTINCT x.b, z.c FROM x JOIN z ON z.a = x.a;</code> </li> </ol>"},{"location":"T04_BasesDonnees/TP_Python_SQL/Python_SQL/","title":"TP Python et SQL","text":""},{"location":"T04_BasesDonnees/TP_Python_SQL/Python_SQL/#tp-python-et-sql","title":"TP Python et SQL","text":"<p>Dans ce TP, nous allons voir comment utiliser Python pour cr\u00e9er une base de donn\u00e9es, cr\u00e9er des tables et effectuer des requ\u00eates en SQL sur cette base de donn\u00e9es.</p> <p>Ex\u00e9cuter le code suivant et contr\u00f4ler en m\u00eame temps avec DB Browser.</p> <p>Mod\u00e8le-type d'un script Python-SQL</p> Module <code>sqlite3</code>Connexion \u00e0 la base de donn\u00e9esCurseurRequ\u00eatesValidation <pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mabase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n#Cr\u00e9ation d'une table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS prof(\n    id INTEGER,\n    nom TEXT,\n    mati\u00e8re TEXT);\n    \"\"\")\n\n#Insertion de valeurs\nc.execute(\"INSERT INTO prof VALUES (1, 'Gouygou', 'NSI');\")\n\nautre_profs = [(2, 'Morel', 'Maths'),\n               (3, 'Philippe', 'Maths'),\n               (4, 'Atingdobe', 'Philosophie'),\n               (5, 'Renault', 'Arts Plastiques'),\n               (6, 'Sartorel', 'Histoire-G\u00e9ographie'),\n               (7, 'Touchais', 'Anglais'),\n               (8, 'Gouygou', 'Maths')]\nc.executemany(\"INSERT INTO prof VALUES (?, ?, ?)\", autre_profs)\n\nrequete = c.execute(\"SELECT id, nom FROM prof WHERE mati\u00e8re = 'Maths';\")\nprint(requete.fetchone())\nprint(requete.fetchall())\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> <ul> <li>La ligne 4 permet d'ouvrir une base de donn\u00e9es, ou d'en cr\u00e9er une si le fichier <code>.db</code> n'existe pas, et de cr\u00e9er une connexion \u00e0 cette base de donn\u00e9es.</li> <li>La ligne 39 met fin \u00e0 cette connexion.</li> </ul> <pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mabase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n#Cr\u00e9ation d'une table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS prof(\n    id INTEGER,\n    nom TEXT,\n    mati\u00e8re TEXT);\n    \"\"\")\n\n#Insertion de valeurs\nc.execute(\"INSERT INTO prof VALUES (1, 'Gouygou', 'NSI');\")\n\nautre_profs = [(2, 'Morel', 'Maths'),\n            (3, 'Philippe', 'Maths'),\n            (4, 'Atingdobe', 'Philosophie'),\n            (5, 'Renault', 'Arts Plastiques'),\n            (6, 'Sartorel', 'Histoire-G\u00e9ographie'),\n            (7, 'Touchais', 'Anglais'),\n            (8, 'Gouygou', 'Maths')]\nc.executemany(\"INSERT INTO prof VALUES (?, ?, ?)\", autre_profs)\n\nrequete = c.execute(\"SELECT id, nom FROM prof WHERE mati\u00e8re = 'Maths';\")\nprint(requete.fetchone())\nprint(requete.fetchall())\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> <p>On cr\u00e9e ensuite ligne 7 un objet de type <code>cursor</code> qui va permettre d'envoyer des requ\u00eates sur la base donn\u00e9es.</p> <pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mabase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n#Cr\u00e9ation d'une table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS prof(\n    id INTEGER,\n    nom TEXT,\n    mati\u00e8re TEXT);\n    \"\"\")\n\n#Insertion de valeurs\nc.execute(\"INSERT INTO prof VALUES (1, 'Gouygou', 'NSI');\")\n\nautre_profs = [(2, 'Morel', 'Maths'),\n               (3, 'Philippe', 'Maths'),\n               (4, 'Atingdobe', 'Philosophie'),\n               (5, 'Renault', 'Arts Plastiques'),\n               (6, 'Sartorel', 'Histoire-G\u00e9ographie'),\n               (7, 'Touchais', 'Anglais'),\n               (8, 'Gouygou', 'Maths')]\nc.executemany(\"INSERT INTO prof VALUES (?, ?, ?)\", autre_profs)\n\nrequete = c.execute(\"SELECT id, nom FROM prof WHERE mati\u00e8re = 'Maths';\")\nprint(requete.fetchone())\nprint(requete.fetchall())\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> Requ\u00eate simpleRequ\u00eate multipleR\u00e9cup\u00e9rer des r\u00e9sultats d'une requ\u00eate <code>SELECT</code> <p>La m\u00e9thode <code>execute</code> permet d'effectuer une requ\u00eate, que l'on passe en argument sous forme d'une cha\u00eene de caract\u00e8res. Si on souhaite l'\u00e9crire sur plusieurs lignes, on l'\u00e9crit entre triples double-quotes.</p> <p>\u00c0 noter l'option <code>IF NOT EXISTS</code> qui permet de ne pas \u00e9craser une table d\u00e9j\u00e0 existante.</p> <p>La m\u00e9thode <code>executemany</code> permet d'effectuer plusieurs requ\u00eates, une par \u00e9l\u00e9ment d'une liste pass\u00e9e en argument. On utilise des placeholders <code>?</code> pour indiquer o\u00f9 remplacer par les valeurs des \u00e9l\u00e9ments de la liste.</p> <p>On stocke la table des r\u00e9sultats d'une requ\u00eate <code>SELECT</code> dans une variable, sur laquelle on peut ensuite it\u00e9rer:</p> <ul> <li><code>fetchone</code> renvoie la premi\u00e8re ligne, et passe \u00e0 la suivante.</li> <li><code>fetchall</code> renvoie l'ensemble des lignes, sous forme d'une liste.</li> </ul> <pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mabase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n#Cr\u00e9ation d'une table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS prof(\n    id INTEGER,\n    nom TEXT,\n    mati\u00e8re TEXT);\n    \"\"\")\n\n#Insertion de valeurs\nc.execute(\"INSERT INTO prof VALUES (1, 'Gouygou', 'NSI');\")\n\nautre_profs = [(2, 'Morel', 'Maths'),\n               (3, 'Philippe', 'Maths'),\n               (4, 'Atingdobe', 'Philosophie'),\n               (5, 'Renault', 'Arts Plastiques'),\n               (6, 'Sartorel', 'Histoire-G\u00e9ographie'),\n               (7, 'Touchais', 'Anglais'),\n               (8, 'Gouygou', 'Maths')]\nc.executemany(\"INSERT INTO prof VALUES (?, ?, ?)\", autre_profs)\n\nrequete = c.execute(\"SELECT id, nom FROM prof WHERE mati\u00e8re = 'Maths';\")\nprint(requete.fetchone())\nprint(requete.fetchall())\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> <p>On valide ligne 36 les requ\u00eates pour ex\u00e9cution sur la base de donn\u00e9es.</p> <pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mabase.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n#Cr\u00e9ation d'une table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS prof(\n    id INTEGER,\n    nom TEXT,\n    mati\u00e8re TEXT);\n    \"\"\")\n\n#Insertion de valeurs\nc.execute(\"INSERT INTO prof VALUES (1, 'Gouygou', 'NSI');\")\n\nautre_profs = [(2, 'Morel', 'Maths'),\n               (3, 'Philippe', 'Maths'),\n               (4, 'Atingdobe', 'Philosophie'),\n               (5, 'Renault', 'Arts Plastiques'),\n               (6, 'Sartorel', 'Histoire-G\u00e9ographie'),\n               (7, 'Touchais', 'Anglais'),\n               (8, 'Gouygou', 'Maths')]\nc.executemany(\"INSERT INTO prof VALUES (?, ?, ?)\", autre_profs)\n\nrequete = c.execute(\"SELECT id, nom FROM prof WHERE mati\u00e8re = 'Maths';\")\nprint(requete.fetchone())\nprint(requete.fetchall())\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre> <p>Exercice</p> \u00c9nonc\u00e9AideCorrection <ol> <li> <p>\u00c9crire un programme qui cr\u00e9e une table devoir(nom <code>String</code>, note <code>Int</code>) et qui demande ensuite en boucle un nom et une note en les ajoutant \u00e0 la table. Le programme stoppe d\u00e8s qu'on entre comme nom <code>q</code> ou <code>Q</code>.</p> </li> <li> <p>Am\u00e9liorer le programme pr\u00e9c\u00e9dent pour permettre de rentrer des notes ou des consulter des notes.</p> </li> </ol> <p> </p> <p>Pour la gestion des choix, on pourra utiliser le code suivant:</p> <pre><code>go = True\n\nwhile go:\n    choix = input(\"Menu \\n1. Saisir des notes\\n2. Consulter des notes\\n3. Quitter\\nVotre choix: \")\n    if choix == '1':\n        saisie()\n    elif choix == '2':\n        consultation()\n    else:\n        go = False\n</code></pre> <p>Il vous faut donc \u00e9crire les fonctions <code>saisie</code> et <code>consultation</code> et \u00e0 ins\u00e9rer ce code dans l'architecture de l'exemple donn\u00e9.</p> <pre><code>import sqlite3\n\n#Connexion\nconnexion = sqlite3.connect('mondevoir.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n#Cr\u00e9ation d'une table\nc.execute(\\\"\\\"\\\"\n    CREATE TABLE IF NOT EXISTS devoir(\n    nom TEXT,\n    note INTEGER);\n    \\\"\\\"\\\")\n\ndef saisie():\n    go = True\n    while go:\n        nom = input('Nom ? ')\n        if nom.lower() == 'q':\n            go = False\n        else:\n            note = int(input('Note ? '))\n            c.execute(\\\"INSERT INTO devoir VALUES (?, ?);\\\", [nom, note])\n\ndef consultation():\n    go = True\n    while go:\n        nom = input('Nom ? ')\n        if nom.lower() == 'q':\n            go = False\n        else:\n            rq = c.execute(\\\"SELECT note FROM devoir WHERE nom = ?;\\\", [nom]).fetchone()\n            if rq is None:\n                print(\\\"El\u00e8ve inconnu\\\")\n            else:\n                print(\\\"Note: \\\", rq[0])\n\ngo = True\n\nwhile go:\n    choix = input(\\\"Menu\\n1. Saisir des notes\\n2. Consulter des notes\\n3. Quitter\\nVotre choix: \\\")\n    if choix == '1':\n        saisie()\n    elif choix == '2':\n        consultation()\n    else:\n        go = False\n\n\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre>"},{"location":"T05_ArchiMaterielle/accueil/","title":"Th\u00e8me 5 : Architecture mat\u00e9rielle","text":""},{"location":"T05_ArchiMaterielle/accueil/#theme-5-architecture-materielle","title":"Th\u00e8me 5 : Architecture mat\u00e9rielle","text":""},{"location":"T05_ArchiMaterielle/T5.1_Routage/T5.1_Protocoles_routage/","title":"T5.1 Protocoles de routage","text":""},{"location":"T05_ArchiMaterielle/T5.1_Routage/T5.1_Protocoles_routage/#t51-protocoles-de-routage","title":"T5.1 Protocoles de routage","text":""},{"location":"T05_ArchiMaterielle/T5.1_Routage/T5.1_Protocoles_routage/#1-problematique-du-routage","title":"1. Probl\u00e9matique du routage","text":"<p>On prend exemple sur le r\u00e9seau (du moins un extrait) d'un h\u00f4pital:</p> <p> </p> <p>Dans ce r\u00e9seau les diff\u00e9rentes machines doivent communiquer entre elles.</p> <p>Cas n\u00b01</p> <p>La machine A d'adresse IP <code>192.168.1.5</code> veut communiquer avec la machine B d'adresse IP <code>192.168.1.15</code>. Gr\u00e2ce au masque de sous-r\u00e9seau, A comprend que B fait partie du m\u00eame r\u00e9seau local: les paquets de donn\u00e9es seront achemin\u00e9s par le switch du r\u00e9seau <code>192.168.1.0/24</code>.</p> <p>Cas n\u00b02</p> <p>La machine A d'adresse IP <code>192.168.1.5</code> veut communiquer avec le serveur SP qui ne fait pas partie du m\u00eame sous-r\u00e9seau. Les paquets de donn\u00e9es vont donc \u00eatre envoy\u00e9s \u00e0 la passerelle du r\u00e9seau <code>192.168.1.0/24</code> : le routeur R0, via son interface <code>192.168.1.254</code>.</p> <p>Routeur, interface et passerelle</p> RouteurInterface et passerelle <p>Les r\u00e9seaux locaux peuvent \u00eatre reli\u00e9s entre eux par l'interm\u00e9diaire de routeurs. Il ne faut jamais perdre de vue qu'Internet r\u00e9sulte de l'interconnexion de r\u00e9seaux par des routeurs.</p> <p>Un routeur est compos\u00e9 d\u2019un nombre plus ou moins important d\u2019interfaces r\u00e9seau (cartes r\u00e9seau). Les routeurs les plus simples que l\u2019on puisse rencontrer permettent de relier ensemble deux r\u00e9seaux (ils poss\u00e8dent alors 2 interfaces r\u00e9seau), mais il existe des routeurs capables de relier ensemble une dizaine de r\u00e9seaux. N'importe quel ordinateur peut jouer le r\u00f4le de routeur (\u00e0 partir du moment o\u00f9 il poss\u00e8de au moins 2 interfaces r\u00e9seau), mais on rencontre souvent des \u00abmachines\u00bb d\u00e9di\u00e9es (par exemple de marque CISCO):</p> <p> </p> <p>Chaque carte r\u00e9seau d'un routeur poss\u00e8de une adresse IP propre : par exemple le routeur R0 poss\u00e8de 4 cartes r\u00e9seau d'adresses <code>192.168.1.254</code>, <code>58.187.10.254</code>, <code>112.85.30.254</code> et <code>54.25.20.254</code>. Selon le sens de transmission des paquets, on parle d'interface ou de passerelle:</p> <ul> <li> <p>interface : c'est l'adresse IP de la carte r\u00e9seau du routeur par o\u00f9 va sortir le paquet \u00e0 envoyer. Il y a donc toujours une adresse d'interface \u00e0 renseigner (car un paquet sort bien de quelque part !). Parfois cette interface sera juste nomm\u00e9e interface1 ou interface2., ou bien encore <code>eth0</code>, <code>eth1</code>, etc.</p> </li> <li> <p>passerelle : c'est l'adresse IP de la carte r\u00e9seau du routeur \u00e0 qui on va confier le paquet, si on n'est pas capable de le d\u00e9livrer directement (donc si l'adresse IP de destination n'est pas dans notre propre sous-r\u00e9seau). Cette adresse de passerelle n'est donc pas syst\u00e9matiquement mentionn\u00e9e. Quand elle l'est, elle donne le renseignement sur le prochain routeur \u00e0 qui le paquet est confi\u00e9.</p> </li> </ul> <p>Reprenons le cas n\u00b02 : comment le routeur R0 va-t-il faire pour envoyer le paquet au serveur SP? Puisque le r\u00e9seau du serveur SP ne fait pas partie du m\u00eame r\u00e9seau que R0, il faut que celui-ci le confie \u00e0 un autre routeur, et ainsi de suite jusqu'\u00e0  un routeur qui soit dans le r\u00e9seau local du serveur SP, c'est-\u00e0-dire le routeur R5.</p> <p>Pour savoir \u00e0 quel routeur il faut envoyer les paquets de donn\u00e9es, un routeur poss\u00e8de une table de routage: c'est un tableau qui va contenir des informations permettant au routeur d'envoyer le paquet de donn\u00e9es dans la \"bonne direction\".</p> <p>Exemple de table de routage</p> <p>Voici ce qui pourrait \u00eatre un extrait de la table de routage du routeur R0.</p> R\u00e9seau (destination) Interface Passerelle <code>192.168.1.0</code> <code>192.168.1.254</code> <code>112.85.30.0</code> <code>112.85.30.254</code> <code>84.111.10.0</code> <code>112.85.30.254</code> <code>112.85.30.1</code> <p>Les deux r\u00e9seaux <code>192.168.1.0</code> et <code>112.85.30.0</code> sont directement accessibles au routeur R0, puisqu'il en fait partie : il n'a donc pas besoin d'adresse passerelle pour communiquer avec ces r\u00e9seaux.</p> <p>Par contre, la communication avec le r\u00e9seau <code>84.111.10.0</code> n\u00e9cessite de confier le paquet au routeur R3 (c'est le choix de cette table de routage). Il faut donc mentionner l'adresse IP de ce routeur R3 (<code>112.85.30.1</code>), qu'on appelle adresse de passerelle.</p> <p>Notons que cette table est simplifi\u00e9e, on peut pr\u00e9ciser \u00e9galement le masque de sous-r\u00e9seau (netmask) ainsi qu'une m\u00e9trique qui d\u00e9signe le co\u00fbt de la liaison.</p> <p>Comment sont construites les tables de routage ?</p> <ul> <li>Soit \u00e0 la main par l'administrateur r\u00e9seau, quand le r\u00e9seau est petit : on parle alors de table statique.</li> <li>Soit de mani\u00e8re dynamique : les r\u00e9seaux s'envoient eux-m\u00eames des informations permettant de mettre \u00e0 jour leurs tables de routages respectives. Des algorithmes de d\u00e9termination de meilleur chemin sont alors utilis\u00e9s : nous allons en d\u00e9couvrir deux, le protocole RIP et le protocole OSPF.</li> </ul> <p>Tables de routage simplifi\u00e9es</p> <p>Dans certains exercices de BAC, les tables de routage seront r\u00e9duites au strict minimum et contiendront plut\u00f4t des noms de routeurs plut\u00f4t que des adresses IP (voir exercice 2 par exemple).</p>"},{"location":"T05_ArchiMaterielle/T5.1_Routage/T5.1_Protocoles_routage/#2-le-protocole-rip","title":"2. Le protocole RIP","text":"<p> Principe du protocole RIP</p> <p>Le Routing Information Protocol (RIP) est bas\u00e9 sur l'\u00e9change des tables de routage de chaque routeur.</p> <p>Au d\u00e9but, chaque routeur ne conna\u00eet que les r\u00e9seaux auquel il est directement connect\u00e9, associ\u00e9 \u00e0 la distance 1.</p> <p>Ensuite, chaque routeur va recevoir p\u00e9riodiquement (toutes les 30 secondes) la table des routeurs auquel il est connect\u00e9, et mettre \u00e0 jour sa propre table  en ne retenant que les informations les plus pertinentes : une simple comparaison permet de ne garder que le chemin le plus avantageux. Il transmettra \u00e0 son tour ces informations \u00e0 ses voisins et ainsi de suite.</p> <p>Le protocole RIP cherche donc \u00e0 minimiser le nombre de routeurs travers\u00e9s, ce qu'on appelle le nombre de sauts et qui correspond \u00e0 la m\u00e9trique utilis\u00e9e.</p> <p>Si le r\u00e9seau n'\u00e9volue pas (panne ou ajout de nouveau mat\u00e9riel), les tables de routage convergent vers une valeur stable : elles n'\u00e9voluent plus.</p> <p>Si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16.</p> <p>Remarques et inconv\u00e9nients:</p> <ul> <li>Le protocole RIP n'admet qu'une distance maximale \u00e9gale \u00e0 15 (ceci explique que 16 soit consid\u00e9r\u00e9 comme la distance infinie), ce qui le limite aux r\u00e9seaux de petite taille.</li> <li>Chaque routeur n'a jamais connaissance de la topologie du r\u00e9seau tout entier : il ne le conna\u00eet que par ce que les autres routeurs lui ont racont\u00e9. On dit que ce protocole de routage est du routing by rumor.</li> </ul> <p>Exercice  1 : RIP d\u00e9branch\u00e9</p> \u00c9nonc\u00e9Correction <p> PDF r\u00e9seau </p> <ol> <li>Construire pas \u00e0 pas les tables de routage du r\u00e9seau de l'h\u00f4pital.</li> <li>Le serveur SP doit transmettre des donn\u00e9es au service de radiologie en effectuant le moins de sauts possibles. Citer les routeurs parcourus par le paquet.</li> <li> <p>Suite \u00e0 une op\u00e9ration de maintenance, le routeur R1 est d\u00e9connect\u00e9. Plus aucun paquet ne peut transiter par ce routeur. </p> <p>D\u00e9terminer une nouvelle route emprunt\u00e9e par les paquets en citant les routeurs dans l'ordre.</p> </li> </ol> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>On donne les tables de routage d'un r\u00e9seau informatique compos\u00e9 de 5 routeurs (appel\u00e9s A, B, C, D et E), chacun associ\u00e9 directement \u00e0 un r\u00e9seau du m\u00eame nom, obtenues avec le protocole RIP :</p> Routeur ARouteur BRouteur CRouteur DRouteur E Destination M\u00e9trique A 0 B 1 C 1 D 1 E 2 Destination M\u00e9trique A 1 B 0 C 2 D 1 E 2 Destination M\u00e9trique A 1 B 2 C 0 D 1 E 2 Destination M\u00e9trique A 1 B 1 C 1 D 0 E 1 Destination M\u00e9trique A 2 B 2 C 2 D 1 E 0 <ol> <li>Donner la liste des routeurs avec lesquels le routeur A est directement reli\u00e9.</li> <li>Repr\u00e9senter graphiquement et de mani\u00e8re sommaire les 5 routeurs ainsi que les liaisons existantes entre ceux-ci.</li> <li>On \u00e9tablit d\u00e9sormais une liaison entre les routeurs C et E. Actualiser les tables de routages des 5 routeurs.</li> <li>Le routeur D tombe en panne. Actualiser les tables de routages des routeurs restants.</li> </ol>"},{"location":"T05_ArchiMaterielle/T5.1_Routage/T5.1_Protocoles_routage/#3-le-protocole-ospf","title":"3. Le protocole OSPF","text":"<p>Le protocole RIP ne  tient pas compte de la qualit\u00e9 de la liaison, contrairement au protocole OSPF.</p> <p>Principe du protocole OSPF</p> <p>Le protocole OSPF (Open Shortest Path First) propose une approche tout \u00e0 fait diff\u00e9rente : au lieu de s'int\u00e9resser au nombre de sauts, on va chercher \u00e0 optimiser le d\u00e9bit des liaisons emprunt\u00e9es. Pour cela, chaque routeur va devoir acqu\u00e9rir (par succession de messages envoy\u00e9s et re\u00e7us) la connaissance de  l'int\u00e9gralit\u00e9 du r\u00e9seau avec le d\u00e9bit associ\u00e9 \u00e0 chaque lien afin d'appliquer un algorithme de recherche de chemin optimal.</p> <p>L'id\u00e9e du protocole OSPF est de pond\u00e9rer chaque trajet entre routeurs (comptant simplement pour \u00ab1\u00bb dans le protocole RIP) par une valeur de co\u00fbt inversement proportionnelle \u00e0 la bande passante de la liaison.</p> <p>Par exemple, si la bande passante \\(BP\\) est exprim\u00e9e en bits/s, on peut calculer le co\u00fbt \\(C\\) de chaque liaison par la formule :</p> \\[C = \\frac{10^8}{BP}\\] <p>Les diff\u00e9rents types de liaison et leur co\u00fbt</p> <p>On peut, approximativement, classer les types de liaison suivant ce tableau th\u00e9orique :</p> Technologie BP descendante BP montante Modem 56 kbit/s 48 kbit/s Bluetooth 3 Mbit/s 3 Mbit/s Ethernet 10 Mbit/s 10 Mbit/s Wi-Fi 10 Mbit/s ~ 10 Gbits/s 10 Mbit/s ~ 10 Gbits/s ADSL 13 Mbit/s 1 Mbit/s 4G 100 Mbit/s 50 Mbit/s Satellite 50 Mbit/s 1 Mbit/s Fast Ethernet 100 Mbit/s 100 Mbit/s FFTH (fibre) 10 Gbit/s 10 Gbit/s 5G 20 Gbit/s 10 Gbit/s ExempleSolution <p>Dans le r\u00e9seau suivant, selon le protocole RIP, pour que l'ordinateur joigne le serveur, il faut emprunter le chemin R1 \u2192 R3... </p> <p>Est-ce toujours le cas avec le protocole OSPF?</p> <p> </p> <p>Non, il faut d\u00e9sormais emprunter le chemin R1 \u2192 R2 \u2192 R4. Avec OSPF, le plus court n'est pas forc\u00e9ment le plus rapide...</p> <p> </p> <p>D\u00e9terminer le chemin le plus court</p> <p> </p> <p>Avec l'algorithme de Dijkstra, c'est par ici.</p> <p>Exercice  3: calculs de co\u00fbts</p> \u00c9nonc\u00e9Correction <p>Dans cet exercice, on utilise la formule pr\u00e9c\u00e9dente pour calculer le co\u00fbt \\(C\\) d'une liaison en fonction de la bande passante (\\(BP\\)) exprim\u00e9e en bit par seconde:</p> \\[C = \\frac{10^8}{BP}\\] <p>Compl\u00e9ter le tableau suivant :</p> Bande passante 250 Kbits/s 500 Kbits/s 100 Mbits/s Co\u00fbt 1000 10 2.5 <p>Exercice  4</p> \u00c9nonc\u00e9Correction <p>On reprend le r\u00e9seau de l'h\u00f4pital, o\u00f9 l'on va appliquer le protocole OSPF. On donne les bandes passantes et les co\u00fbts des diff\u00e9rentes liaisons dans le tableau suivant:</p> Liaison BP Co\u00fbt Liaison BP Co\u00fbt R0-R1 500 Mbits/s 2 R1-R5 100 Mbits/s 10 R0-R2 100 Mbits/s 10 R2-R4 300 Mbits/s 4 R0-R3 300 Mbits/s 4 R2-R3 400 Mbits/s R1-R2 10 Gbits/s 1 R4-R3 5 R1-R4 100 Mbits/s 10 R4-R5 1 Gbits/s 1 <p>Pour calculer le co\u00fbt d'une liaison, on utilise la formule </p> \\[C = \\frac{10^9}{BP}\\] <p>o\u00f9 \\(BP\\) est la bande passante de la liaison en bits/s.</p> <p>Si le r\u00e9sultat du calcul n'est pas un entier, le co\u00fbt est la valeur enti\u00e8re imm\u00e9diatement sup\u00e9rieure.</p> <ol> <li>Calculer le co\u00fbt de la liaison entre R2 et R3.</li> <li>Donner une bande passante possible de la connexion entre R3 et R4.</li> <li>D\u00e9terminer le chemin parcouru par un paquet partant du serveur patient SP vers le service de radiologie en utilisant le protocole OSPF. Pr\u00e9ciser le co\u00fbt de ce chemin.</li> <li>Suite \u00e0 une op\u00e9ration de maintenance, la liaison R0-R1 est d\u00e9connect\u00e9e: plus aucun paquet ne peut transiter par cette liaison. D\u00e9terminer une nouvelle route emprunt\u00e9e par les paquets en citant les routeurs dans l'ordre.</li> </ol> <p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>On repr\u00e9sente ci-dessous un r\u00e9seau dans lequel R1, R2, R3, R4, R5, R6, R7 et R8 sont des routeurs. Le r\u00e9seau local L1 est reli\u00e9 au routeur R1 et le r\u00e9seau local L2 au routeur R8.</p> <p> </p> <p>Les liaisons sont de trois types :</p> <ul> <li>Eth : Ethernet, dont la bande passante est de 10 Mb/s ;</li> <li>V1 : VDSL, dont la bande passante est de 50 Mb/s ;</li> <li>V2 : VDSL2, dont la bande passante est de 100 Mb/s.</li> </ul> <p>On rappelle que la bande passante d\u2019une liaison est la quantit\u00e9 d\u2019information qui peut \u00eatre transmise en bits/s.</p> <p>Le tableau ci-dessous pr\u00e9cise les types des liaisons entre les routeurs.</p> Liaison R1-R2 R1-R3 R1-R4 R2-R4 R3-R4 R3-R6 R3-R7 Type Eth V2 Eth V2 Eth V2 Eth Liaison R4-R5 R4-R7 R4-R8 R5-R8 R6-R7 R7-R8 Type V1 V2 Eth V1 V2 Eth <p>Pour tenir compte du d\u00e9bit des liaisons, on d\u00e9cide d\u2019utiliser le protocole OSPF (distance li\u00e9e au co\u00fbt minimal des liaisons) pour effectuer le routage.</p> <p>Le co\u00fbt  \\(C\\) d'une liaison est donn\u00e9 par la formule </p> \\[C = \\frac{10^9}{BP}\\] <p>o\u00f9 \\(BP\\) est la bande passante de la liaison en bits/s.</p> <ol> <li>V\u00e9rifier que le co\u00fbt d\u2019une liaison VDSL est \u00e9gal \u00e0 20.</li> <li> <p>Recopier le graphe en inscrivant les co\u00fbts des liaisons.</p> </li> <li> <p>D\u00e9terminer le chemin parcouru par un paquet partant du r\u00e9seau L1 et arrivant au r\u00e9seau L2, en utilisant le protocole OSPF.</p> </li> <li> <p>La liaison R1-R4 est remplac\u00e9e par une liaison de type ADSL avec une bande passante interm\u00e9diaire entre celles de type Ethernet et VDSL.</p> <p>Quel devrait \u00eatre le co\u00fbt maximal de cette liaison pour que des paquets issus du r\u00e9seau L1 \u00e0 destination du r\u00e9seau L2 transitent par celle-ci ? En d\u00e9duire la bande passante minimale de cette liaison.</p> </li> </ol>"},{"location":"T05_ArchiMaterielle/T5.1_Routage/T5.1_Protocoles_routage/#4-exercices-bac","title":"4. Exercices BAC","text":"<p>Exercices Type BAC</p> <p> \u00c9nonc\u00e9 1  \u00c9nonc\u00e9 2  \u00c9nonc\u00e9 3  </p>"},{"location":"T05_ArchiMaterielle/T5.2_Processus/T5.2_Processus/","title":"T5.2 Gestion des processus","text":""},{"location":"T05_ArchiMaterielle/T5.2_Processus/T5.2_Processus/#t52-gestion-des-processus","title":"T5.2 Gestion des processus","text":""},{"location":"T05_ArchiMaterielle/T5.2_Processus/T5.2_Processus/#1-notion-de-processus","title":"1. Notion de processus","text":"<p>Au moment o\u00f9 j'\u00e9cris ce cours sur mon PC de bureau, j'ai plusieurs fen\u00eatres d'ouvertes (petite s\u00e9lection ci-dessous).</p> <p> </p> <p>Chaque fen\u00eatre est l'affichage graphique d'un programme que j'ai \u00ablanc\u00e9\u00bb ou plut\u00f4t ex\u00e9cut\u00e9, par exemple:</p> <ul> <li>un \u00e9diteur pour \u00e9crire le cours</li> <li>un navigateur pour le visualiser, lire mes mails, consulter des pages web pour trouver des ressources, \u00e9couter de la musique...</li> <li>un \u00e9diteur Python rest\u00e9 ouvert apr\u00e8s avoir trouv\u00e9 l'erreur du code de vendredi sur les labyrinthes</li> <li>un visionneur de documents PDF</li> <li>un terminal pour tester les commandes de ce th\u00e8me</li> <li>deux gestionnaires de fichiers</li> </ul> <p>Pour chaque ex\u00e9cution d'un programme sur l'ordinateur, le syst\u00e8me d'exploitation copie le programme dans la RAM \u00e0 une adresse inscrite dans les registres du processeur.  Cette instance d'ex\u00e9cution du programme s'appelle un processus.</p> <p>Processus</p> <p>Un processus est identif\u00e9 par un PID, num\u00e9ro attribu\u00e9 \u00e0 sa cr\u00e9ation par le syst\u00e8me d'exploitation.</p> <p>Un processus est caract\u00e9ris\u00e9 par :</p> <ul> <li>l'ensemble des instructions qu'il va devoir accomplir (\u00e9crites dans le fichier ex\u00e9cutable obtenu par la compilation du code-source du programme)</li> <li>les ressources que le programme va mobiliser (fichier en ouverture, carte son, connexion r\u00e9seau...)</li> <li>l'\u00e9tat des registres du processeur (voir l'architecture de Von Neumann )</li> </ul> <p>Plusieurs processus peuvent \u00eatre associ\u00e9s \u00e0 un m\u00eame programme (c'est le cas du gestionnaire de fichiers sur mon PC), ils occupent alors des espaces m\u00e9moire diff\u00e9rents.</p> <p>Observation des processus sous Linux</p> La commande <code>ps</code>La commande <code>pstree</code>La commande <code>top</code>La commande <code>kill</code> <p>La commande <code>ps</code> (comme process status) permet d'afficher dans un terminal la liste des processus actifs. On l'utilise avec les option <code>l</code> pour obtenir tous les renseignements et <code>u</code> pour pr\u00e9ciser l'utilisateur propri\u00e9taire des processus.</p> <p>Exercice  1</p> <p>Dans un terminal, tapez la commande <code>ps -lu nsi</code> et retrouver le sens des colonnes <code>S</code>, <code>PID</code>, <code>PPID</code> et <code>CMD</code></p> Exemple et signification <ul> <li><code>PID</code> est le process identifier : un entier attribu\u00e9 par le syst\u00e8me d'exploitation</li> <li><code>PPID</code> est le parent process identifier : l'identifiant du parent qui a engendr\u00e9 le processus</li> <li><code>S</code> indique le statut du processus (<code>S</code> pour stopped et <code>R</code> pour running)</li> <li><code>CMD</code> est le nom de la commande qui a cr\u00e9\u00e9 le processus <pre><code>cedric@cedric-PC:~$ ps -lu cedric\nF S   UID     PID    PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n4 S  1000    1310       1  0  80   0 -  4389 ep_pol ?        00:00:00 systemd\n5 S  1000    1311    1310  0  80   0 - 42400 -      ?        00:00:00 (sd-pam)\n0 S  1000    1317    1310  0  69 -11 - 10532 ep_pol ?        00:00:00 pipewire\n0 S  1000    1318    1310  0  80   0 -  6534 ep_pol ?        00:00:00 pipewire-m\n0 S  1000    1319    1310  0  69 -11 - 142331 do_pol ?       00:00:00 pulseaudio\n0 S  1000    1324    1310  0  80   0 -  2258 ep_pol ?        00:00:00 dbus-daemo\n4 S  1000    1326    1305  0  80   0 - 78896 do_pol ?        00:00:00 xfce4-sess\n1 S  1000    1429       1  0  80   0 - 115692 do_pol ?       00:00:00 ibus-daemo\n0 S  1000    1439    1310  0  80   0 - 77383 do_pol ?        00:00:00 at-spi-bus\n0 S  1000    1450    1310  0  80   0 - 60851 do_pol ?        00:00:00 gvfsd\n0 S  1000    1453    1439  0  80   0 -  2142 ep_pol ?        00:00:00 dbus-daemo\n0 S  1000    1457    1310  0  80   0 - 57778 do_pol ?        00:00:00 xfconfd\n0 S  1000    1466    1310  0  80   0 - 40704 do_pol ?        00:00:00 at-spi2-re\n0 S  1000    1468    1310  0  80   0 - 95221 futex_ ?        00:00:00 gvfsd-fuse\n0 S  1000    1474    1429  0  80   0 - 60045 do_pol ?        00:00:00 ibus-dconf\n0 S  1000    1478    1429  0  80   0 - 106103 do_pol ?       00:00:00 ibus-ui-gt\n0 S  1000    1481    1429  1  80   0 - 68816 do_pol ?        00:00:01 ibus-exten\n0 S  1000    1485       1  0  80   0 - 49190 do_pol ?        00:00:00 ibus-x11\n0 S  1000    1487    1310  0  80   0 - 58199 do_pol ?        00:00:00 xfce4-scre\n0 S  1000    1491    1310  0  80   0 - 60024 do_pol ?        00:00:00 ibus-porta\n0 S  1000    1528    1310  0  80   0 - 101344 do_pol ?       00:00:00 xdg-deskto\n1 S  1000    1538       1  0  80   0 - 97827 do_pol ?        00:00:00 gnome-keyr\n0 S  1000    1541    1326  1  80   0 - 117383 do_pol ?       00:00:00 xfwm4\n0 S  1000    1563    1310  0  80   0 - 116509 do_pol ?       00:00:00 xdg-docume\n0 S  1000    1570    1310  0  80   0 - 59709 do_pol ?        00:00:00 xdg-permis\n0 S  1000    1579    1310  0  80   0 - 86782 do_pol ?        00:00:00 xdg-deskto\n0 S  1000    1592    1429  0  80   0 - 41586 do_pol ?        00:00:00 ibus-engin\n0 S  1000    1609    1326  0  80   0 - 58769 do_pol ?        00:00:00 xfsettings\n0 S  1000    1647    1326  0  80   0 - 118593 do_pol ?       00:00:00 xfce4-pane\n0 S  1000    1651    1326  0  80   0 - 86365 do_pol ?        00:00:00 Thunar\n0 S  1000    1656    1326  0  80   0 - 123972 do_pol ?       00:00:00 xfdesktop\n0 S  1000    1666    1326  0  80   0 - 87346 do_pol ?        00:00:00 xfce4-clip\n0 S  1000    1670    1310  0  99  19 - 142146 do_pol ?       00:00:00 tumblerd\n1 S  1000    1671       1  0  80   0 -  3225 do_pol ?        00:00:00 xcape\n0 S  1000    1674    1326  0  80   0 - 124064 do_pol ?       00:00:00 update-not\n0 S  1000    1676    1326  0  80   0 - 47524 do_pol ?        00:00:00 polkit-gno\n0 S  1000    1680    1326  0  80   0 - 15702 do_pol ?        00:00:00 applet.py\n0 S  1000    1685    1326  0  80   0 - 126155 do_pol ?       00:00:00 nm-applet\n0 S  1000    1686    1326  0  80   0 - 59959 do_pol ?        00:00:00 agent\n0 S  1000    1689    1326  0  80   0 - 49261 do_pol ?        00:00:00 xfce4-powe\n0 S  1000    1698    1326  0  80   0 - 126367 do_pol ?       00:00:00 kdeconnect\n0 S  1000    1712    1326  0  80   0 - 195837 do_pol ?       00:00:00 xiccd\n0 S  1000    1735    1326  0  80   0 - 63761 do_pol ?        00:00:00 ayatana-in\n0 S  1000    1737    1310  0  80   0 - 66229 do_pol ?        00:00:00 xfce4-noti\n0 S  1000    1765    1310  0  80   0 - 79720 do_pol ?        00:00:00 gvfs-udisk\n0 S  1000    1782    1310  0  80   0 - 59848 do_pol ?        00:00:00 gvfs-goa-v\n0 S  1000    1787    1310  0  80   0 - 79491 do_pol ?        00:00:00 gvfs-afc-v\n0 S  1000    1792    1310  0  80   0 - 59797 do_pol ?        00:00:00 gvfs-mtp-v\n0 S  1000    1798    1310  0  80   0 - 60069 do_pol ?        00:00:00 gvfs-gphot\n0 S  1000    1809    1647  0  80   0 - 101142 do_pol ?       00:00:00 panel-12-i\n0 S  1000    1810    1647  0  80   0 - 149060 do_pol ?       00:00:00 panel-30-p\n0 S  1000    1811    1647  0  80   0 - 86407 do_pol ?        00:00:00 panel-31-s\n4 S  1000    2068    1647  4  80   0 - 9593857 do_pol ?      00:00:01 code\n0 S  1000    2071    2068  0  80   0 - 8439921 do_pol ?      00:00:00 code\n4 S  1000    2072    2068  0  80   0 - 8439919 do_wai ?      00:00:00 code\n1 S  1000    2074    2072  0  80   0 - 8439919 do_pol ?      00:00:00 code\n0 S  1000    2087       1  0  80   0 - 8393934 ep_pol ?      00:00:00 chrome_cra\n1 S  1000    2102    2071  4  80   0 - 8489213 do_pol ?      00:00:01 code\n1 S  1000    2111    2102  0  80   0 - 8455671 skb_wa ?      00:00:00 code\n0 S  1000    2118    2068  0  80   0 - 8454311 futex_ ?      00:00:00 code\n0 S  1000    2139    2068 19  80   0 - 14278157 futex_ ?     00:00:08 code\n0 S  1000    2175    2068  6  80   0 - 9542674 ep_pol ?      00:00:02 code\n0 S  1000    2189    2068  7  80   0 - 11655640 futex_ ?     00:00:02 code\n0 S  1000    2203    2189  1  80   0 - 9542663 ep_pol ?      00:00:00 code\n0 S  1000    2240    2189  0  80   0 - 9542629 ep_pol ?      00:00:00 code\n4 S  1000    2248    1647 18  80   0 - 761314 do_pol ?       00:00:07 firefox\n4 S  1000    2318    2248  0  80   0 - 50981 do_pol ?        00:00:00 Socket Pro\n4 S  1000    2363    2248  0  80   0 - 601385 do_pol ?       00:00:00 Privileged\n4 S  1000    2404    2248  3  80   0 - 4857744 do_pol ?      00:00:01 WebExtensi\n4 S  1000    2448    2248  2  80   0 - 618721 do_pol ?       00:00:00 Isolated W\n0 S  1000    2513    2203  0  80   0 -  3492 do_sel pts/0    00:00:00 bash\n0 S  1000    2530    2203  0  80   0 -  3492 do_wai pts/1    00:00:00 bash\n0 S  1000    2581    2530 35  80   0 - 180036 futex_ pts/1   00:00:09 mkdocs\n4 S  1000    2607    2248  0  80   0 - 601744 do_pol ?       00:00:00 Web Conten\n4 S  1000    2610    2248  9  80   0 - 1729401 do_pol ?      00:00:02 Isolated W\n4 S  1000    2692    2248  0  80   0 - 599832 do_pol ?       00:00:00 Web Conten\n4 S  1000    2722    2248  0  80   0 - 599832 do_pol ?       00:00:00 Web Conten\n0 S  1000    2767    2175  1  80   0 - 9530216 ep_pol ?      00:00:00 code\n0 S  1000    2785    1310  1  80   0 - 155025 do_pol ?       00:00:00 gcr-prompt\n4 S  1000    2904    2248  2  80   0 - 599832 do_pol ?       00:00:00 Web Conten\n0 S  1000    2928       1  0  80   0 - 10643 hrtime ?        00:00:00 xfce4-mime\n0 R  1000    2929    2928  6  80   0 - 137689 -     ?        00:00:00 xfce4-term\n0 S  1000    2952    2929  0  80   0 -  3486 do_wai pts/2    00:00:00 bash\n4 R  1000    2958    2952  0  80   0 -  3827 -      pts/2    00:00:00 ps\n</code></pre></li> </ul> <p>La commande <code>pstree</code> permet d'afficher dans un terminal la liste des processus actifs sous forme d'arborescence.</p> <p>Exercice  2</p> <p>Testez.</p> <p>La commande <code>top</code> permet de conna\u00eetre en temps r\u00e9el la liste des processus, class\u00e9s par ordre d\u00e9croissant de consommation de CPU (en pourcentage).</p> <p>On ferme <code>top</code> par la combinaison de touches <code>Ctrl-C</code>.</p> <p>Exercice  3</p> <p>Testez.</p> <p>Lorsqu'un programme ne r\u00e9pond plus, ou bien qui consomme beaucoup trop de ressources, on peut forcer son arr\u00eat \u00e0 l'aide de la commande <code>kill</code> (avec \u00e9ventuellement l'option <code>-9</code> si vraiment besoin).</p> <p> </p> <p>Exercice  4</p> <p>Combien de processus ai-je arr\u00eat\u00e9 avec <code>kill 2248</code> ? </p> <p>Les \u00e9tats d'un processus</p> <p>De sa cr\u00e9ation jusqu'\u00e0 sa terminaison, un processus peut se trouver dans 3 \u00e9tats : pr\u00eat, \u00e9lu ou bloqu\u00e9.</p> <ul> <li>pr\u00eat : le processus attend l'acc\u00e8s au processeur pour \u00eatre trait\u00e9;</li> <li>\u00e9lu: le processus a obtenu l'acc\u00e8s au processeur, il est en cours d'ex\u00e9cution;</li> <li>bloqu\u00e9: pendant son ex\u00e9cution, le processus attend une ressource non imm\u00e9diatement disponible. Son ex\u00e9cution s'interrompt. Lorsque la ressource sera disponible, le processus repassera par l'\u00e9tat Pr\u00eat et attendra \u00e0 nouveau son tour.</li> </ul> <p>Les processus passent d'un \u00e9tat \u00e0 un autre selon le sch\u00e9ma (\u00e0 conna\u00eetre) suivant:</p> <p> </p>"},{"location":"T05_ArchiMaterielle/T5.2_Processus/T5.2_Processus/#2-lordonnancement","title":"2. L'ordonnancement","text":"<p>Lorsqu'on utilise un ordinateur, on a l'impression que tous les processus en cours s'ex\u00e9cutent en parall\u00e8le: on peut t\u00e9l\u00e9charger un document sur le web avec son navigateur pendant qu'on \u00e9coute de la musique avec un lecteur de musique et qu'on s'entra\u00eene \u00e0 l'\u00e9preuve pratique de NSI avec Thonny...</p> <p>Or un programme n'\u00e9tant ni plus ni moins qu'une s\u00e9rie d'instructions en langage machine, un processeur ne peut en ex\u00e9cuter qu'une \u00e0 la fois. Comment le syst\u00e8me d'exploitation fait-il alors pour g\u00e9rer une ex\u00e9cution concurrente des processus (dont les temps d'ex\u00e9cution se chevauchent), c'est-\u00e0-dire d\u00e9cider quel processus doit \u00eatre \u00e9lus, pr\u00eats, bloqu\u00e9s?</p> <p>Dans un syst\u00e8me d'exploitation, c'est le r\u00f4le de l'ordonnanceur  de g\u00e9rer les \u00e9tats des processus et de d\u00e9cider quel processus doit \u00eatre trait\u00e9 \u00e0 quel moment.</p> <p>Le sch\u00e9ma ci-dessous (issu de ce site) pr\u00e9sente quelques politiques d'ordonnancement :</p> <p></p> <p>Dans le cas (tr\u00e8s fr\u00e9quent maintenant) d'un processeur multi-c\u0153urs, le probl\u00e8me reste identique. Certes, sur 4 c\u0153urs, 4 processus pourront \u00eatre trait\u00e9s simultan\u00e9ment (une r\u00e9elle simultan\u00e9it\u00e9) mais il reste toujours beaucoup plus de processus \u00e0 traiter que de c\u0153urs dans le processeur... et un ordonnancement est donc toujours n\u00e9cessaire.</p> <p>Exemples de politiques d'ordonnancement</p> <p>On consid\u00e8re une situation o\u00f9 quatre processus C\u2081, C\u2082, C\u2083 et C\u2084 sont cr\u00e9\u00e9s sur un ordinateur, et o\u00f9 aucun autre processus n\u2019est lanc\u00e9 sur celui-ci, ni pr\u00e9alablement ni pendant l\u2019ex\u00e9cution des quatre processus.</p> <p>On suppose que les quatre processus arrivent dans la file et y sont plac\u00e9s dans l\u2019ordre C\u2081, C\u2082, C\u2083 et C\u2084.</p> <ul> <li>Les temps d\u2019ex\u00e9cution totaux de C\u2081, C\u2082, C\u2083 et C\u2084 sont respectivement 100 ms, 150 ms, 80 ms et 60 ms.</li> <li>Apr\u00e8s 40 ms d\u2019ex\u00e9cution, le processus C\u2081 demande une op\u00e9ration d\u2019\u00e9criture disque, op\u00e9ration qui dure 200 ms. Pendant cette op\u00e9ration d\u2019\u00e9criture, le processus C\u2081 passe \u00e0 l\u2019\u00e9tat bloqu\u00e9.</li> <li>Apr\u00e8s 20 ms d\u2019ex\u00e9cution, le processus C\u2083 demande une op\u00e9ration d\u2019\u00e9criture disque, op\u00e9ration qui dure 10 ms. Pendant cette op\u00e9ration d\u2019\u00e9criture, le processus C\u2083 passe \u00e0 l\u2019\u00e9tat bloqu\u00e9.</li> </ul> Plus court d'abord (Shortest Job First)Premier arriv\u00e9, premier servi (First Come, First Serve)Tourniquet (Round Robin) <p>Principe: comme son nom l'indique, on \u00e9lit les processus par ordre croissant d'ex\u00e9cution. Efficace, mais il est en pratique la plupart du temps impossible de pr\u00e9voir \u00e0 l'avance le temps d'ex\u00e9cution d'un processus.</p> <p> </p> <p>Principe: les processus sont g\u00e9r\u00e9s dans une file par ordre de cr\u00e9ation. Une fois bloqu\u00e9s ou termin\u00e9s, ils sont d\u00e9fil\u00e9s, et enfil\u00e9s s'ils passent \u00e0 nouveau \u00e0 l'\u00e9tat pr\u00eat. Simple, mais peu adapt\u00e9 \u00e0 la plupart des situations.</p> <p> </p> <p>Principe: un quantum de temps est allou\u00e9 \u00e0 chaque processus. Si le processus n'est pas termin\u00e9 au bout de ce temps, il est mis en bout de file en \u00e9tat pr\u00eat.</p> <p> </p> <p>Sous Linux, l'ordonnancement est effectu\u00e9 par un syst\u00e8me hybride o\u00f9 les processus sont ex\u00e9cut\u00e9s \u00e0 tour de r\u00f4le (sur un mod\u00e8le tourniquet / Round Robin) suivant un ordre de priorit\u00e9 dynamique.</p>"},{"location":"T05_ArchiMaterielle/T5.2_Processus/T5.2_Processus/#3-interblocage-deadlock","title":"3. Interblocage (deadlock)","text":"<p>Comme nous venons de le voir, un processus peut \u00eatre dans l'\u00e9tat bloqu\u00e9 dans l'attente de la lib\u00e9ration d'une ressource.</p> <p>Ces ressources (l'acc\u00e8s en \u00e9criture \u00e0 un fichier, \u00e0 un registre de la m\u00e9moire...) ne peuvent \u00eatre donn\u00e9es \u00e0 deux processus \u00e0 la fois. Des processus souhaitant acc\u00e9der \u00e0 cette ressource sont donc en concurrence sur cette ressource. Un processus peut donc devoir attendre qu'une ressource se lib\u00e8re avant de pouvoir y acc\u00e9der (et ainsi passer de l'\u00e9tat bloqu\u00e9 \u00e0 l'\u00e9tat pr\u00eat).</p> <p>Situation critique</p> <p>Imaginons deux processus A et B, dont les \u00e9tapes d'ex\u00e9cution n\u00e9cessitent l'acc\u00e8s \u00e0 deux ressources A et B selon le sch\u00e9ma suivant:</p> <p> </p> D\u00e9roul\u00e9BilanSch\u00e9ma <p>\u00c9crire le d\u00e9roulement de ces processus, en supposant qu'ils ne r\u00e9alisent qu'une \u00e9tape \u00e0 l'\u00e9tat \u00e9lu avant interruption par l'ordonnanceur.</p> <p>Les deux processus A et B sont donc dans l'\u00e9tat bloqu\u00e9, chacun en attente de la lib\u00e9ration d'une ressource bloqu\u00e9e par l'autre : ils se bloquent mutuellement.</p> <p>Cette situation (critique) est appel\u00e9e interblocage ou deadlock.</p> <p>On repr\u00e9sente les processus par ces cercles, et les ressources par des carr\u00e9s.</p> <ul> <li>Si un processus a demand\u00e9 et obtenu une ressource, on trace un arc de la ressouce vers le processus;</li> <li>Si un processus est en attente d'une ressource, on trace un arc du processus vers la ressource.</li> </ul> <p>Dans le cas pr\u00e9sent, on obtient ce sch\u00e9ma:</p> <p> </p> <p>La pr\u00e9sence d'un cycle dans ce sch\u00e9ma caract\u00e9rise la situation d'interblocage.</p>"},{"location":"T05_ArchiMaterielle/T5.2_Processus/T5.2_Processus/#4-exercices","title":"4. Exercices","text":"<p>Exercice  5</p> \u00c9nonc\u00e9Correction <p>Sept processus P1 \u00e0 P7 sont dans la situation suivante par rapport aux ressources R1 \u00e0 R6:</p> <ul> <li>P1 a obtenu R1 et demande R2;</li> <li>P2 deamnde R3 et n'a obtenu aucune ressource tout comme P3 qui demande R2;</li> <li>P4 a obtenu R2 et R4 et demande R3;</li> <li>P5 a obtenu R3 et demande R5;</li> <li>P6 a obtenu R6 et demande R2;</li> <li>P7 a obtenu R5 et demande R2.</li> </ul> <p>D\u00e9terminer \u00e0 l'aide d'un sch\u00e9ma s'il y a interblocage dans cette situation.</p> <p>Exercices Type BAC</p> <p> \u00c9nonc\u00e9 1  \u00c9nonc\u00e9 2  </p>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/","title":"T5.3 Cryptographie","text":""},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#t53-cryptographie","title":"T5.3 Cryptographie","text":""},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#1-chiffrement-symetrique","title":"1. Chiffrement sym\u00e9trique","text":"<p>Br\u00e8ve historique de la cryptographie</p> <p>La cryptographie est la discipline qui consiste \u00e0 chiffrer et d\u00e9chiffrer des messages afin de les prot\u00e9ger en les rendant secrets. La cryptanalyse est la discpline qui analyse les messages chiffr\u00e9s (appel\u00e9s aussi cryptogrammes) afin de les d\u00e9chiffrer.</p> <p> </p> <p>On trouve des utilisations de cryptographie depuis l'antiquit\u00e9, comme par exemple l'utilisation d'une scytale ou encore le c\u00e9l\u00e8bre  chiffre de C\u00e9sar vu en classe de premi\u00e8re qui consiste \u00e0 effectuer un d\u00e9calage des lettres du message, d'un nombre de lettres fix\u00e9 \u00e0 l'avance qui constitue la cl\u00e9 du syst\u00e8me.</p> <p>Bien d'autres proc\u00e9d\u00e9s ont \u00e9t\u00e9 invent\u00e9s par la suite (lire \u00e0 ce sujet l'excellent Histoire des codes secrets, de Simon Singh, Le Livre de Poche, disponible \u00e0 la m\u00e9diath\u00e8que du lyc\u00e9e) \u00e0 des fins bien souvent militaires qui n\u00e9cessitaient une grande confidentialit\u00e9...</p> <p> </p> <p>En 1586 Blaise de Vig\u00e8nere  met au pont un chiffrement polyalphab\u00e9tique qui r\u00e9sistera pr\u00e8s de 3 si\u00e8cles. Le principe est de choisir une cl\u00e9 (par exemple NSI) et d'utiliser successivement un chiffre de C\u00e9sar avec N pour la premi\u00e8re lettre, puis un chiffre de C\u00e9sar avec S pour la deuxi\u00e8me lettre, puis avec I pour la troisi\u00e8me, puis avec N pour la quatri\u00e8me, puis avec S pour la cinqui\u00e8me, etc.</p> <p>Au XX-\u00e8me si\u00e8cle, l'av\u00e8nement de l'ordinateur et de sa puissance de calcul a motiv\u00e9 de nombreuses recherches et d\u00e9couvertes dans le domaine de la cryptographie pour r\u00e9ussir \u00e0 s\u00e9curiser non seulement les secrets militaires, mais \u00e9galement les transactions bancaires et plus g\u00e9n\u00e9ralement l'\u00e9change de nos donn\u00e9es personnelles sur le web...</p> <p>Principe d'un chiffrement</p> <p>Un chiffrement est la transformation - \u00e0 l'aide d'un algorithme - d'un texte clair en un texte incompr\u00e9hensible, dit chiffr\u00e9, \u00e0 l'aide d'une cl\u00e9 de chiffrement.</p> <p> </p> <p>L'algorithme est la plupart du temps connu, et la s\u00e9curit\u00e9 du chiffrement doit r\u00e9sider dans le secret de la cl\u00e9 (Principe de Kerckhoffs).</p> <p>Cette cl\u00e9 peut \u00eatre la m\u00eame pour chiffrer et d\u00e9chiffrer: on parle alors de chiffrement  sym\u00e9trique. Si la cl\u00e9 de chiffrement et la cl\u00e9 de d\u00e9chiffrement sont diff\u00e9rentes, on parle de chiffrement asym\u00e9trique.</p> <p>En pratique la cl\u00e9 est un nombre ou une fonction math\u00e9matique. Mais c'est parfois un texte ou une image...</p> <p>Exercice  1: chiffre de C\u00e9sar</p> \u00c9nonc\u00e9Correction <ol> <li>Combien de cl\u00e9s diff\u00e9rentes existe-t-il pour le chiffre de C\u00e9sar?</li> <li> <p>Compl\u00e9ter le code suivant (utiliser les fonctions <code>ord</code> et <code>chr</code> pour la fonction <code>decale</code>):</p> <pre><code>def decale(lettre:str, cle:int) -&gt; str:\n    '''\n    D\u00e9cale une lettre majuscule de cle rangs dans l'alphabet.\n    '''\n    rang = ...(lettre) - ...(...)\n    rang = (rang + ...) % ...\n    return ...(rang)\n\n\ndef chiffre_cesar(phrase:str, cle:int) -&gt; str:\n    '''\n    Chiffre le texte phrase avec la cl\u00e9 cle et renvoie le texte chiffr\u00e9\n    '''\n    texte_chiffre = \"\"\n    for ... in ...:\n        texte_chiffre += ...\n    return texte_chiffre\n</code></pre> </li> <li> <p>D\u00e9chiffrer le message suivant:</p> <p><code>'PRZRFFNTRARPBAGVRAGEVRAQVAGRERFFNAGZNVFVYRFGFHSSVFNZRAGYBATCBHEDHRPRFBVGCRAVOYRQRYRQRPUVSSERENYNZNVA'</code> </p> </li> </ol> <ol> <li>Il existe 26 cl\u00e9s, ou plut\u00f4t 25 (si on exclut la cl\u00e9 0 qui ne cr\u00e9e aucun d\u00e9calage).</li> <li> <p>On obtient un message lisible avec une cl\u00e9 \u00e9gale \u00e0 13:</p> <pre><code>def decale(lettre:str, cle:int) -&gt; str:\n    '''\n    D\u00e9cale une lettre majuscule de cle rangs dans l'alphabet.\n    '''\n    rang = ord(lettre) - ord('A')\n    rang = (rang + cle) % 26 + ord('A')\n    return chr(rang)\n\n\ndef chiffre_cesar(phrase:str, cle:int) -&gt; str:\n    '''\n    Chiffre le texte phrase avec la cl\u00e9 cle et renvoie le texte chiffr\u00e9\n    '''\n    texte_chiffre = \n    for lettre in phrase:\n        texte_chiffre += decale(lettre, cle)\n    return texte_chiffre\n\nmsg_chiffre = 'PRZRFFNTRARPBAGVRAGEVRAQVAGRERFFNAGZNVFVYRFGFHSSVFNZRAGYBATCBHEDHRPRFBVGCRAVOYRQRYRQRPUVSSERENYNZNVA'\nfor cle in range(1, 26):\n    print(cle, chiffre_cesar(msg_chiffre, cle))\n</code></pre> <p>Plus intelligent, si on souhaite \u00e9viter de lire des messages inutiles, on peut utiliser un principe simple d'analyse de fr\u00e9quences : on mise sur le fait que la lettre la plus fr\u00e9quente dans le message clair sera le E, donc on compte le nombre de E dans chaque message, et on n'affiche que celui qui en comporte le plus (c'est une \u00absimple\u00bb recherche de maximum, une fois de plus).</p> <pre><code>msg_chiffre = 'PRZRFFNTRARPBAGVRAGEVRAQVAGRERFFNAGZNVFVYRFGFHSSVFNZRAGYBATCBHEDHRPRFBVGCRAVOYRQRYRQRPUVSSERENYNZNVA'\nnbE_max = 0\nfor cle in range(1, 26):\n    nbE = chiffre_cesar(msg_chiffre, cle).count('E')\n    if nbE &gt; nbE_max:\n        nbE_max = nbE\n        cle_probable = cle\nprint(cle_probable, chiffre_cesar(msg_chiffre, cle_probable))\n</code></pre> </li> </ol> <p>Exercice  2: masque jetable ou chiffre de Vernam</p> \u00c9nonc\u00e9Correction <p>Dans le DL 0001, on a vu le principe du chiffre de Vernam, plus commun\u00e9ment appel\u00e9 masque jetable.</p> <p>On y avait \u00e9tabli les fonctions:</p> <pre><code>def xor(a:str, b:str) -&gt; str:\n    '''\n    Renvoie le r\u00e9sultat d'un XOR (ou exclusif) entre les caract\u00e8res\n    a et b, apr\u00e8s conversion en code Unicode\n    '''\n    return chr(ord(a) ^ ord(b))\n\ndef masque_jetable(chaine:str, cle:str) -&gt; str:\n    '''\n    Chiffre la chaine de caract\u00e8re chaine selon le chiffre de\n    Vernam avec la cl\u00e9 cle.\n    '''\n    texte_chiffre = ''\n    for k in range(len(chaine)):\n        texte_chiffre += xor(chaine[k], cle[k%len(cle)])\n    return texte_chiffre\n</code></pre> <p>D\u00e9chiffrer le message : <code>\"\\x0c!(8&lt;en\\x12%/=i\\x1a&amp;;'=.n ,&lt;2 :s/'6;n7,n%&amp;; h\"</code> sachant que la cl\u00e9 comporte trois lettres majuscules et que c'est moi qui l'ai choisie...</p> <pre><code>&gt;&gt;&gt; masque_jetable(\"\f!(8&lt;en\u0012%/=i\u001a&amp;;'=.n ,&lt;2 :s/'6;n7,n%&amp;; h\", \"NSI\")\n'Bravo, Alan Turing serait fier de vous!'\n</code></pre> <p>Dans le cas du masque jetable, si la cl\u00e9 (le masque) est aussi longue que le texte clair, alors il est impossible de retrouver le texte initial! En revanche, il faut imp\u00e9rativement changer le masque \u00e0 chaque utilisation (d'o\u00f9 le terme jetable).</p> <p>Avantage et inconv\u00e9nient d'un chiffrement sym\u00e9trique</p> <ul> <li> <p>Avantage: Les chiffrements sym\u00e9triques sont souvent rapides, consommant peu de ressources et donc adapt\u00e9s au chiffrement de flux important d'informations.</p> <p>Comme nous le verrons, la s\u00e9curisation des donn\u00e9es transitant par le protocole https est bas\u00e9e sur un chiffrement sym\u00e9trique.</p> </li> <li> <p>Inconv\u00e9nient: La cl\u00e9 ! Si deux personnes (Alice et Bob dans la suite du cours) ont besoin d'utiliser un chiffrement pour se parler, comment peuvent-ils \u00e9changer leurs cl\u00e9s puisque leur canal de transmission n'est pas s\u00fbr ?</p> <p>Le chiffrement sym\u00e9trique impose qu'Alice et Bob aient pu se rencontrer physiquement au pr\u00e9alable pour convenir d'une cl\u00e9 secr\u00e8te, ou bien qu'ils aient r\u00e9ussi \u00e0 \u00e9tablir une connexion s\u00e9curis\u00e9e pour s'\u00e9changer cette cl\u00e9.</p> </li> </ul>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#quels-sont-les-chiffrements-symetriques-modernes","title":"Quels sont les chiffrements sym\u00e9triques modernes ?","text":"<p>L'algorithme de chiffrement sym\u00e9trique le plus utilis\u00e9 actuellement est le chiffrement AES, pour Advanced Encryption Standard.</p> <ul> <li>chiffrement par bloc de 128 bits, r\u00e9partis dans une matrice de 16 octets (matrice carr\u00e9e de taille 4).</li> <li>ces 128 bits sont transform\u00e9s par des rotations, multiplications, transpositions, [...] de la matrice initiale, en faisant intervenir dans ces transformations une cl\u00e9 de 128, 192 ou 256 bits.</li> <li>pour l'AES-256 (avec une cl\u00e9 de 256 bits), l'attaque par force brute n\u00e9cessiterait \\(2^{256}\\) op\u00e9rations, soit un nombre \u00e0 78 chiffres...</li> <li>il n'existe pas d'attaque connue efficace \u00e0 ce jour. Les seules attaques sont des attaques sur des faiblesses d'impl\u00e9mentation, ou par canal auxiliaire.</li> </ul>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#2-chiffrement-asymetrique","title":"2. Chiffrement asym\u00e9trique","text":"<p>Bien que certains chiffrements sym\u00e9triques sont efficaces, ils sont vuln\u00e9rables si la cl\u00e9 est connue puisqu'elle sert \u00e9galement \u00e0 d\u00e9chiffrer. Parfois la cl\u00e9 de d\u00e9chiffrement n'est pas exactement la m\u00eame (comme dans le chiffre de C\u00e9sar, o\u00f9 si \\(n\\) est la cl\u00e9 pour chiffrer alors on d\u00e9chiffre avec \\(-n\\) ou \\(26-n\\)) mais elle se d\u00e9duit de fa\u00e7on tr\u00e8s simple de la cl\u00e9 de chiffrement.</p> <p>Pour r\u00e9soudre le probl\u00e8me de l'\u00e9change des cl\u00e9s, Whitfield Diffie et Martin Hellman (chercheurs \u00e0 Stanford) proposent en 1976 un protocole qui repose en partie sur une information connue de tous et en partie sur une information gard\u00e9e secr\u00e8te par Alice et Bob...</p> <p> </p> <p></p> Photo de Whitfield Diffie (\u00e0 droite), Martin Hellman (au centre) et Ralph Merkle (\u00e0 gauche) prise en 1977  Cr\u00e9dit: Stanford News Service <p></p>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#21-echange-de-cles-de-diffie-hellman","title":"2.1 \u00c9change de cl\u00e9s de Diffie-Hellman","text":"<p>Principe</p> <p>L'analogie la plus courante pour illustrer le protocole d'\u00e9change de cl\u00e9s de Diffie-Hellman est celui des pots de peinture: il est facile de m\u00e9langer deux peintures de couleurs diff\u00e9rentes mais le contraire est impossible.</p> <p> </p> \u00c9tape 1\u00c9tape 2\u00c9tape 3\u00c9tape 4 <p>Alice et Bob s'entendent sur une couleur (le jaune) et se la partagent publiquement.</p> <p>Alice et Bob choisissent secr\u00e8tement chacun une couleur: le magenta pour Alice et le cyan pour Bob, puis ils m\u00e9langent leur couleur avec la couleur commune.</p> <p>Ils s'\u00e9changent publiquement les couleurs obtenues (orange et bleu). M\u00eame si \u00c8ve intercepte ces couleurs, elle ne peut pas les s\u00e9parer!</p> <p>Alice m\u00e9lange sa couleur secr\u00e8te (magenta) avec le m\u00e9lange de Bob, et Bob fait de m\u00eame avec la sienne et le m\u00e9lange d'Alice. Au final, ils obtiennent le m\u00eame m\u00e9lange: c'est la cl\u00e9 !</p> <p>En pratique, on n'utilise pas des pots de peinture (\u00e7a ne passe pas par la fibre ou la wifi) mais des fonctions math\u00e9matiques et des nombres entiers (tr\u00e8s grands). L'id\u00e9e de Diffie-Hellman est d'utiliser des fonctions de la forme \\(x \\rightarrow k^x \\ (\\text{mod}\\ p)\\) et utilisent les propri\u00e9t\u00e9s de l'arithm\u00e9tique modulaire.</p> <p>Arithm\u00e9tique modulaire</p> <p>Faire des calculs modulo un entier \\(n\\), c'est ne garder que le reste de la division euclidienne par \\(n\\).</p> <p>Le fait que 15 soit \u00e9gal \u00e0 1 modulo 7 (car \\(15=2 \\times 7+1\\)) s'\u00e9crira \\(15 \\equiv 1 \\ (\\text{mod}\\ 7)\\).</p> <p>De m\u00eame, \\(10 \\equiv  3 \\ (\\text{mod}\\ 7)\\), \\(25 \\equiv 4 \\ (\\text{mod}\\ 7)\\), \\(32 \\equiv 2 \\ (\\text{mod}\\ 10)\\), etc.</p> <p>En effet, s'il est assez simple de calculer une puissance \u00abmodulo p\u00bb, il est en revanche compliqu\u00e9 de faire l'inverse (prendre le logarithme discret) car on ne conna\u00eet pas d'algorithme efficace pour certaines grandes valeurs de p. Cette arithm\u00e9tique fournit donc d'assez bonnes fonctions \u00ab\u00e0 sens unique\u00bb (fonction \u00e0 trappe).</p> <p>Exercice  3</p> \u00c9nonc\u00e9Correction <p>Alice et Bob choisissent d'utiliser la fonction \\(f(x) = 7^x \\ (\\text{mod}\\ 11)\\). C'est le jaune.</p> <ol> <li>Alice choisit un nombre \\(A=3\\) et le garde secret (c'est le magenta). Elle calcule \\(\\alpha = f(A)\\) (le orange) et l'envoie \u00e0 Bob. Que re\u00e7oit Bob?</li> <li>Bob choisit un nombre \\(B=6\\) et le garde secret (c'est le cyan). Il calcule \\(\\beta = f(B)\\) (le bleu) et l'envoie \u00e0 Alice. Que re\u00e7oit Alice?</li> <li>Alice re\u00e7oit \\(\\beta\\) de Bob et calcule \\(\\beta^A \\ (\\text{mod}\\ 11)\\). Bob re\u00e7oit \\(\\alpha\\) d'Alice et calcule \\(\\alpha^B \\ (\\text{mod}\\ 11)\\). Quelle est la cl\u00e9 \u00e9chang\u00e9e?</li> </ol> <p>Deux inconv\u00e9nients majeurs r\u00e9sident cependant dans ce protocole:</p> <ul> <li>il n\u00e9cessite plusieurs \u00e9changes entre Alice et Bob;</li> <li>il faut qu'ils soient tous les deux disponibles pour faire ces \u00e9changes, ce qui peut emp\u00eacher un chiffrement imm\u00e9diat.</li> </ul>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#22-cryptographie-a-cle-publique","title":"2.2 Cryptographie \u00e0 cl\u00e9 publique","text":"<p>Pour pallier \u00e0 ces inconv\u00e9nients, Diffie et Hellman imaginent un chiffrement o\u00f9 les cl\u00e9s servant \u00e0 chiffrer et d\u00e9chiffrer un message sont diff\u00e9rentes: on parle alors de chiffrement asym\u00e9trique ou bien de chiffrement \u00e0 cl\u00e9 publique. De plus ces cl\u00e9s ne doivent pas se d\u00e9duire facilement l'une de l'autre: il faut utiliser une sorte de fonction \u00e0 sens unique, qui soit simple \u00e0 utiliser pour chiffrer, mais tr\u00e8s difficile \u00e0 inverser pour d\u00e9chiffrer.</p> <p>Le principe de base est l'existence d'une cl\u00e9 publique, appel\u00e9e \u00e0 \u00eatre distribu\u00e9e largement, et d'une cl\u00e9 priv\u00e9e, qui ne quitte jamais son propri\u00e9taire. </p> <p> </p> <p>Principe</p> \u00c9tape 1\u00c9tape 2\u00c9tape 3 <p>Alice fabrique une cl\u00e9 publique (le cadenas) et une cl\u00e9 priv\u00e9e (la cl\u00e9 du cadenas). Elle diffuse la cl\u00e9 \u00e0 Bob (en r\u00e9alit\u00e9, \u00e0 tout le monde, d'o\u00f9 le terme cl\u00e9 publique).</p> <p> </p> <p>\u00c0 l'aide de la cl\u00e9 publique d'Alice, Bob peut chiffrer son message et l'envoyer \u00e0 Alice. Une fois son message chiffr\u00e9, Bob lui-m\u00eame ne peut pas revenir en arri\u00e8re et d\u00e9chiffrer son propre message puisqu'il ne conna\u00eet pas la cl\u00e9 priv\u00e9e d'Alice.</p> <p></p> <p>Gr\u00e2ce \u00e0 sa cl\u00e9 priv\u00e9e, Alice peut d\u00e9chiffrer et ouvrir le message qui lui est adress\u00e9.</p> <p></p> <p>Pourquoi \u00e7a marche?</p> <p>Les cl\u00e9s sont des fonctions math\u00e9matiques (ou m\u00eame simplement des nombres tr\u00e8s grands): une fonction \\(P\\) qui permet de chiffrer les messages et sa fonction inverse \\(S\\) qui permet de d\u00e9chiffrer, c'est-\u00e0-dire que \\(S(P(\\text{message})) = \\text{message}\\).</p> <p>On peut fabriquer simultan\u00e9ment un couple \\((P,S)\\), mais connaissant uniquement \\(P\\), il est impossible (ou au moins tr\u00e8s difficile) de retrouver \\(S\\). Et r\u00e9ciproquement.</p> <p>La connaissance de \\(P\\) par un tiers ne compromet donc pas la s\u00e9curit\u00e9 de l'envoi des messages cod\u00e9s, puisqu'elle ne permet pas de retrouver \\(S\\). Il est possible de donner librement \\(P\\), qui m\u00e9rite bien son nom de cl\u00e9 publique. </p> <p>Enfin, il faut comprendre que ces cl\u00e9s ont un r\u00f4le interchangeable: on peut tr\u00e8s bien chiffrer avec la cl\u00e9 priv\u00e9e et d\u00e9chiffrer avec la cl\u00e9 publique (on verra plus loin dans le cours une utilisation de cette inversion).</p>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#23-authentification-le-double-cadenas","title":"2.3 Authentification: le double cadenas","text":"<p>Dans la situation du 2.2, Alice (qui a distribu\u00e9 largement sa cl\u00e9 publique) ne peut pas s'assurer que le message vient bien de Bob. Il peut avoir \u00e9t\u00e9 cr\u00e9\u00e9 par \u00c8ve, qui signe \u00abBob\u00bb et usurpe ainsi son identit\u00e9. </p> <p>Le protocole - appel\u00e9 signature \u00e9lectronique - que nous allons d\u00e9crire ci-dessous permet :</p> <ul> <li>d'emp\u00eacher qu'un message intercept\u00e9 soit d\u00e9chiffr\u00e9 (ce qui \u00e9tait d\u00e9j\u00e0 le cas dans le 2.1)</li> <li>mais aussi de s'assurer que chaque personne est bien celle qu'elle pr\u00e9tend \u00eatre : on r\u00e9sout le probl\u00e8me d'authentification.</li> </ul> <p>Principe</p> <p>Alice poss\u00e8de le couple cl\u00e9 publique/cl\u00e9 priv\u00e9e \\((P_A, S_A)\\) et Bob le couple \\((P_B, S_B)\\). Alice veut envoyer \u00e0 Bob le message M.</p> <ul> <li> <p>Phase d'envoi: Alice chiffre M avec sa cl\u00e9 priv\u00e9e \\(S_A\\), c'est-\u00e0-dire qu'elle calcule \\(M'=S_A(M)\\). Puis elle chiffre \\(M'\\) avec la cl\u00e9 publique de Bob: elle envoie \u00e0 Bob \\(M''=P_B(M') = P_B(S_A(M))\\).</p> </li> <li> <p>Phase de r\u00e9ception: \u00c0 l'aide de sa cl\u00e9 priv\u00e9e \\(S_B\\), Bob d\u00e9chiffre \\(M''\\), c'est-\u00e0-dire qu'il calcule \\(S_B(M'') =S_B(P_B(M')) = M'\\). Seul lui peut effectuer ce calcul, d'o\u00f9 la s\u00e9curit\u00e9 de l'envoi, \u00c8ve ne peut rien faire du message \\(M''\\) envoy\u00e9 par Alice.</p> <p>Il calcule ensuite \\(P_A(M')=P_A(S_A(M))=M\\). Il est alors s\u00fbr que c'est Alice qui lui a envoy\u00e9 ce message, car elle seule a pu calculer \\(S_A(M)\\).</p> </li> </ul> <p> </p> <p>En r\u00e9sum\u00e9 :</p> <ul> <li>Alice est s\u00fbre que seul Bob pourra d\u00e9chiffrer le message qu'elle envoie.</li> <li>Bob est s\u00fbr que le message qu'il re\u00e7oit vient bien d'Alice.</li> </ul> <p>Ce protocole, s'il est fiable, est lent puisque deux fois plus lent qu'un algorithme \u00e0 cl\u00e9 publique (lui-m\u00eame d\u00e9j\u00e0 tr\u00e8s lent!). En outre, il ne garantit pas l'int\u00e9grit\u00e9 du message, c'est-\u00e0-dire que celui-ci n'est pas alt\u00e9r\u00e9 par des erreurs de transmission. L'utilisation des fonctions de hachage r\u00e9sout ces probl\u00e8mes.</p> <p>Supposons qu'Alice et Bob disposent d'une fonction de hachage \\(h\\) (SHA-256 par exemple):</p> <ul> <li> <p>Phase d'envoi: Alice calcule \\(h(M)\\) - le condens\u00e9 - et envoie \u00e0 Bob \\(P_B(M)\\) (calcul\u00e9 \u00e0 l'aide de la cl\u00e9 publique de Bob) accompagn\u00e9 de \\(S_A(h(M))\\). </p> </li> <li> <p>Phase de r\u00e9ception: Bob calcule \\(S_B(P_B(M))=M'\\). Puis il calcule \\(P_A(S_A(h(M)))\\), qu'il compare \u00e0 \\(h(M')\\). Si les quantit\u00e9s sont \u00e9gales, il est s\u00fbr que c'est bien Alice qui a envoy\u00e9 le message, et que celui-ci a \u00e9t\u00e9 correctement transmis. </p> </li> </ul>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#3-chiffrement-rsa","title":"3. Chiffrement RSA","text":"<p>Lorsqu'en 1976 Diffie et Hellman pr\u00e9sentent le concept de chiffrement asym\u00e9trique, ils en proposent uniquement un mod\u00e8le th\u00e9orique, n'ayant pas trouv\u00e9 une r\u00e9elle impl\u00e9mentation de leur protocole.</p> <p>Trois chercheurs du MIT (Boston), Ron Rivest, Adi Shamir et Len Adleman se penchent alors sur ce protocole, convaincus qu'il est en effet impossible d'en trouver une impl\u00e9mentation pratique. En 1977, au cours de leurs recherches, ils d\u00e9montrent en fait l'inverse de ce qu'ils cherchaient : ils cr\u00e9ent le premier protocole concret de chiffrement asym\u00e9trique : le chiffrement RSA.</p> <p></p>  De gauche \u00e0 droite: Adi Shamir, Ron Rivest, Len Adleman  <p>Au m\u00eame moment \u00e0 Londres, Clifford Cocks, (chercheur au tr\u00e8s secret GCHQ) apprend que Rivest Shamir et Adleman viennent de d\u00e9couvrir ce que lui-m\u00eame a d\u00e9couvert 3 ans auparavant mais qui est rest\u00e9 class\u00e9 Secret D\u00e9fense.</p> <p>Il est le v\u00e9ritable inventeur du RSA... mais le reste du monde ne l'apprendra qu'en 1997 au moment de la d\u00e9classification de cette information. </p> <p></p> <p>Principe</p> <p>Le chiffrement RSA est bas\u00e9 sur l'arithm\u00e9tique modulaire. </p> \u00c9tape 1\u00c9tape 2\u00c9tape 3\u00c9tape 4\u00c9tape 5\u00c9tape 6 <p>Alice choisit 2 grands nombres premiers \\(p\\) et \\(q\\). Dans la r\u00e9alit\u00e9 ces nombres seront vraiment tr\u00e8s grands (plus de 100 chiffres). Dans notre exemple, nous prendrons \\(p = 3\\) et \\(q = 11\\).</p> <p>Alice multiplie ces deux nombres \\(p\\) et \\(q\\) et obtient ainsi un nombre \\(n\\).</p> <p>Il est tr\u00e8s facile pour Alice de calculer \\(n\\) en connaissant \\(p\\) et \\(q\\), mais il  extr\u00eamement difficile pour \u00c8ve de faire le travail inverse car trouver \\(p\\) et \\(q\\) en connaissant \\(n\\) prend un temps exponentiel avec la taille de \\(n\\). C'est sur cette difficult\u00e9 (appel\u00e9e difficult\u00e9 de factorisation) que repose la robustesse du syst\u00e8me RSA.</p> <p>Alice choisit un nombre \\(e\\) qui doit \u00eatre premier avec \\((p-1)(q-1)\\).  On note \\(\\phi(n)\\) le nombre \\((p-1)(q-1)\\).</p> <p>Dans notre exemple, \\((p-1)(q-1) = 20\\), Alice choisit donc \\(e = 3\\). (mais elle aurait pu aussi choisir 7, 9, 13...).</p> <p>Le couple \\((e, n)\\) sera la cl\u00e9 publique d'Alice. Elle la diffuse \u00e0 qui veut lui \u00e9crire.</p> <p>Dans notre exemple, la cl\u00e9 publique d'Alice est \\((3, 33)\\).</p> <p>Alice calcule maintenant sa cl\u00e9 priv\u00e9e : elle doit trouver un nombre d qui v\u00e9rifie l'\u00e9galit\u00e9 \\(e \\times d \\equiv 1 \\ (\\text{mod}\\ \\phi(n))\\).</p> <p>Dans notre exemple, comme \\(7 \\times 3  \\equiv 1 \\ (\\text{mod}\\ 20)\\), ce nombre \\(d\\) est \u00e9gal \u00e0 7.</p> <p>En pratique, il existe un algorithme simple (algorithme d'Euclide \u00e9tendu) pour trouver cette valeur \\(d\\), appel\u00e9e inverse de e modulo \\(\\phi(n)\\).</p> <p>Le couple \\((d, n)\\) sera la cl\u00e9 priv\u00e9e d'Alice. Elle ne la diffuse \u00e0 personne.</p> <p>Dans notre exemple, la cl\u00e9 priv\u00e9e d'Alice est \\((7, 33)\\).</p> <p>Supposons que Bob veuille \u00e9crire \u00e0 Alice pour lui envoyer le nombre 4.  Il poss\u00e8de la cl\u00e9 publique d'Alice, qui est \\((3, 33)\\).</p> <p>Il calcule donc \\(4^3\\) modulo 33, qui vaut 31. C'est cette valeur 31 qu'il transmet \u00e0 Alice.</p> \\[4^3 \\equiv 31 \\ (\\text{mod}\\ 33)\\] <p>Si \u00c8ve intercepte cette valeur 31, m\u00eame en connaissant la cl\u00e9 publique d'Alice (3,33), elle ne peut pas r\u00e9soudre l'\u00e9quation \\(x^3 \\equiv 31 \\ (\\text{mod}\\ 33)\\) de mani\u00e8re efficace.</p> <p>Alice re\u00e7oit la valeur 31. Il lui suffit alors d'\u00e9lever 31 \u00e0 la puissance 7 (sa cl\u00e9 priv\u00e9e), et de calculer le reste modulo 33 :</p> <p>\\(31^7 = 27512614111\\)</p> <p>\\(27512614111 \\equiv 4 \\ (\\text{mod}\\ 33)\\)</p> <p>Elle r\u00e9cup\u00e8re la valeur 4, qui est bien le message original de Bob.</p> <p>Comment \u00e7a marche ?</p> <p>Gr\u00e2ce au Petit Th\u00e9or\u00e8me de Fermat, on d\u00e9montre (voir ici) assez facilement que \\(M^{ed} \\equiv M [n]\\). Il faut remarquer que \\(M^{ed} = M^{de}\\). On voit que les r\u00f4les de la cl\u00e9 publique et de la cl\u00e9 priv\u00e9e sont sym\u00e9triques : un message chiffr\u00e9 avec la cl\u00e9 publique se d\u00e9chiffrera en le chiffrant avec la cl\u00e9 priv\u00e9e, tout comme un message chiffr\u00e9 avec la cl\u00e9 priv\u00e9e se d\u00e9chiffrera en le chiffrant avec la cl\u00e9 publique.</p>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#rsa-un-systeme-inviolable","title":"RSA, un syst\u00e8me inviolable ?","text":"<p>Le chiffrement RSA a des d\u00e9fauts (notamment une grande consommation des ressources, due \u00e0 la manipulation de tr\u00e8s grands nombres). C'est pourquoi on l'utilise plut\u00f4t pour s\u00e9curiser l'\u00e9change d'une cl\u00e9 d'un chiffrement sym\u00e9trique (comme AES par exemple). Mais le choix d'une cl\u00e9 publique de grande taille (actuellement 1024 ou 2048 bits) le rend pour l'instant inviolable. </p> <p>Actuellement, il n'existe pas d'algorithme efficace pour factoriser un nombre ayant plusieurs centaines de chiffres.</p> <p>Deux \u00e9v\u00e8nements pourraient faire s'\u00e9crouler la s\u00e9curit\u00e9 du RSA :</p> <ul> <li>la d\u00e9couverte d'un algorithme efficace de factorisation, capable de tourner sur les ordinateurs actuels. Cette annonce est r\u00e9guli\u00e8rement faite, et tout aussi r\u00e9guli\u00e8rement contredite par la communaut\u00e9 scientifique. (voir, le 05/03/2021,  https://www.schneier.com/blog/archives/2021/03/no-rsa-is-not-broken.html)</li> <li>l'av\u00e8nement d'ordinateurs quantiques, dont la vitesse d'ex\u00e9cution permettrait une factorisation rapide. Il est \u00e0 noter que l'algorithme de factorisation destin\u00e9 \u00e0 tourner sur un ordinateur quantique existe d\u00e9j\u00e0 : l'algorithme de Schor.</li> </ul>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#4-https","title":"4. HTTPS","text":"<p>Aujourd'hui, plus de 90 % du trafic sur internet est chiffr\u00e9 : les donn\u00e9es ne transitent plus en clair (protocole <code>http</code>) mais de mani\u00e8re chiffr\u00e9e (protocole <code>https</code>), ce qui emp\u00eache la lecture de paquets \u00e9ventuellements intercept\u00e9s.</p> <p> </p> <p>Ce protocole n'utilise pas le  chiffrement asym\u00e9trique (RSA par exemple), car il est tr\u00e8s gourmand en ressources. Le chiffrement/d\u00e9chiffrement doit \u00eatre rapide pour ne pas ralentir les communications ou l'exploitation des donn\u00e9es par les utilisateurs!</p> <p>HTTPS est donc un exemple d'utilisation conjointe d'un chiffrement asym\u00e9trique et d'un chiffrement sym\u00e9trique:</p> <ul> <li>Le chiffrement asym\u00e9trique est  r\u00e9serv\u00e9 \u00e0 l'\u00e9change de cl\u00e9s (au d\u00e9but de la communication).</li> <li>Le chiffrement sym\u00e9trique, bien plus rapide, prend ensuite le relais pour l'ensemble de la communication.</li> </ul> <p>Principe</p> <p>Le protocole <code>https</code> est la r\u00e9union de deux protocoles :</p> <ul> <li>le protocole <code>TLS</code> (Transport Layer Security, qui a succ\u00e9d\u00e9 au SSL) : ce protocole, bas\u00e9 sur du chiffrement asym\u00e9trique, va conduire \u00e0 la g\u00e9n\u00e9ration d'une cl\u00e9 identique chez le client et chez le serveur.</li> <li>le (bon vieux) protocole  <code>http</code>, mais qui convoiera maintenant des donn\u00e9es chiffr\u00e9es avec la cl\u00e9 g\u00e9n\u00e9r\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente. Les donn\u00e9es peuvent toujours \u00eatre intercept\u00e9es, mais sont illisibles. Le chiffrement sym\u00e9trique utilis\u00e9 est actuellement le chiffrement AES.</li> </ul> <p> </p>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#fonctionnement-du-tls-explication-du-handshake-hors-programme","title":"Fonctionnement du TLS : explication du handshake (Hors programme)","text":"<p>Observons en d\u00e9tail le fonctionnement du protocole <code>TLS</code>, dont le r\u00f4le est de g\u00e9n\u00e9rer de mani\u00e8re s\u00e9curis\u00e9e une cl\u00e9 dont disposeront \u00e0 la fois le client et le serveur, leur permettant ainsi d'appliquer un chiffrement sym\u00e9trique \u00e0 leurs \u00e9changes.</p> <p> </p> <ul> <li> <p>\u00e9tape 1 : le \u00abclient Hello\u00bb. Le client envoie sa version de TLS utilis\u00e9e. </p> </li> <li> <p>\u00e9tape 2 : le \u00abserver Hello\u00bb. Le serveur r\u00e9pond en renvoyant son certificat prouvant son identit\u00e9, ainsi que sa cl\u00e9 publique.</p> </li> <li> <p>\u00e9tape 3 : le client interroge l'autorit\u00e9 de certification pour valider le fait que le certificat est bien valide et que le serveur est bien celui qu'il pr\u00e9tend \u00eatre. Cette v\u00e9rification est faite gr\u00e2ce \u00e0 un m\u00e9canisme de chiffrement asym\u00e9trique.</p> </li> </ul> <p>La pr\u00e9sentation du certificat \u00e0 l'autorit\u00e9 de certification peut se repr\u00e9senter comme le scan d'une pi\u00e8ce d'identit\u00e9 dans un a\u00e9roport. L'autorit\u00e9 de certification est alors l'\u00c9tat (dont la base de donn\u00e9es est interrog\u00e9e par un logiciel) qui valide que la pi\u00e8ce d'identit\u00e9 est bien un document officiel.</p> <ul> <li>\u00e9tape 4 : une fois v\u00e9rifi\u00e9e l'authenticit\u00e9 du serveur et que son certificat est valide, le client calcule ce qui sera la future cl\u00e9 de chiffrement sym\u00e9trique (appel\u00e9e \u00abcl\u00e9 AES\u00bb dans l'infographie). Cette cl\u00e9 est chiffr\u00e9e avec la cl\u00e9 publique du server (transmise \u00e0 l'\u00e9tape 1), ce qui assure la s\u00e9curit\u00e9 de son transfert. Le serveur d\u00e9chiffre cette cl\u00e9 gr\u00e2ce \u00e0 sa cl\u00e9 priv\u00e9e, et dispose ainsi lui aussi de la cl\u00e9. </li> </ul> <p>Le transmission par protocole <code>http</code> de donn\u00e9es chiffr\u00e9es au pr\u00e9alable avec la cl\u00e9 AES peut commencer. </p> <p>Remarque : en r\u00e9alit\u00e9, ce n'est pas la cl\u00e9 AES qui est transmise \u00e0 l'\u00e9tape 4, mais un nombre choisi par le client, qui permettra, avec deux autres nombres choisis par le client (\u00e9tape 1) et le serveur (\u00e9tape 2) de reconstituer la cl\u00e9 AES, qui sera donc identique c\u00f4t\u00e9 client et c\u00f4t\u00e9 serveur.</p> <p>\u00c0 propos du certificat</p> <p>Sur Firefox par exemple, en cliquant sur l'icone cadenas \u00e0 gauche de la barre d'adresse, on peut r\u00e9cup\u00e9rer le certificat (en g\u00e9n\u00e9ral un fichier binaire au format X.509) du site au format PEM. \u00c0 l'aide ensuite d'OpenSSL par exemple, on peut consulter le contenu du fichier avec:</p> <pre><code>openssl x509 -in github-io-chain.pem -text\n</code></pre> <pre><code>Certificate:\nData:\n    Version: 3 (0x2)\n    Serial Number:\n        04:4d:72:d7:7c:dd:a7:02:dd:5a:67:f2:a2:3b:bd:d9\n    Signature Algorithm: sha256WithRSAEncryption\n    Issuer: C = US, O = DigiCert Inc, CN = DigiCert TLS RSA SHA256 2020 CA1\n    Validity\n        Not Before: Feb 21 00:00:00 2023 GMT\n        Not After : Mar 20 23:59:59 2024 GMT\n    Subject: C = US, ST = California, L = San Francisco, O = \"GitHub, Inc.\", CN = *.github.io\n    Subject Public Key Info:\n        Public Key Algorithm: rsaEncryption\n            Public-Key: (2048 bit)\n            Modulus:\n                00:b8:b0:60:0e:1a:2f:f1:b1:86:4b:64:ec:11:9f:\n                [...]\n                2c:2c:ec:f8:39:09:36:bd:19:8d:03:56:41:66:07:\n                24:e3\n            Exponent: 65537 (0x10001)\n[...]\nSignature Algorithm: sha256WithRSAEncryption\nSignature Value:\n    37:a4:1b:11:22:9f:fc:9f:c9:67:07:8f:aa:86:13:9f:e0:08:\n    1d:6e:0c:8d:65:fb:03:79:50:c6:76:ba:30:90:a0:a4:1c:79:\n    13:07:b9:5a:18:8d:97:4c:05:71:8a:d0:22:17:c6:19:a2:22:\n    8b:03:f6:2c:84:71:6c:55:df:e2:99:43:65:e5:d7:b7:b7:37:\n    4c:c6:c8:e5:f1:d8:a7:7b:07:5d:eb:b8:1c:50:a4:a3:8e:f0:\n    4c:f8:b8:6a:72:59:be:43:0e:8a:de:b5:5e:8f:9e:3f:5a:43:\n    64:82:cc:e0:de:76:f4:be:a6:12:0a:06:68:bb:77:e1:4c:ef:\n    4b:4d:67:af:f6:72:c7:6b:1b:9c:48:53:a7:7f:ed:76:18:5c:\n    f0:f6:c6:4c:24:53:57:57:e1:42:a6:3d:ae:e1:f5:93:f2:6a:\n    fa:29:72:01:3e:b7:06:f1:2f:1a:0e:91:c5:ec:35:bf:f5:da:\n    33:95:de:24:12:0d:f5:c3:23:8d:40:82:d1:5c:eb:de:0a:08:\n    e8:e5:83:e5:0a:8b:3a:5e:98:4e:77:4f:9f:dc:ab:7e:ce:a8:\n    28:4f:aa:79:4f:c9:be:8f:60:88:6e:6b:f9:20:6c:7f:38:96:\n    d6:da:d7:11:03:43:d8:b8:51:87:ce:32:22:4d:64:4c:c4:75:\n    27:d0:e3:df\n</code></pre>"},{"location":"T05_ArchiMaterielle/T5.3_Crypto/T5.3_Cryptographie/#5-exercices","title":"5. Exercices","text":"<p>Exercice  4: Chiffrement affine</p> \u00c9nonc\u00e9Correction <p>Principe</p> <ul> <li>Chaque lettre est cod\u00e9e par son rang dans l'alphabet: A \u2192 0, B \u2192 1, etc.</li> <li>On applique \u00e0 chaque rang la transformation affine \\(f(x)=(ax+b)\\%26\\) o\u00f9 \\(a\\) et \\(26\\) sont deux nombres entiers, premiers entre eux (c'est-\u00e0-dire n'admettant pas de diviseur commun autre que 1).</li> </ul> <ol> <li>Compl\u00e9ter les fonctions suivantes selon leur sp\u00e9cification.</li> </ol> <pre><code>def affine(msg:str, a:int, b:int) -&gt; str:\n    '''\n    Renvoie le texte msg chiffr\u00e9 avec la m\u00e9thode du chiffrement affine avec a, b comme cl\u00e9.\n    '''\n    msg_chiffre = ''\n    for caractere in msg:\n        rang = ord(caractere) - 65\n        rang_chiffre =  ... \n        caractere_chiffre = chr( ... )\n        msg_chiffre += ...\n    return ...\n\n\ndef trouve_cle(msg:str, mot_clair:str) -&gt; tuple:\n    '''\n    Renvoie la cl\u00e9 a, b si le chifrement de mot_clair est dans le message msg, \n    par la m\u00e9thode de force brute.\n    '''\n    for a in range(1, ...):\n        for b in range(...):\n            mot_chiffre = ...\n            if ...:\n                return a, b\n\ndef dico_dechiffrement(a:int, b:int):\n    '''\n    Construit un dictionnaire de d\u00e9chiffrement dont les cl\u00e9s sont les lettres\n    chiffr\u00e9es et les valeurs les lettres claires.\n    '''\n    dico = {}\n    for k in range(...):\n        caractere = chr(65 + k)\n        dico[...] = caractere\n    return dico\n\ndef dechiffre_affine(msg:str, mot:str) -&gt; str:\n    '''\n    D\u00e9chiffre un message chiffr\u00e9 msg connaissant un mot du texte clair.\n    '''\n    a, b = ...\n    msg_clair = ''\n    dico = ...\n    for caractere in msg:\n        msg_clair += ...\n    return ...\n</code></pre> <ol> <li>D\u00e9coder la phrase <code>UCGXLODCMOXPMFMSRJCFQOGTCRSUSXC</code>, sachant qu'elle contient le mot <code>TRAVAIL</code> et que \\(a\\) et \\(b\\) sont inf\u00e9rieurs \u00e0 20.</li> </ol> <pre><code># 1.\ndef affine(msg:str, a:int, b:int) -&gt; str:\n    '''\n    Renvoie le texte msg chiffr\u00e9 avec la m\u00e9thode du chiffrement affine avec a, b comme cl\u00e9.\n    '''\n    msg_chiffre = ''\n    for caractere in msg:\n        rang = ord(caractere) - 65\n        rang_chiffre = (a*rang + b) % 26\n        caractere_chiffre = chr(rang_chiffre + 65)\n        msg_chiffre += caractere_chiffre\n    return msg_chiffre\n\n# 2.\ndef trouve_cle(msg:str, mot:str) -&gt; tuple:\n    '''\n    Renvoie la cl\u00e9 a, b si le mot chiffr\u00e9 est dans le message msg.\n    '''\n    for a in range(1, 21):\n        for b in range(21):\n            mot_chiffre = affine(mot, a, b)\n            if mot_chiffre in msg:\n                return a, b\n\ndef dico_dechiffrement(a:int, b:int):\n    '''\n    Construit un dictionnaire de d\u00e9chiffrement dont les cl\u00e9s sont les lettres\n    chiffr\u00e9es et les valeurs les lettres claires.\n    '''\n    dico = {}\n    for k in range(26):\n        caractere = chr(65 + k)\n        dico[affine(caractere, a, b)] = caractere\n    return dico\n\ndef dechiffre_affine(msg:str, mot:str) -&gt; str:\n    '''\n    D\u00e9chiffre un message chiffr\u00e9 msg connaissant un mot du texte clair.\n    '''\n    a, b = trouve_cle(msg, mot)\n    msg_clair = ''\n    d = dico_dechiffrement(a, b)\n    for caractere in msg:\n        msg_clair += d[caractere]\n    return msg_clair\n</code></pre> <p>Exercice  5: RSA 1</p> \u00c9nonc\u00e9Correction <p>Le module <code>pycryptodome</code> contient tout un tas d'outils cryptographiques, dont ceux n\u00e9cessaires pour travailler sur RSA. Dans un terminal, installez le avec la commande:</p> <p><code>sudo pip3 install pycryptodome</code></p> Code \u00e0 compl\u00e9ter<pre><code>import Crypto\nfrom Crypto.Util.number import bytes_to_long, long_to_bytes\nfrom Crypto.Random import get_random_bytes \n\n# Un peu d'arithm\u00e9tique modulaire\ndef euclide_etendu(a:int, b:int) -&gt; int:\n    '''\n    Renvoie un tuple (u, v) d'entiers tels que a*u + b*v = pgcd(a, b)\n    '''\n    r, u, v, rp, up, vp = a, 1, 0, b, 0, 1\n    while rp != 0:\n        q = r // rp\n        r, u, v, rp, up, vp = rp, up, vp, r - q*rp, u - q*up, v - q*vp\n    return u, v\n\ndef inverse(a:int, m:int) -&gt; int:\n    '''\n    Renvoie l'inverse u de a modulo m, c-a-d tel que a*u = 1 (mod m).\n    '''\n    u, v = euclide_etendu(a, m)\n    if u &lt; 0:\n        return u + m\n    return u\n\n#\u00a0\nbits = 512\nmsg = \"en NSI on fait de la crypto\"\n\np = Crypto.Util.number.getPrime(bits, randfunc=get_random_bytes)\nq = Crypto.Util.number.getPrime(bits, randfunc=get_random_bytes)\n\nn = ...\nphi = ...\n\ne = 65537  # 65537 est un nombre premier, donc forc\u00e9ment premier avec phi\nd = ...\n\nM = bytes_to_long(msg.encode('utf-8'))\n\nM_chiffre = pow(M, e, n) # M puissance e modulo n\nM_dechiffre = pow(...)\n\nprint(long_to_bytes(M_dechiffre))\n</code></pre> <ol> <li>Compl\u00e9ter le code ci-dessus, puis l'ex\u00e9cuter. Examiner le contenu des diff\u00e9rentes variables.</li> <li>En adaptant le code pr\u00e9c\u00e9dent, d\u00e9chiffrer le message suivant, sachant que \\(p\\) et \\(q\\) sont les 13\u00e8me et 14\u00e8me nombres premiers de Mersenne.     <code>3321201356966590346561115071776627133387292843371714010408399835551061020050045365398836013027686993987632768071673564690778259745221441566760245236779498669656980590070600792357065491110399368931370008478330254358972461518602964119545062624451642219086661534670622352070903070456403667523575064863364819845990986678472406418837664850717889</code></li> </ol> <p>Exercice  6: RSA 2</p> \u00c9nonc\u00e9Correction <p>En r\u00e8gle g\u00e9n\u00e9rale, les cl\u00e9s publiques sont \u00e9chang\u00e9es en PEM qui est une version texte encod\u00e9e en Base64 comme par exemple:</p> \u00c0 propos de la Base64 <pre><code>import base64\n\nmsg = \"en NSI on fait de la crypto\"\nmsg_bytes = msg.encode('utf-8')\nprint(msg_bytes)\nmsg_b64 = base64.b64encode(msg_bytes)\nprint(msg_b64)\nmsg_b64_decode = base64.b64decode(msg_b64)\nprint(msg_b64_decode)\nprint(msg_b64_decode.decode('utf-8'))\n</code></pre> <pre><code>-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzPtKIAxSBQXAyDp+uH3p\nwroOSTVSPr/K1I7MQYqXhd2bZ1Y1ZosYsRaKyKIRScoez4yoI0+9Li4yMh692tHV\nphInz0+FmocAqsQlUeozsdRt0mUJi20ujjwkRozesZY5J5RB+54oxX5uk9XRAFmf\nHdNqZO3lNvM5QZC9CjowDJu/Cs7khHoUPDX1SeKKYd7iv70DYwDG/NYtBf+gaxY6\ngaFdTmduFMN3wOnxnaRrl5f8tyNTHMHpRWPti1Q/N+CNIbM7NySb3IJMMKj+hj/N\nxhk+lGizdIG469OZqICuDkSLBwxxaj9gb26uVv4/W7HLv9oXR1wwAB210rKSoQBz\n5wIDAT+Z\n-----END PUBLIC KEY-----\n</code></pre> <p>On peut l'obtenir par exemple ainsi:</p> <pre><code>from Crypto.PublicKey import RSA\n\ncle_privee = Crypto.PublicKey.RSA.construct((n, e, d))\ncle_publique = cle_privee.publickey()\nprint(cle_publique.exportKey().decode())\n</code></pre> <p>On peut \u00e9galement r\u00e9cup\u00e9rer tr\u00e8s facilement l'exposant (<code>e</code>) et le module (<code>n</code>) connaissant la cl\u00e9 publique:</p> <pre><code>from Crypto.PublicKey import RSA\n\ncle_publique = RSA.importKey(\"\"\"\\\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzPtKIAxSBQXAyDp+uH3p\nwroOSTVSPr/K1I7MQYqXhd2bZ1Y1ZosYsRaKyKIRScoez4yoI0+9Li4yMh692tHV\nphInz0+FmocAqsQlUeozsdRt0mUJi20ujjwkRozesZY5J5RB+54oxX5uk9XRAFmf\nHdNqZO3lNvM5QZC9CjowDJu/Cs7khHoUPDX1SeKKYd7iv70DYwDG/NYtBf+gaxY6\ngaFdTmduFMN3wOnxnaRrl5f8tyNTHMHpRWPti1Q/N+CNIbM7NySb3IJMMKj+hj/N\nxhk+lGizdIG469OZqICuDkSLBwxxaj9gb26uVv4/W7HLv9oXR1wwAB210rKSoQBz\n5wIDAQAB\n-----END PUBLIC KEY-----\"\"\")\n\nprint(cle_publique.e, cle_publique.n)\n</code></pre> <ol> <li>R\u00e9cup\u00e9rer les exposants et les modules des deux cl\u00e9s publiques donn\u00e9es . Que remarque-t-on?</li> <li> <p>Une faille de RSA consiste justement \u00e0 conserver le m\u00eame module en changeant uniquement les exposants, ce qui pourrait pourtant \u00eatre pratique plut\u00f4t que de cr\u00e9er un nouveau module de chiffrement \u00e0 chaque utilisation de RSA.</p> <p>C'est le point de d\u00e9part de l'attaque des modules communs, qui n\u00e9cessite d'obtenir le m\u00eame message chiffr\u00e9 avec deux cl\u00e9s publiques \\((e_1, n)\\) et \\((e_2, n)\\).</p> <p>Les voici:</p> <pre><code>message1 = 'A4ZTqgJUEUp3mJoaoNEkempFbBtUoDtX0Ak8sZembkpdR2FlgftR20u+ymLKGydBH9sV10vHhFEVGsaEfigaEZGC9wu7eo0irPY2J7khDP3QOA7qg3WJmvefne5VxeMU/gh65irNjp6O1jiXtdqTvMypqzHDIKuw68XIEF2J/aCw5nhIwCbBgQdIy7PYdxytoCbA4A0mJkdh4B2fVAoym0M+vDM7IP9ep371TLP/kPhcyrrv0FmGZCz3xM2Q+zsKrlqLkEb736KREg6JTpNjwfzaKHrTe/XP2sailo1x2IQIxltuR5Lv/9vFq7TP5qYG5aAfW0ReiLGhXTIXWBrgjQ=='\n\nmessage2 = 'IJmhgMZG5YscMcnlmyQkrWb2P1WLDRx1JxxCTcK4OVJVetAtPIX5DvNGBhaWh7Rp9EXPq0k4YP/DI+k4Hq5i+2/RxUIaKXRYkBbOFx5WMloyn9wU0unRktdFX1Lv+Lg+uXA6oYFTQQkjc/lBWS9MEPRzzenPU+y/zghNs7k7lYj93e51jdQAz/LNz08KOqh0lalPtqjsrmDZ/6HVqESz7y4EkdZmk1iU9eg0E2/OWx0n5eC/jytemtIVrsOHfMXjmcY/MmZP93i1MTX1QzkFZrRe/55VgY6/fOLDYY7kTF1E8w+f16lfJFo31Ir+a6y9vjMZCBj3AkaW2DKCVFeLHw=='\n</code></pre> <p>Principe (math\u00e9matique) de l'attaque</p> <p>Puisque les deux exposants \\(e_1\\) et \\(e_2\\) sont des nombres premiers (c'est le cas en g\u00e9n\u00e9ral en pratique, le v\u00e9rifier ici...), ils sont premiers entre eux donc le th\u00e9or\u00e8me de Bezout assure l'existence de deux entiers \\(u\\) et \\(v\\) tels que \\(e_1\\times u + e_2\\times v =1\\).</p> <p>Or si on note \\(C_1\\) et \\(C_2\\) les deux messages chiffr\u00e9s et \\(M\\) le message clair, on a \\(C_1 = M^{e_1} (\\text{mod } n)\\) et \\(C_2 = M^{e_2} (\\text{mod } n)\\).</p> <p>Donc un \u00absimple\u00bb calcul montre que \\(C_1^u \\times C_2^v = (M^{e_1})^u \\times (M^{e_2})^v = M^{e_1 \\times u + e_2 \\times v} = M (\\text{mod } n)\\) !</p> <p>En revanche, il reste un point un peu compliqu\u00e9: en r\u00e9alit\u00e9 \\(v\\) est n\u00e9gatif... Pour calculer \\(C_2^v\\), il faut en fait calculer son inverse modulo \\(n\\) puis \u00e9lever celui-ci \u00e0 la puissance \\(-v\\).</p> <p>Vous disposez donc:</p> <ul> <li>de la fonction <code>euclide_etendu</code> qui fournit les coefficients \\(u\\) et \\(v\\);</li> <li>de la fonction <code>inverse</code>;</li> <li>de la fonction <code>base64.b64decode</code> qui convertit de la Base64 en bytes (octets);</li> <li>des fonctions <code>bytes_to_long</code> et <code>long_to_bytes</code> qui font les conversions octets \u27f7 entiers.</li> </ul> <p>D\u00e9codez donc le message \u00e9chang\u00e9...</p> </li> </ol>"},{"location":"T05_ArchiMaterielle/T5.4_Puce/T5.1_Puce/","title":"T5.4 Syst\u00e8mes sur puce","text":""},{"location":"T05_ArchiMaterielle/T5.4_Puce/T5.1_Puce/#t54-systemes-sur-puce","title":"T5.4 Syst\u00e8mes sur puce","text":""},{"location":"T06_BAC/bac/","title":"BAC NSI","text":""},{"location":"T06_BAC/bac/#bac-nsi","title":"BAC NSI","text":"<p>Nature de l'\u00e9preuve</p> <p>L'\u00e9preuve terminale obligatoire de sp\u00e9cialit\u00e9 est compos\u00e9e de deux parties : une partie \u00e9crite et une partie pratique, chacune not\u00e9e sur 20. La note de la partie \u00e9crite a un coefficient de 0,75 et celle de la partie pratique a un coefficient de 0,25. La note globale de l\u2019\u00e9preuve est donn\u00e9e sur 20 points.</p> <pre><code>def note_bac_nsi(note_ecrit:int, note_pratique:int) -&gt; int:\n    \"\"\"\n    Calcule la note de sp\u00e9cialit\u00e9 NSI au bac \u00e0 partir des notes obtenues aux \u00e9preuves \u00e9crite\n    et pratique.\n    \"\"\"\n    assert note_ecrit &gt;=0 and note_ecrit &lt;= 20, \"note non valide\"\n    assert note_pratique &gt;=0 and note_pratique &lt;= 20, \"note non valide\"\n    return int(0.75*note_ecrit + 0.25*note_pratique)\n</code></pre>"},{"location":"T06_BAC/bac/#epreuve-ecrite","title":"\u00c9preuve \u00e9crite","text":"<ul> <li>L'\u00e9preuve \u00e9crite de sp\u00e9cialit\u00e9 NSI dure 3h30.</li> <li>Elle comporte trois exercices ind\u00e9pendants les uns des autres, portant sur l'int\u00e9gralit\u00e9 du programme de premi\u00e8re et de terminale.</li> </ul> <p>Sujets 2024</p> <p> Am\u00e9rique du Nord Jour 1  Am\u00e9rique du Nord Jour 2  </p> <p> Centres \u00e9trangers Jour 1  Centres \u00e9trangers Jour 2  </p> <p> Asie Jour 1  Asie Jour 2  </p>"},{"location":"T06_BAC/bac/#epreuve-pratique","title":"\u00c9preuve pratique","text":"Qu'est-ce que c'est?D\u00e9roulement de l'\u00e9preuveBanque de sujetsGrille d'\u00e9valuation <ul> <li>L'\u00e9preuve pratique de sp\u00e9cialit\u00e9 NSI dure 1h.</li> <li>Elle comporte deux exercices de programmation sur ordinateur, not\u00e9s chacun sur 10 points, pour un total donc de 20 points.</li> </ul> <p>Le candidat est \u00e9valu\u00e9 sur la base d\u2019un dialogue avec un professeur-examinateur. Un examinateur \u00e9value au maximum quatre \u00e9l\u00e8ves. L\u2019examinateur ne peut pas \u00e9valuer un \u00e9l\u00e8ve qu\u2019il a eu en classe durant l\u2019ann\u00e9e en cours. L\u2019\u00e9valuation de cette partie se d\u00e9roule au cours du deuxi\u00e8me trimestre pendant la p\u00e9riode de l\u2019\u00e9preuve \u00e9crite de sp\u00e9cialit\u00e9.</p> <p>Premier exercice</p> <p>Le premier exercice consiste \u00e0 programmer un algorithme figurant explicitement au programme, ne pr\u00e9sentant pas de difficult\u00e9 particuli\u00e8re, dont on fournit une sp\u00e9cification. Il s\u2019agit donc de restituer un algorithme rencontr\u00e9 et travaill\u00e9 \u00e0 plusieurs reprises en cours de formation. Le sujet peut proposer un jeu de test avec les r\u00e9ponses attendues pour permettre au candidat de v\u00e9rifier son travail.</p> <p>Deuxi\u00e8me exercice</p> <p>Pour le second exercice, un programme est fourni au candidat. Cet exercice ne demande pas l\u2019\u00e9criture compl\u00e8te d\u2019un programme, mais permet de valider des comp\u00e9tences de programmation suivant des modalit\u00e9s vari\u00e9es : le candidat doit, par exemple, compl\u00e9ter un programme \u00ab \u00e0 trous \u00bb afin de r\u00e9pondre \u00e0 une sp\u00e9cification donn\u00e9e, ou encore compl\u00e9ter un programme pour le documenter, ou encore compl\u00e9ter un programme en ajoutant des assertions, etc.</p> <p> Vous pouvez retrouver en libre acc\u00e8s les 47 sujets de la session 2024 \u00e0 l'\u00e9preuve pratique de NSI: https://sujets.examens-concours.gouv.fr/delos/public/bgt/nsi. Attention, certains sujets peuvent comporter des erreurs.</p> <ul> <li>Les sujets 2022 \u00e0 t\u00e9l\u00e9charger en un seul fichier pdf.</li> <li>Les sujets 2023 \u00e0 t\u00e9l\u00e9charger en un seul fichier pdf.</li> <li>Les sujets 2024 \u00e0 t\u00e9l\u00e9charger en un seul fichier pdf.</li> </ul> Exemple: Sujets 2022 par th\u00e8me Sujet Exercice 1 Exercice 2 sujet 1 nombre d'occurences rendu monnaie, algo glouton r\u00e9cursif sujet 2 moyenne pond\u00e9r\u00e9e triangle de Pascal sujet 3 codage par diff\u00e9rence arithm\u00e9tique gr\u00e2ce \u00e0 un arbre binaire sujet 4 recherche d'entiers cons\u00e9cutifs composante d'image binaire sujet 5 minimum et maximum d'un tableau paquet de carte, poo sujet 6 indice du maximum et maximum d'un tableau recherche sous-chaine, ADN sujet 7 conversion d\u00e9cimal vers binaire tri \u00e0 bulle sujet 8 recherche \u00e9l\u00e9ment dans un tableau insertion d'un \u00e9l\u00e9ment dans un tableau tri\u00e9 sujet 9 probl\u00e8me 3n+1, suite mots parfaits sujet 10 occurence de caract\u00e8res dans une phrase fusion de liste tri\u00e9es sujet 11 recherche dichotomique codage de C\u00e9sar sujet 12 moyenne d'un tableau tri tableau de 0 et 1 sujet 13 rendu monaie, algorithme glouton file avec liste chain\u00e9e sujet 14 mots \u00e0 trou envois de messages, cycles sujet 15 nombre de r\u00e9p\u00e9titions (occurences) dans un tableau conversion d\u00e9cimale vers binaire sujet 16 indice du maximum et maximum d'un tableau extraction des entiers positifs d'une pile sujet 17 nombre de mots dans une phrase parcours et recherche dans un ABR sujet 18 minimum de deux tableaux li\u00e9s nombre palindrome sujet 19 multiplication avec addition et soustraction recherche dans un sous-tableau tri\u00e9 sujet 20 ou exclusif de deux tableaux carr\u00e9 magique sujet 21 multiplication avec addition et soustraction recherche par dichotomie sujet 22 renverser une cha\u00eene de caract\u00e8res nombres premiers, crible d'\u00c9ratosth\u00e8ne sujet 23 likes dans un r\u00e9seau social, dictionnaires notation postfixe des expression arithm\u00e9tiques sujet 24 maximum d'un tableau parenth\u00e9sage, piles sujet 25 animaux dans un refuge, dictionnaires trouver l'intrus dans un tableau sujet 26 indice du minimum d'un tableau tri d'un tableau de 0 et 1 sujet 27 taille d'un arbre binaire, dictionnaires tri par s\u00e9lection (it\u00e9ratif) sujet 28 moyenne d'un tableau conversion d\u00e9cimal vers binaire sujet 29 suite de Fibonnaci sans r\u00e9cursivit\u00e9 listes li\u00e9es de notes et d'\u00e9l\u00e8ves, maximum sujet 30 fusion de deux tableaux tri\u00e9s conversion chiffres romains vers d\u00e9cimal sujet 31 nombre d'occurrence dans un tableau (float ou int) rendu monaie, algorithme glouton sujet 32 indice d'un \u00e9l\u00e9ment dans un tableau adresses IP, POO sujet 33 conversion binaire vers d\u00e9cimal, tableaux tri par insertion sujet 34 maximum d'occurences dans une chaine de caract\u00e8res image, pixels, n\u00e9gatif sujet 35 moyenne d'un tableau avec assertions recherche par dichotomie dans un tableau tri\u00e9 sujet 36 indice de derni\u00e8re occurence d'un entier dans un tableau distance entre points sujet 37 v\u00e9rification du tri d'un tableau comptage des votes dans un tableau sujet 38 tri par s\u00e9lection jeu du plus ou moins sujet 39 moyenne d'un tableau zoom sur dessin sujet 40 recherche dans un tableau, tableau d'indices moyenne pond\u00e9r\u00e9e, dictionnaires Crit\u00e8res d'\u00e9valuation D\u00e9finition du crit\u00e8re Tr\u00e8s insuffisant Insuffisant Satisfaisant Tr\u00e8s satisfaisant Connaissance des savoir-faire techniques Connaissance des concepts de base Besoin permanent d'assistance A besoin de consignes compl\u00e9mentaires et d'assistance ponctuelle A rarement besoin de consignes compl\u00e9mentaires Travaille de fa\u00e7on autonome Qualit\u00e9 de mise en \u0153uvre Niveau de conformit\u00e9 des op\u00e9rations r\u00e9alis\u00e9es Fait fr\u00e9quemment des erreurs, exige une surveillance permanente Produit un travail qu'il faut contr\u00f4ler r\u00e9guli\u00e8rement Fait des erreurs minimes qu'il ou elle parvient \u00e0 verbaliser et propose des solutions Travaille sans erreur Qualit\u00e9 du dialogue Justification Pas de r\u00e9ponse Pas clair Relativement clair mais manque parfois de pr\u00e9cision D\u00e9montre une capacit\u00e9 \u00e0 reformuler pour bien se faire comprendre"},{"location":"T06_BAC/bac/#grand-oral","title":"Grand Oral","text":"Qu'est-ce que c'est?D\u00e9roulement de l'\u00e9preuve\u00c9laboration de la questionJ'organise mon argumentaireGrille d'\u00e9valuation <ul> <li>Vous devez pr\u00e9parer deux sujets, dont au moins un a un rapport avec le programme de NSI. </li> <li>Ce sujet peut \u00eatre crois\u00e9 avec l'autre sp\u00e9cialit\u00e9.</li> <li>L'oral dure 20 minutes (10 minutes d'expos\u00e9 et 10 minutes d'\u00e9changes avec le jury) apr\u00e8s une pr\u00e9paration de 20 minutes. Le candidat a la possibilit\u00e9 d\u2019utiliser un tableau durant le second temps de l\u2019\u00e9preuve.</li> <li>L'\u00e9preuve repr\u00e9sente un coefficient 10 au bac g\u00e9n\u00e9ral.</li> </ul> <p>Le support r\u00e9alis\u00e9 pendant la pr\u00e9paration (vous avez le droit \u00e0 plusieurs feuilles de brouillon) peut \u00eatre conserv\u00e9 par l\u2019\u00e9l\u00e8ve et donn\u00e9 au jury (sch\u00e9ma, carte mentale, croquis, etc.).</p> <p> </p> <p>L\u2019analyse du sujet</p> <p>C\u2019est une \u00e9tape indispensable \u00e0 la pr\u00e9paration de la recherche documentaire mais aussi pour \u00e9laborer votre futur plan de votre oral et votre introduction. Pour cela, vous devez :</p> <ul> <li>d\u00e9finir les termes et les limites (chrono-spatiales) de votre sujet</li> <li>noter les notions en lien avec votre sujet et auxquelles il faudra faire r\u00e9f\u00e9rence au cours de votre oral</li> <li>noter les id\u00e9es-cl\u00e9s, dates essentielles, acteurs, etc.</li> </ul> <p>Les r\u00e9f\u00e9rences bibliographiques</p> <p>La recherche bibliographique est indispensable pour trouver les arguments et exemples n\u00e9cessaires \u00e0 votre oral. Les outils \u00e0 disposition :</p> <ul> <li> <p>Le moteur de recherche E-Sidoc, disponible depuis Lyc\u00e9e connect\u00e9 qui vous permet ensuite d\u2019avoir acc\u00e8s aux richesses de la m\u00e9diath\u00e8que, \u00e0 l\u2019Encyclop\u00e9dia Universalis et aux vid\u00e9os s\u00e9lectionn\u00e9es pour leur fiabilit\u00e9 par l\u2019INA.</p> <p>Petit tutoriel pour comprendre comment utiliser E-sidoc : https://youtu.be/EXnNfcqGT7M </p> </li> <li> <p>La m\u00e9diath\u00e8que du lyc\u00e9e : livres, p\u00e9riodiques, usuels (encyclop\u00e9dies, dictionnaires etc)</p> </li> <li>M\u00e9diath\u00e8que ou biblioth\u00e8que municipale</li> <li>Web : pr\u00e9f\u00e9rez les sites institutionnels aux blogs, les sites de journaux sp\u00e9cialis\u00e9s, ceux donn\u00e9s en page d'accueil par ex. (onglet Liens utiles).</li> </ul> <p>Conseils</p> <ul> <li>Varier les sources</li> <li>V\u00e9rifier la fiabilit\u00e9 de vos sources</li> <li>Noter vos r\u00e9f\u00e9rences afin de retrouver les informations</li> </ul> <p>Introduction</p> <p>Elle doit \u00eatre soign\u00e9e car elle donne la 1\u00e8re impression sur votre prestation orale. Elle doit comporter les \u00e9l\u00e9ments suivants :</p> <ul> <li>une accroche (ex : un fait d\u2019 actualit\u00e9 en lien avec le sujet etc.)</li> <li>d\u00e9finir les enjeux de votre Question et justifier le choix de votre sujet</li> <li>La QUESTION</li> <li>L\u2019annonce du plan</li> </ul> <p>D\u00e9veloppement</p> <ul> <li>Il est compos\u00e9 de parties (2 ou 3) qu\u2019il faut rappeler pour que votre jury puisse suivre votre expos\u00e9.</li> <li>Chaque partie comporte des sous-parties, chacune d\u2019elles pr\u00e9sentant un argument et un exemple pour appuyer votre d\u00e9monstration</li> </ul> <p>Conclusion</p> <p>Ne pas la n\u00e9gliger car c\u2019est la derni\u00e8re impression que vous laissez \u00e0 votre jury. Elle doit comporter </p> <ul> <li>la r\u00e9ponse claire \u00e0 votre QUESTION</li> <li>Le bilan de votre argumentation (elle peut comporter une ouverture)</li> </ul> <p>Ne pas oublier qu\u2019il s\u2019agit d\u2019un oral !</p> <p>Penser aussi aux \u00e9l\u00e9ments suivants (voir grille d\u2019\u00e9valuation) :</p> <ul> <li>la voix : \u00eatre audible avec un d\u00e9bit adapt\u00e9 et fluide</li> <li>le regard : dirig\u00e9 vers le jury (se d\u00e9tacher de ses notes)</li> <li>la respiration : faire de courtes pauses</li> <li>la posture : debout lors des 10 premi\u00e8res mn (puis vous pouvez vous assoir), droit , souriant</li> <li>la gestuelle : \u00e9viter les gestes parasites</li> <li>le vocabulaire/niveau de langue adapt\u00e9</li> <li>respecter le temps imparti (+/- 30 s)</li> </ul> <p> </p> <p> </p>"},{"location":"T07_Evaluations/accueil_eval/","title":"\u00c9valuations","text":""},{"location":"T07_Evaluations/accueil_eval/#evaluations","title":"\u00c9valuations","text":""},{"location":"T07_Evaluations/Devoirs_Libres/DL1/","title":"DL 0001 : le masque jetable","text":""},{"location":"T07_Evaluations/Devoirs_Libres/DL1/#dl-0001-le-masque-jetable","title":"DL 0001 : le masque jetable","text":"<p>Histoire de l'informatique</p> <p>L'algorithme de cryptographie du masque jetable est le seul qui offre une s\u00e9curit\u00e9 th\u00e9orique absolue. Cela a \u00e9t\u00e9 prouv\u00e9 en 1949 par Claude Shannon. Cependant pour que cet algorithme soit parfaitement s\u00fbr, il faut respecter 3 r\u00e8gles:</p> <ul> <li>la cl\u00e9 doit \u00eatre aussi longue que le message \u00e0 chiffrer;</li> <li>la cl\u00e9 doit \u00eatre g\u00e9n\u00e9r\u00e9e de fa\u00e7on al\u00e9atoire;</li> <li>la cl\u00e9 doit \u00eatre \u00e0 usage unique.</li> </ul> <p>Ces r\u00e8gles emp\u00eachent un usage pratique de cette m\u00e9thode, car il est tr\u00e8s compliqu\u00e9 de communiquer les cl\u00e9s. Certains gouvernements l'utilisent parfois, en faisant passer les cl\u00e9s par valise diplomatique.</p> <p>Pour une meilleure lisibilit\u00e9, des espaces sont plac\u00e9es dans les \u00e9critures binaires des nombres. Il ne faut pas les prendre en compte dans les calculs.</p>"},{"location":"T07_Evaluations/Devoirs_Libres/DL1/#introduction","title":"Introduction","text":"<p>Pour chiffrer un message, une m\u00e9thode, dite du masque jetable, consiste \u00e0 le combiner avec une cha\u00eene de caract\u00e8res de longueur comparable.</p> <p>Une impl\u00e9mentation possible utilise l\u2019op\u00e9rateur <code>XOR</code> (ou exclusif) dont voici la table de v\u00e9rit\u00e9 :</p> x y x XOR y F F F F V V V F V V V F <p>Dans la suite, les nombres \u00e9crits en binaire seront pr\u00e9c\u00e9d\u00e9s du pr\u00e9fixe <code>0b</code>.</p> <p>Pour chiffrer un message, on convertit chacun de ses caract\u00e8res en binaire (\u00e0 l\u2019aide du format Unicode), et on r\u00e9alise l\u2019op\u00e9ration <code>XOR</code> bit \u00e0 bit avec la cl\u00e9.</p> <p>On fournit pour cela la table ci-dessous qui associe \u00e0 l\u2019\u00e9criture hexad\u00e9cimale d\u2019un octet le caract\u00e8re correspondant (figure 2). Exemple de lecture : le caract\u00e8re correspondant \u00e0 l\u2019octet cod\u00e9 4A en hexad\u00e9cimal est la lettre J.</p> <p> </p> <p>Exemple: On souhaite chiffrer le message <code>'nsi'</code> avec la cl\u00e9 <code>'BAC'</code>.</p> <ul> <li> <p>On convertit chaque caract\u00e8re en binaire:</p> n s i Unicode (d\u00e9cimal) 110 115 105 Unicode (hexad\u00e9cimal) 6E 73 69 Binaire <code>0b 0110 1110</code> <code>0b 0111 0011</code> <code>0b 0110 1001</code> B A C Unicode (d\u00e9cimal) 66 65 67 Unicode (hexad\u00e9cimal) 42 41 43 Binaire <code>0b 0100 0010</code> <code>0b 0100 0001</code> <code>0b 0100 0011</code> </li> <li> <p>On obtient donc en binaire : <code>'nsi'</code> \u2192 <code>0b 0110 1110 0111 0011 0110 1001</code> et <code>'BAC'</code> \u2192 <code>0b 0100 0010 0100 0001 0100 0011</code>.</p> </li> <li> <p>On effectue un <code>XOR</code> bit \u00e0 bit : <code>'nsi' XOR 'BAC'</code> \u2192 <code>0b 0010 1100 0011 0010 0010 1010</code></p> </li> <li> <p>On r\u00e9cup\u00e8re les codes Unicode des 3 caract\u00e8res: <code>2C 32 2A</code>, donc le message chiffr\u00e9 est : <code>',2*'</code></p> </li> </ul>"},{"location":"T07_Evaluations/Devoirs_Libres/DL1/#enonce","title":"\u00c9nonc\u00e9","text":""},{"location":"T07_Evaluations/Devoirs_Libres/DL1/#partie-1","title":"Partie 1","text":"<p>Apr\u00e8s conversion en binaire, et avant que l\u2019op\u00e9ration <code>XOR</code> bit \u00e0 bit avec la cl\u00e9 n\u2019ait \u00e9t\u00e9 effectu\u00e9e, Alice obtient le message suivant :</p> <p><code>m = 0b 0110 0011 0100 0110</code></p> <ol> <li> <p>Le message <code>m</code> correspond \u00e0 deux caract\u00e8res cod\u00e9s sur 8 bits: d\u00e9terminer quels sont ces caract\u00e8res.</p> </li> <li> <p>Pour chiffrer le message d\u2019Alice, on r\u00e9alise l\u2019op\u00e9ration <code>XOR</code> bit \u00e0 bit avec la cl\u00e9 suivante :     <code>k = 0b 1110 1110 1111 0000</code></p> <p>Donner l\u2019\u00e9criture binaire du message obtenu.</p> </li> <li> <p>Dresser la table de v\u00e9rit\u00e9 de l\u2019expression bool\u00e9enne suivante : <code>(x XOR y) XOR y</code>.</p> </li> <li> <p>Bob conna\u00eet la cha\u00eene de caract\u00e8res utilis\u00e9e par Alice pour chiffrer le message. Quelle op\u00e9ration doit-il r\u00e9aliser pour d\u00e9chiffrer son message ? Le v\u00e9rifier.</p> </li> </ol>"},{"location":"T07_Evaluations/Devoirs_Libres/DL1/#partie-2-python","title":"Partie 2 - Python","text":"<p>En Python, l'op\u00e9rateur <code>XOR</code> est <code>^</code>. On peut faire un <code>XOR</code> directement sur deux nombres entiers, le <code>XOR</code> bit \u00e0 bit se fait implicitement:</p> <p></p><pre><code>&gt;&gt;&gt; 110 ^ 66\n44\n&gt;&gt;&gt; hex(44)\n'0x2c'\n</code></pre> Cet exemple montre que le ou exclusif sur <code>'n'</code> et <code>'B'</code> donne bien <code>','</code> (cf. introduction).<p></p> <p>Les fonctions Python permettant d'obtenir le code Unicode d'un caract\u00e8re et r\u00e9ciproquement sont <code>ord</code> et <code>chr</code>: </p><pre><code>&gt;&gt;&gt; ord('n')\n110\n&gt;&gt;&gt; chr(66)\n'B'\n</code></pre><p></p> <ol> <li>\u00c9crire une fonction <code>xor</code> qui prend deux caract\u00e8res en param\u00e8tre et renvoie le caract\u00e8re correspondant au ou exclusif sur leurs codes Unicode.</li> <li> <p>\u00c9crire une fonction <code>masque_jetable</code> qui correspond \u00e0 la sp\u00e9cification ci-dessous:</p> <pre><code>def masque_jetable(message:str, cle:str) -&gt; str:\n    '''\n    renvoie la cha\u00eene chiffr\u00e9e par la m\u00e9thode du masque jetable.\n    message: cha\u00eene \u00e0 chiffrer\n    cle: cl\u00e9 de chiffrement\n\n    Si la longueur de cle est inf\u00e9rieure \u00e0 celle de message, on revient au d\u00e9but de cle.\n    '''\n    pass\n</code></pre> </li> </ol>"},{"location":"T07_Evaluations/Devoirs_Libres/DL1/#partie-3-bonus","title":"Partie 3 - Bonus","text":"<p>R\u00e9soudre le pyd\u00e9fi suivant : La cl\u00e9 endommag\u00e9e </p> <p>Proposition de correction</p> <p>Partie 1</p> <ol> <li>Les deux caract\u00e8res sont cod\u00e9s respectivement par <code>63</code> et <code>46</code> en hexad\u00e9cimal, il s'agit donc des caract\u00e8res <code>'c'</code> et <code>'F'</code>.</li> <li>On obtient <code>1000 1101 1011 0110</code>.</li> <li> x y x XOR y (x XOR y) XOR y F F F F F V V F V F V V V V F V </li> <li>D'apr\u00e8s la table de v\u00e9rit\u00e9 pr\u00e9c\u00e9dente, on s'aper\u00e7oit que <code>(x XOR y) XOR y = x</code>, c'est-\u00e0-dire que deux <code>XOR</code> cons\u00e9cutifs par le m\u00eame nombre s'annulent. Pour d\u00e9chiffrer le message crypt\u00e9, il suffit donc d'effectuer un <code>XOR</code> du message crypt\u00e9 avec la cl\u00e9.</li> </ol> <p>Partie 2</p> <p>Notez l'utilisation du \u00abmodulo\u00bb (op\u00e9rateur <code>%</code>) pour revenir au d\u00e9but de la cl\u00e9. </p><pre><code>def xor(a:str, b:str) -&gt; str:\n    '''\n    revoie le r\u00e9sultat d'un XOR (ou exclusif) entre les caract\u00e8res\n    a et b, apr\u00e8s conversion en code Unicode\n    '''\n    return chr(ord(a) ^ ord(b))\n\ndef masque_jetable(message:str, cle:str) -&gt; str:\n    '''\n    renvoie la cha\u00eene chiffr\u00e9e par la m\u00e9thode du masque jetable.\n    message: cha\u00eene \u00e0 chiffrer\n    cle: cl\u00e9 de chiffrement\n\n    Si la longueur de cle est inf\u00e9rieure \u00e0 celle de message, on revient au d\u00e9but de cle.\n    '''\n    texte_chiffre = ''\n    for k in range(len(message)):\n        texte_chiffre += xor(message[k], cle[k%len(cle)])\n    return texte_chiffre\n</code></pre><p></p>"},{"location":"T07_Evaluations/Devoirs_Libres/DL2/","title":"DL 0010","text":""},{"location":"T07_Evaluations/Devoirs_Libres/DL2/#dl-0010","title":"DL 0010","text":"<p>Une entreprise souhaite g\u00e9rer les colis qu\u2019elle exp\u00e9die \u00e0 l\u2019aide d\u2019une application informatique. On sait que chaque colis a un identifiant unique, un poids, une adresse de livraison et un \u00e9tat. Pour chacun d\u2019entre eux, trois \u00e9tats sont possibles : \u00abpr\u00e9par\u00e9\u00bb, \u00abtransit\u00bb ou \u00ablivr\u00e9\u00bb.</p> <p>Pour cela, on a cr\u00e9\u00e9 une classe <code>Colis</code>  avec les attributs suivants:</p> <ul> <li><code>id</code> : un identifiant unique (de type <code>str</code> ) ;</li> <li><code>poids</code> : le poids du colis en kilogrammes (de type <code>float</code>) ;</li> <li><code>adresse</code> : l\u2019adresse de destination (de type <code>str</code>) ;</li> <li><code>etat</code> : l\u2019\u00e9tat du colis (de type <code>str</code> parmi <code>'pr\u00e9par\u00e9'</code>, <code>'transit'</code>, <code>'livr\u00e9'</code>).</li> </ul> <p>Lorsque l\u2019on cr\u00e9e une instance de la classe <code>Colis</code>, l\u2019attribut <code>etat</code> est initialis\u00e9 \u00e0 <code>'pr\u00e9par\u00e9'</code> tandis que les valeurs des autres attributs sont pass\u00e9es en param\u00e8tres.</p> <p>Voici le d\u00e9but du code Python de la classe <code>Colis</code>:</p> <pre><code>class Colis:\n    def __init__(self, id, poids, adresse):\n        self.id = id\n        self.poids = poids\n        self.adresse = adresse\n        self.etat = 'pr\u00e9par\u00e9'\n</code></pre> <p>On cr\u00e9e, par exemple, les deux colis suivants :</p> <pre><code>colisA = Colis('AC12', 5.0, '20 rue de la paix 57000 Metz')\ncolisB = Colis('AF34', 10.25, '32 rue du centre 57000 Metz')\n</code></pre> <p>Question 1</p> <p>\u00c9crire la m\u00e9thode <code>passer_transit</code> de la classe <code>Colis</code> qui permet de mettre l\u2019\u00e9tat du colis \u00e0 la valeur <code>'transit'</code>. </p> <p>On dispose de la fonction <code>ajouter_colis</code> suivante : </p><pre><code>def ajouter_colis(liste, colis):\n    '''\n    ajoute le colis \u00e0 la fin de la liste\n    '''\n    liste.append(colis)\n</code></pre><p></p> <p>Par exemple, apr\u00e8s l\u2019ex\u00e9cution des trois instructions suivantes, on a ajout\u00e9 les deux colis cr\u00e9\u00e9s pr\u00e9c\u00e9demment \u00e0 la liste <code>liste_colis</code> : </p><pre><code>liste_colis = []\najouter_colis(liste_colis, colisA)\najouter_colis(liste_colis, colisB)\n</code></pre><p></p> <p>Question 2</p> <p>Dans cette question uniquement, on consid\u00e8re que l\u2019acheminement des colis de plus de 25 kg est refus\u00e9 par le transporteur. Recopier et modifier le code de la fonction <code>ajouter_colis</code> afin qu\u2019elle ajoute le colis \u00e0 la liste si son poids est inf\u00e9rieur ou \u00e9gal \u00e0 25 kg et qu\u2019elle affiche le message <code>\u00abD\u00e9passement du poids maximal autoris\u00e9\u00bb</code> sinon.</p> <p>Question 3</p> <p>\u00c9crire une fonction <code>nb_colis</code> qui prend en param\u00e8tre une liste d\u2019objets de la classe <code>Colis</code> et qui renvoie le nombre de colis pr\u00e9sents dans cette liste.</p> <p>Question 4</p> <p>Recopier et compl\u00e9ter les lignes 2 et 4 du code ci-apr\u00e8s de la fonction <code>poids_total</code> qui prend en param\u00e8tre une liste d\u2019objets de la classe <code>Colis</code> et qui renvoie le poids total de l\u2019ensemble des colis de cette liste.</p> <pre><code>def poids_total(liste):\n    total = ...\n    for c in liste :\n        total = ...\n    return total\n</code></pre> <p>Question 5</p> <p>\u00c9crire une fonction <code>liste_colis_etat</code> qui prend en param\u00e8tres une liste d\u2019objets de la classe <code>Colis</code> et une cha\u00eene de caract\u00e8res <code>statut</code> (parmi <code>'pr\u00e9par\u00e9'</code>, <code>'transit'</code> ou <code>'livr\u00e9'</code>) et qui renvoie une nouvelle liste contenant l\u2019ensemble des colis de cette liste dont l\u2019\u00e9tat est le m\u00eame que <code>statut</code>.</p> <p>L\u2019entreprise tente d\u2019optimiser, \u00e0 l\u2019aide d\u2019un algorithme glouton, le chargement des colis dans un camion ayant une capacit\u00e9 exprim\u00e9e en kilogrammes, sans tenir compte de la contrainte de volume. La proc\u00e9dure gloutonne adopt\u00e9e est la suivante : on charge les colis dans le camion en les choisissant par ordre d\u00e9croissant de leur poids, sans d\u00e9passer la capacit\u00e9 du camion.</p> <p>Pour cela, il est n\u00e9cessaire de travailler sur une liste de colis tri\u00e9s par ordre de poids d\u00e9croissants. La fonction <code>tri_decroissant</code> permet de r\u00e9aliser ce tri.</p> <pre><code>def tri_decroissant(liste):\n    n = len(liste)\n    for i in range(n - 1):\n        min_pos = i\n        for j in range(i + 1, n):\n            if liste[j].poids &gt; liste[min_pos].poids:\n                min_pos = j\n        # \u00c9changer les \u00e9l\u00e9ments\n        temp = liste[i]\n        liste[i] = liste[min_pos]\n        liste[min_pos] = temp\n    return liste\n</code></pre> <p>Question 6</p> <p>Donner le nom du tri utilis\u00e9 dans la fonction <code>tri_decroissant</code> ainsi que son co\u00fbt dans le pire des cas.  </p> <p>Le code Python ci-apr\u00e8s pr\u00e9sente la fonction r\u00e9cursive <code>chargement_glouton</code> dont les param\u00e8tres sont :</p> <ul> <li><code>liste</code> : une liste de colis tri\u00e9es par poids d\u00e9croissants ;</li> <li><code>rang</code> : un indice compris entre <code>0</code> inclus et <code>len(liste)</code> inclus ;</li> <li><code>charge</code> : une charge exprim\u00e9e en kilogrammes ;</li> </ul> <p>et qui renvoie la liste des colis \u00e0 charger en appliquant l\u2019algorithme glouton, en supposant que la charge restante dans le camion est <code>capacit\u00e9</code>, et en ne consid\u00e9rant que les colis de <code>liste</code> d\u2019indice sup\u00e9rieur ou \u00e9gal \u00e0 <code>rang</code>.</p> <pre><code>def chargement_glouton(liste, rang, capacite):\n    if rang == len(liste):\n        return ...\n    elif liste[rang].poids &lt;= ...:\n        return ... + chargement_glouton(liste, ..., ...)\n    else:\n        return chargement_glouton(liste, ..., ...)\n</code></pre> <p>Question 7</p> <p>Recopier et compl\u00e9ter le code ci-dessus de la fonction <code>chargement_glouton</code>.</p> <p>Question 8</p> <p>Expliquer bri\u00e8vement pourquoi, lors d\u2019un appel \u00e0 la fonction <code>chargement_glouton</code>, on peut obtenir l\u2019erreur suivante.</p> <pre><code>RecursionError: maximum recursion depth exceeded while\ncalling a Python object.\n</code></pre> <p>Question 9</p> <p>\u00c9crire une fonction <code>chargement_glouton2</code> it\u00e9rative (sans r\u00e9cursivit\u00e9) qui prend en param\u00e8tres <code>liste</code> une liste de colis tri\u00e9s par poids d\u00e9croissants et <code>capacite</code> la capacit\u00e9 du camion exprim\u00e9e en kilogrammes, et qui renvoie la liste des colis \u00e0 charger pour maximiser le poids total sans d\u00e9passer la capacit\u00e9.</p> <p>On pourra cr\u00e9er une liste <code>colis_a_charger</code>, puis parcourir les colis tri\u00e9s en les ajoutant \u00e0 cette liste tant que le poids total n\u2019exc\u00e8de pas la capacit\u00e9 du camion.</p>"},{"location":"T07_Evaluations/Devoirs_Libres/accueil/","title":"Devoirs en temps libre","text":""},{"location":"T07_Evaluations/Devoirs_Libres/accueil/#devoirs-en-temps-libre","title":"Devoirs en temps libre","text":"<p>Ces devoirs ont plusieurs objectifs:</p> <ul> <li>r\u00e9viser un ancien chapitre;</li> <li>pr\u00e9parer un nouveau chapitre pour gagner du temps en classe;</li> <li>s'exercer et progresser en vue des \u00e9preuves finales.</li> </ul> <p>Vous devez donc les travailler (ce qui ne signifie pas tout r\u00e9ussir \u00e0 chaque fois) de fa\u00e7on personnelle.</p> <p>Ce que je ne veux pas voir dans votre travail:</p> <p> </p>"},{"location":"T07_Evaluations/Devoirs_Surveill%C3%A9s/accueil/","title":"Devoirs surveill\u00e9s","text":""},{"location":"T07_Evaluations/Devoirs_Surveill%C3%A9s/accueil/#devoirs-surveilles","title":"Devoirs surveill\u00e9s","text":"<p>Vous trouverez ici les corrig\u00e9s des devoirs surveill\u00e9s. Pour rappel, un devoir ne se termine pas au moment o\u00f9 on re\u00e7oit sa note, il faut reprendre le devoir avec le corrig\u00e9 pour comprendre ses erreurs. Il est bon \u00e9galement de refaire un exercice du devoir quelques temps apr\u00e8s pour v\u00e9rifier qu'on a bien assimil\u00e9 les notions et la correction.</p> <p> </p>"},{"location":"T08_Divers/01_GitHub/Github/","title":"Github","text":""},{"location":"T08_Divers/Projets/Projet1/","title":"Projet 1","text":""},{"location":"T08_Divers/Projets/Projet1/#projet-1","title":"Projet 1","text":""},{"location":"T08_Divers/Projets/Projet1/#le-jeu-de-la-vie-de-john-conway","title":"Le jeu de la vie de John Conway","text":"<p>\u00c9nonc\u00e9</p> <p>On consid\u00e8re une grille - th\u00e9oriquement infinie - dont les cases appell\u00e9es cellules peuvent prendre deux \u00e9tats distincts : \u00abvivante\u00bb ou \u00abmorte\u00bb.</p> <p>Une cellule poss\u00e8de huit voisins : les cellules adjacentes horizontalement, verticalement et diagonalement.</p> <p>\u00c0 chaque g\u00e9n\u00e9ration, les cellules peuvent changer d'\u00e9tat ou conserver leur \u00e9tat selon les r\u00e8gles suivantes:</p> <ul> <li>si une cellule morte poss\u00e8de exactement 3 cellules voisines vivantes, alors elle devient vivante (elle na\u00eet);</li> <li>si une cellule vivante poss\u00e8de 2 ou 3 cellules vivantes, alors elle reste vivante, sinon elle meurt.</li> </ul> <p>L'objectif est de simuler, g\u00e9n\u00e9ration apr\u00e8s g\u00e9n\u00e9ration, l'\u00e9tat de la grille.</p> <p>Exemple:</p> 123456789101112 <p> </p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p>Consignes</p> <ul> <li>Le programme principal devra contenir deux classes: <code>Cellule</code> et <code>Jeu</code>.</li> <li>La classe <code>Jeu</code> devra contenur (entre autres):<ul> <li>un attribut <code>grille</code>: un tableau d'objets <code>Cellule</code></li> <li>une m\u00e9thode <code>actualisation</code> (ou <code>update</code>) qui consistera \u00e0 actualiser l'\u00e9tat de la grille (c'est \u00e0 dire de chacune de ses cellules) ainsi qu'\u00e0 afficher la grille.</li> </ul> </li> <li>L'\u00e9tat initial de la grille sera choisi al\u00e9atoirement.</li> <li>Utiliser le module <code>pygame</code> pour animer la grille g\u00e9n\u00e9ration apr\u00e8s g\u00e9n\u00e9ration.</li> </ul> <p>La boucle des \u00e9v\u00e9nements sera donc r\u00e9duite \u00e0 (avec par exemple <code>j</code> instance de la classe <code>Jeu</code>): </p><pre><code>continuer = True\nwhile continuer:\n    for evenement in pygame.event.get(): \n        if evenement.type == QUIT:\n            continuer = False\n\n    j.actualisation()\n    pygame.display.flip()\n    pygame.time.delay(100)\n</code></pre><p></p> <p>Grille d'\u00e9valuation</p> <p>Sur ce projet, vous serez \u00e9valu\u00e9s sur la grille suivante:</p> Item Contenu Points POO Les classes sont correctement con\u00e7ues et l'interface est coh\u00e9rente et claire. L'utilisation de la POO est ma\u00eetris\u00e9e (utilisation de setters par ex.). 5 Travail de groupe Les t\u00e2ches sont d\u00e9finies et r\u00e9parties au sein du groupe 3 Projet abouti Le projet tourne sans erreur et r\u00e9pond aux consignes. 4 Qualit\u00e9 du code Code a\u00e9r\u00e9, sp\u00e9cifi\u00e9, lisible, noms de variables pertinents... 4 Oral Restitution orale 4 Total 20 Bonus Code en  2 Malus Code r\u00e9cup\u00e9r\u00e9 sur le web (ChatGPT, forums, github, etc) -50, Game Over"},{"location":"T08_Divers/Projets/Projet2/","title":"(Mini-) Projet 2","text":""},{"location":"T08_Divers/Projets/Projet2/#mini-projet-2","title":"(Mini-) Projet 2","text":"<p>Authentification</p> \u00c9nonc\u00e9Proposition de correction (a minima) <p>Dans ce mini-projet, vous devez \u00e9crire un syst\u00e8me d'authentification par login/mot de passe \u00e0 un service qui permet de stocker une phrase secr\u00e8te. Comme pr\u00e9c\u00e9demment le menu doit contenir trois choix:</p> <ul> <li>login : s'authentifier puis afficher la phrase secr\u00e8te. Proposer de changer cette phrase.</li> <li>register: s'enregistrer puis saisir la phrase secr\u00e8te \u00e0 stocker.</li> <li>quit: pour ... quitter le programme.</li> </ul> <p>Remarques:</p> <ul> <li>les donn\u00e9es doivent bien entendu \u00eatre stock\u00e9es dans une base de donn\u00e9es.</li> <li>on ne doit pas pouvoir choisir un login d\u00e9j\u00e0 utilis\u00e9.</li> <li>les mots de passe doivent \u00eatre hach\u00e9s. Voir ici  pour le principe et ici pour la fonction de hachage \u00e0 utiliser.</li> </ul> <p>Ouvertures:</p> <ul> <li>Proposer de changer le mot de passe.</li> <li>V\u00e9rifier la force du mot de passe propos\u00e9 (calcul d'entropie).</li> </ul> <pre><code>import sqlite3\nimport hashlib\n\ndef hachage(chaine:str) -&gt; str:\n    '''\n    renvoie le condens\u00e9 de chaine en utilisant la fonction de\n    hachage md5 du module hashlib.\n    '''\n    return hashlib.md5(chaine.encode()).hexdigest()\n\ndef register():\n    go = True\n    while go:\n        nom = input(\"Choix de l'identifiant : \")\n        rq = c.execute(\"SELECT * FROM users WHERE pseudo = ?;\", [nom])\n        resultat = rq.fetchone()\n        if resultat is None:\n            mdp = input(\"Choix du mdp : \")\n            ps = input(\"Saisissez votre phrase secr\u00e8te : \")\n            c.execute(\"INSERT INTO users VALUES (?, ?, ?);\", [nom, hachage(mdp), ps])\n            go = False\n        else:\n            print(\"Identifiant d\u00e9j\u00e0 attribu\u00e9. Veuillez recommencer.\")\n\n\ndef login():\n    nom = input('Identifiant ? ')\n    rq = c.execute(\"SELECT * FROM users WHERE pseudo = ?;\", [nom])\n    resultat = rq.fetchone()\n    if resultat is None:\n        print(\"Identifiant inconnu\")\n    else:\n        mdp = input('Mot de passe ? ')\n        mdp_hash = hachage(mdp)\n        if mdp_hash == resultat[1]:\n            print('Authentification r\u00e9ussie')\n            menu_login(nom)\n        else:\n            print('Mot de passe erron\u00e9')\n\ndef menu_login(user):\n    go = True\n    while go:\n        print(15 * \"-\" + \"\\n1. Consulter la phrase secr\u00e8te\\n2. Modifier la phrase secr\u00e8te\\n3. Quitter\\n\" + 15 * \"-\")\n        choix = input(\"Votre choix: \")\n        if choix == '1':\n            consulter(user)\n        elif choix == '2':\n            modifier(user)\n        else:\n            go = False\n\ndef consulter(user):\n    rq = c.execute(\"SELECT content FROM users WHERE pseudo = ?;\", [user])\n    print(f\"Phrase secr\u00e8te: {rq.fetchone()[0]}\")\n\ndef modifier(user):\n    ps = input(\"Saisissez votre nouvelle phrase secr\u00e8te : \")\n    c.execute(\"UPDATE users SET content = ? WHERE pseudo = ?;\", [ps, user])\n    print(\"Modification effectu\u00e9e\")\n\n#Connexion\nconnexion = sqlite3.connect('miniprojet.db')\n\n#R\u00e9cup\u00e9ration d'un curseur\nc = connexion.cursor()\n\n# ---- d\u00e9but des instructions SQL\n\n#Cr\u00e9ation d'une table\nc.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS users(\n    pseudo TEXT PRIMARY KEY,\n    mdp INTEGER,\n    content TEXT);\n    \"\"\")\n\n#c.execute(\"DELETE FROM users;\")\n\ngo = True\n\nwhile go:\n    print(15 * \"-\"+\"\\nMenu \\n1. login\\n2. register\\n3. quit\\n\" + 15 * \"-\")\n    choix = input(\"Votre choix: \")\n    if choix == '1':\n        login()\n    elif choix == '2':\n        register()\n    else:\n        go = False\n\n# ---- fin des instructions SQL\n\n#Validation\nconnexion.commit()\n\n#D\u00e9connexion\nconnexion.close()\n</code></pre>"},{"location":"T09_Extras/Dijkstra/","title":"Algorithme de Dijkstra","text":""},{"location":"T09_Extras/Dijkstra/#algorithme-de-dijkstra","title":"Algorithme de Dijkstra","text":"<p>L'algorithme de Dijkstra est un algorithme qui permet de trouver le plus court chemin dans un graphe pond\u00e9r\u00e9.</p> <p> </p> <p>Cet algorithme (ou plut\u00f4t son optimisation A*) est utilis\u00e9 par exemple par les logiciels de cartographie ou applications GPS pour vous indiquer le plus court chemin d'un point \u00e0 un autre, en tenant compte en temps r\u00e9el des conditions de parcours.</p> <p>Il peut \u00eatre \u00e9galement utilis\u00e9 pour d\u00e9terminer le parcours le plus efficace dans le protocole de routage OSPF.</p> <p>Principe de l'algorithme</p> <p>L'id\u00e9e est de calculer \u00e0 chaque \u00e9tape la distance la plus courte de chaque sommet \u00e0 un sommet de d\u00e9part, en notant de quel sommet on arrive pour obtenir cette plus courte distance.</p> <p>En pratique:</p> <ul> <li>On commence par choisir un sommet de d\u00e9part, qu'on place dans un tableau avec une distance de 0, et on note \\(\\infty\\) la distance de tous les autres sommets au sommet de d\u00e9part;</li> <li>pour chaque sommet adjacent au sommet de d\u00e9part on note (dans un tableau) les distances qui les s\u00e9parent;</li> <li>pour le sommet le plus proche, on recommence l'op\u00e9ration pour les sommets adjacents non d\u00e9j\u00e0 visit\u00e9s en additionnant les distances pr\u00e9c\u00e9dentes;</li> <li>on recommence jusqu'\u00e0 avoir \u00e9puis\u00e9 tous les sommets.</li> </ul> <p>Exemple</p> <p>Dans le graphe ci-dessous on souhaite d\u00e9terminer le plus court chemin entre le sommet A et le sommet H.</p> <p> </p> TableauDe AChoix suivantDe BDe DDe FDe EFin <p>On commence par construire un tableau avec une colonne par sommet, et une colonne indiquant le sommet choisi \u00e0 chaque \u00e9tape. On initialise la colonne du sommet de d\u00e9part (distance de 0 de A) et les croix indiquent que ce sommet est visit\u00e9, on ne le visite plus durant le reste de l'algorithme.</p> A B C D E F G H Choix 0 \u221e \u221e \u221e \u221e \u221e \u221e \u221e A(0) x x x x x x x <p>Les sommets adjacents de A sont B et D, on actualise le tableau avec leur distance de A, en pr\u00e9cisant qu'on provient de A.</p> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x x x x x x <p>On choisit alors le sommet le plus proche de A, ici B, et on indique qu'on ne le visitera plus.</p> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x B(12-A) x x x x x x x x x x x x <p>Depuis B, on peut d\u00e9sormais joindre les sommets F, G, et H dont on obtient les distances depuis A en additionnant leurs distances de B \u00e0 la distance de B \u00e0 A, soit par exemple 9+12=21 pour F. Les autres sommets ne sont pas encore atteints, on laisse \u221e.</p> <p>On recommencera ensuite avec le sommet D, qui poss\u00e8de la plus courte distance depuis A.</p> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x \u221e 14-A \u221e 21-B 28-B 33-B B(12-A) x x x x x x x x x x x x <p>De D on ne peut visiter que E, les autres distances sont inchang\u00e9es. On recommence avec F.</p> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x \u221e 14-A \u221e 21-B 28-B 33-B B(12-A) x x \u221e x 24-D 21-B 28-B 33-B D(14-A) x x x x x x x x x x x x x x x <p>De F on peut visiter C, et on trouve un meilleur chemin vers H, dont on actualise la distance. Les autres distances sont inchang\u00e9es. On recommence avec E.</p> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x \u221e 14-A \u221e 21-B 28-B 33-B B(12-A) x x \u221e x 24-D 21-B 28-B 33-B D(14-A) x x 31-F x 24-D x 28-B 32-F F(21-B) x x x x x x x x x x x x x x x x <p>De E, rien d'int\u00e9ressant. On recommence avec G, puis C et enfin FH pour lesquels aucune meilleure distance n'est trouv\u00e9e.</p> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x \u221e 14-A \u221e 21-B 28-B 33-B B(12-A) x x \u221e x 24-D 21-B 28-B 33-B D(14-A) x x 31-F x 24-D x 28-B 32-F F(21-B) x x 31-F x x x 28-B 32-F E(24-D) x x x x x x x x x x x x x x x <p>Une fois tous les sommets du graphe visit\u00e9s, on obtient le tableau suivant. On obtient alors que la plus courte distance de A vers H est 32, mais on obtient aussi:</p> <ul> <li>le chemin \u00e0 emprunter en remontant les choix : H \u2190 F \u2190 B \u2190 A</li> <li>la plus courte distance de n'importe quel sommet \u00e0 A.</li> </ul> A B C D E F G H Choix 0 12-A \u221e 14-A \u221e \u221e \u221e \u221e A(0) x x \u221e 14-A \u221e 21-B 28-B 33-B B(12-A) x x \u221e x 24-D 21-B 28-B 33-B D(14-A) x x 31-F x 24-D x 28-B 32-F F(21-B) x x 31-F x x x 28-B 32-F E(24-D) x x 31-F x x x x 32-F G(28-B) x x x x x x x 32-F C(31-F) x x x x x x x x H(32-F) <p>Exercice  1</p> \u00c9nonc\u00e9Correction <p>D\u00e9terminer le chemin le plus court entre les sommets A et G dans le graphe donn\u00e9 en exemple en haut de la page.</p> <p>Exercice  2</p> \u00c9nonc\u00e9Correction <p>Voici la repr\u00e9sentation d'un r\u00e9seau avec les co\u00fbts de liaison. Compl\u00e9ter la table de routage du routeur F</p> <p> </p> Destination Co\u00fbt F 0 G 8 H 5 I J K L"},{"location":"T09_Extras/Hachage/","title":"Fonctions de hachage","text":""},{"location":"T09_Extras/Hachage/#fonctions-de-hachage","title":"Fonctions de hachage","text":"<p>Principe</p> <p>Une fonction de hachage a pour but de transformer une donn\u00e9e informatique en un condens\u00e9 (ou hash) de sorte que:</p> <ul> <li>une m\u00eame donn\u00e9e donne toujours le m\u00eame condens\u00e9;</li> <li>le proc\u00e9d\u00e9 est irr\u00e9versible;</li> <li>deux donn\u00e9es diff\u00e9rentes ne doivent pas donner le m\u00eame condens\u00e9 (sinon on parle de collision).</li> </ul> <p> </p> <p>\u00c0 quoi \u00e7a sert?</p> <p>Le condens\u00e9 d'une donn\u00e9e/d'un fichier sert \u00e0 le caract\u00e9riser , avec beaucoup moins de bits!</p> <ul> <li>signatures \u00e9lectroniques</li> <li>v\u00e9rifier l'int\u00e9grit\u00e9</li> <li>s\u00e9curiser </li> <li>cr\u00e9er une blockchain...</li> </ul> <p>En ligne de commande</p> <pre><code>~$ echo -n \"la NSI, c'est de l'eau\" | md5sum\n194f05d7fb42018fb798a395039e778c  -\n~$ echo -n \"la NSI, c'est de l'eau!\" | md5sum\nb8229a03e391dfc901a2e6c2f3a6e3cd  -\n~$ echo -n \"la NSI, c'est de l'eau!\" | sha256sum \n1dae53cba7ff51a81d6a8a3a6c23935dcc9040f0c6a33058d8e12f025a4d7d29  -\n</code></pre> <p>Avec Python</p> <p>On utilise le module <code>hashlib</code> qui contient les principaux algorithmes de hachage : MD5, SHA-1, SHA-256, etc.</p> <pre><code>import hashlib\n\ndef hachage(chaine:str) -&gt; str:\n    '''\n    renvoie le condens\u00e9 de chaine en utilisant la fonction de\n    hachage md5 du module hashlib.\n    '''\n    return hashlib.md5(chaine.encode()).hexdigest()\n</code></pre>"},{"location":"T09_Extras/Image/","title":"Manipulation d'images avec PIL (pillow)","text":""},{"location":"T09_Extras/Image/#manipulation-dimages-avec-pil-pillow","title":"Manipulation d'images avec PIL (pillow)","text":"<p>Exemple</p> <p>Pour illustrer la manipulation d'images, nous allons r\u00e9soudre (ou tenter de r\u00e9soudre) un des probl\u00e8mes du concours Cod\u00e9moi 2022-2023: \u00abLe ciel de Bletchley Park\u00bb.</p> <p>En voici l'\u00e9nonc\u00e9:</p> <p>Vous venez tout juste de r\u00e9cup\u00e9rer une photo de Bletchley Park. Le ciel n\u2019est pas toujours bleu dans le Buckingamshire, mais il a vraiment une couleur curieuse sur cette photo, tout comme les nuages.</p> <p> </p> <p>En allant jusqu\u2019au bout... vous trouverez un mot de passe.</p> <p>Le module <code>PIL</code> (Python Imaginig Library) ou son fork pillow est un puissant module Python permettant la cr\u00e9ation et la manipulation d'images.</p> <p>Pour l'installer en ligne de commande, ouvrir un terminal et taper:</p> <pre><code>pip install pillow\n</code></pre>"},{"location":"T09_Extras/Image/#1-instructions-de-base","title":"1- Instructions de base","text":"<p>Dans le code ci-dessous:</p> <ul> <li>ligne 1: on importe le module (ligne 1)</li> <li>ligne 3: on charge une image existante (dans le m\u00eame dossier que le fichier <code>.py</code> !) dans une variable qui sera un tableau (\u00e0 deux dimensions) de tuples contenant les composantes RGB des pixels</li> <li>ligne 5: on affiche l'image </li> <li>ligne 6: on sauvegarde l'image (sous un nouveau nom de fichier). </li> </ul> <pre><code>from PIL import Image\n\nimg = Image.open(\"image.png\")\n\nimg.show()\nimg.save(\"monimage.png\")\n</code></pre> <p>\u00c0 vous de jouer</p> <p>Enregistrer l'image ci-dessus dans un de vos dossier, puis enregistrer le code ci-dessus dans un fichier dans le m\u00eame dossier. \u00c9x\u00e9cuter le code, puis r\u00e9cup\u00e9rer en console les dimensions de l'image par:</p> <pre><code>&gt;&gt;&gt; img.width, img.height\n</code></pre>"},{"location":"T09_Extras/Image/#2-gestion-des-pixels","title":"2- Gestion des pixels","text":"<p>Les deux m\u00e9thodes fondamentales sont <code>getpixel()</code>  pour acc\u00e9der \u00e0 un pixel de l'image, et <code>putpixel()</code> pour modifier un pixel de l'image. Attention, les coordonn\u00e9es du pixel doivent \u00eatre donn\u00e9es sous forme d'un tuple.</p> <p>Par exemple:</p> <pre><code>img.getpixel((50, 100))              # r\u00e9cup\u00e8re un tuple correspondant au pixel de coordonn\u00e9es (50, 100)\nimg.putpixel((50, 100), (255, 0, 0)) # affecte la couleur rouge au pixel de coordonn\u00e9es (50, 100)\n</code></pre> <p>\u00c0 vous de jouer</p> <p>En console, afficher plusieurs pixels dont les coordonn\u00e9es seront choisies au hasard.</p> <p>Que remarquez-vous \u00e0 propos de la composante bleue?</p> <p>Maintenant, pour traiter une image, il faut travailler pixel par pixel... pour tous les pixels de l'image. Il faut donc utiliser les m\u00e9thodes <code>getpixel()</code> et/ou <code>putpixel()</code> pour toutes les coordonn\u00e9es <code>(x, y)</code> possibles.</p> <p>On utilisera donc une double boucle imbriqu\u00e9e sur les dimensions de l'image (\u00e0 compl\u00e9ter dans le code ci-dessous.</p> <pre><code>for x in range(img.    ):\n    for y in range(img.    ):\n        # traitement du pixel\n</code></pre> <p>\u00c0 vous de jouer</p> <p>\u00c9crire un programme qui r\u00e9sout le probl\u00e8me, c'est-\u00e0-dire qui met en relief ce qu'on a remarqu\u00e9 pr\u00e9c\u00e9demment sur les composantes bleues. On pourra soit modifier en place la variable <code>img</code> soit cr\u00e9er une nouvelle image (voir ci-dessous).</p>"},{"location":"T09_Extras/Image/#3-complements","title":"3- Compl\u00e9ments","text":"<p>Cr\u00e9er une image vierge (de 200 pixels sur 300 par exemple), avec un fond blanc:</p> <pre><code>img = Image.new(\"RGB\", (200, 300), (255, 255, 255))\n</code></pre>"},{"location":"T09_Extras/Trucs/","title":"Trucs","text":""},{"location":"T09_Extras/Trucs/#trucs","title":"Trucs","text":""},{"location":"T09_Extras/Hidden/WTF/","title":"ABR, POO et m\u00e9thode infixe","text":""},{"location":"T09_Extras/Hidden/WTF/#abr-poo-et-methode-infixe","title":"ABR, POO et m\u00e9thode infixe","text":"<p>Tout d'abord merci de prendre le temps de lire ceci.</p>"},{"location":"T09_Extras/Hidden/WTF/#prequel","title":"Prequel","text":"<p>Je suis en train de terminer - pour la premi\u00e8re ann\u00e9e d'enseignement de NSI en Terminale - le chapitre sur les arbres, notamment les ABR ce matin<sup>1</sup>.</p> <p>\u00c0 propos de la repr\u00e9sentation des arbres binaires \u00e0 l'aide de classes, j'ai d\u00e9j\u00e0 longuement h\u00e9sit\u00e9 entre plusieurs fa\u00e7ons de faire, vues dans la litt\u00e9rature, au DIU, etc:</p> <ul> <li>deux classes <code>Noeud</code> et <code>Arbre</code>;</li> <li>une seule classe <code>Noeud</code>;</li> <li>une seule classe <code>Arbre</code>.</li> </ul> <p>J'ai finalement opt\u00e9 pour cette derni\u00e8re option, apr\u00e8s avoir lu ce billet.</p> <p>J'obtiens donc l'impl\u00e9mentation suivante<sup>2</sup> pour les ABR, dans laquelle je d\u00e9cide d'int\u00e9grer les diff\u00e9rents algos au programme en tant que m\u00e9thodes et non fonctions hors de la classe<sup>3</sup>:</p> <pre><code>class ABR:\n    def __init__(self, cle=None):\n        self.cle = cle\n        if self.cle is not None:\n            self.gauche = ABR()\n            self.droit = ABR()\n\n    def est_vide(self):\n        return self.cle is None\n\n    def infixe(self):\n        if not self.est_vide():\n            self.gauche.infixe()\n            print(self.cle)\n            self.droit.infixe()\n\n    def inserer_cle(self, cle):\n        if self.est_vide():\n            self.cle = cle\n            self.gauche = ABR()\n            self.droit = ABR()\n        elif cle &lt; self.cle:\n            self.gauche.inserer_cle(cle)\n        else:\n            self.droit.inserer_cle(cle)\n\n    def inserer_cles(self, liste_cles):\n        for cle in liste_cles:\n            self.inserer_cle(cle)\n\n    def affiche(self, indent = 0):\n        s = ' '*2*indent + '|_' + str(self.cle) + '\\n'\n        if not self.gauche.est_vide():\n            s += self.gauche.affiche(indent + 1)\n        if self.gauche.est_vide() and not self.droit.est_vide():\n            s += ' '*(2*indent+2) + '|' + '_' + 'None' + '\\n'     \n\n        if not self.droit.est_vide():\n            s += self.droit.affiche(indent + 1)\n        if self.droit.est_vide() and not self.gauche.est_vide():\n            s += ' '*(2*indent+2) + '|' + '_' + 'None' + '\\n'  \n        return s\n\n    def __repr__(self):\n        return self.affiche(0)\n\n# ABR exemple    \na = ABR()\na.inserer_cles([5, 4, 2, 7])\n</code></pre>"},{"location":"T09_Extras/Hidden/WTF/#s01e01","title":"S01E01","text":"<p>J'en arrive alors \u00e0 un exercice o\u00f9 je demande aux \u00e9l\u00e8ves d'\u00e9crire une m\u00e9thode (ou fonction, comme ils veulent) qui permet de d\u00e9terminer si un arbre binaire donn\u00e9 est un ABR ou non. Je les laisse libre de la m\u00e9thode et plusieurs d\u00e9cident de v\u00e9rifier que le r\u00e9sultat du parcours infixe est tri\u00e9 dans l'ordre croissant, suite \u00e0 la remarque pr\u00e9c\u00e9dente du cours (que vous trouverez habilement sur ce site).</p> <p>Bien entendu (?), pour illustrer le parcours pr\u00e9fixe, j'avais opt\u00e9 pour un traitement de la racine r\u00e9duit \u00e0 un affichage<sup>4</sup>.</p> <p>Se pose donc la question d'adapter la m\u00e9thode <code>infixe</code> pour qu'elle retourne une liste des n\u0153uds visit\u00e9s dans l'ordre infixe.</p> <p>Stupeur</p> <p>Je m'aper\u00e7ois avec effroi que je n'ai pas vraiment anticip\u00e9 la m\u00e9thode car il me semble que ce n'est pas tr\u00e8s bon en terme de complexit\u00e9, n'est-ce pas?</p> <p>J'essaie alors de r\u00e9fl\u00e9chir avec les neurones dont je dispose. D'habitude, lorsque je dois faire un DFS - plut\u00f4t sur un graphe -  je stocke dans une variable globale (je sais, je sais) les sommets/n\u0153uds visit\u00e9s. Et je me dis qu'en POO \u00e0 l'int\u00e9rieur de la classe \u00e7a va \u00eatre compliqu\u00e9...</p> <p>Des \u00e9l\u00e8ves proposent donc d'utiliser une liste en param\u00e8tre de la m\u00e9thode et d'y ajouter successivement les cl\u00e9s des n\u0153uds visit\u00e9s. On obtient alors cette modification de la m\u00e9thode <code>infixe</code>:</p> <pre><code>    def infixe(self, ordre=[]):\n        if not self.est_vide():\n            self.gauche.infixe(ordre)\n            ordre.append(self.cle)\n            self.droit.infixe(ordre)\n        return ordre\n</code></pre> <p>Avant de tester, je me dis int\u00e9rieurement que \u00e7a va pas... Il va y avoir une valeur renvoy\u00e9e sur chaque sous-arbre vide... Mais bon p\u00e9dagogiquement il faut leur montrer et leur expliquer pourquoi ensuite...</p> <p>Verdict:</p> <pre><code>&gt;&gt;&gt; a.infixe()\n[2, 4, 5, 7]\n</code></pre> <p>Question 1</p> <p>Pourquoi \u00e7a marche ??? O\u00f9 passent les multiples <code>return</code>???</p> <p>Parce qu'on est d'accord, si on <code>print</code> on a:</p> <p></p><pre><code>&gt;&gt;&gt; a.infixe()\n[]\n[2]\n[2]\n[2, 4]\n[2, 4]\n[2, 4, 5]\n[2, 4, 5, 7]\n[2, 4, 5, 7]\n[2, 4, 5, 7]\n</code></pre> Pourquoi que le dernier <code>return</code>?<p></p> <p>Je m'interroge devant mes \u00e9l\u00e8ves - qui se posent beaucoup moins de questions puisque \u00ab\u00e7a marche\u00bb - et leur dis que je vais r\u00e9fl\u00e9chir. Dont acte, mais en vain, d'o\u00f9 ce billet...</p> <p>On passe \u00e0 la suite.</p>"},{"location":"T09_Extras/Hidden/WTF/#s01e02","title":"S01E02","text":"<p>Puisqu'on r\u00e9cup\u00e8re l'ordre infixe, c'est parti on attaque la suite de la fonction/m\u00e9thode. En cours d'impl\u00e9mentation, un de mes \u00e9l\u00e8ves m'interpelle car il ne comprend pas ce qu'il obtient. Moi non plus.</p> <p>Sa fonction (non finalis\u00e9e) mais il a test\u00e9 \u00e7a avant de comparer les deux listes: </p><pre><code>def is_abr(arbre):\n    return arbre.infixe(), sorted(arbre.infixe())\n</code></pre><p></p> <p>Son test: </p><pre><code>&gt;&gt;&gt; is_abr(a)\n([2, 4, 5, 7, 2, 4, 5, 7], [2, 2, 4, 4, 5, 5, 7, 7])\n</code></pre><p></p> <p>Question 2</p> <p>Mais pourquoi diantre les valeurs se retrouvent en double ??? Dans la m\u00e9thode <code>infixe</code>, <code>ordre</code> est locale, non ??? </p> <p>Je lui ai conseill\u00e9 de stocker d'abord le r\u00e9sultat du parcours infixe dans une variable, il a tent\u00e9:</p> <pre><code>def is_abr(arbre):\n    p = arbre.infixe()\n    return p, sorted(arbre.infixe())\n</code></pre> <p>Idem. </p> <p>Bon moi je pensais plut\u00f4t \u00e0 \u00e7a, qui fait le job:</p> <pre><code>def is_abr(arbre):\n    p = arbre.infixe()\n    return p, sorted(p)\n</code></pre> <p>Bon voil\u00e0 c'est fini, c'est surtout la question 2 qui me chiffonne, je ne comprends pas du tout la gestion de la liste lors de deux appels de la m\u00e9thode <code>infixe</code> successifs.</p> <p>J'esp\u00e8re que je suis clair, et pas trop \u00e0 c\u00f4t\u00e9 de la plaque. Merci de ne pas d\u00e9chirer mon DIU sinon.</p> <p>En tout cas, merci d'avoir lu jusqu'ici...</p> <ol> <li> <p>jeudi 12 janvier 2023.\u00a0\u21a9</p> </li> <li> <p>Vous pouvez d\u00e9j\u00e0 critiquer ce choix...\u00a0\u21a9</p> </li> <li> <p>\u00e7a aussi...\u00a0\u21a9</p> </li> <li> <p>heureusement que Laurent Ch\u00e9no a pris sa retraite et ne lira jamais ce billet.\u00a0\u21a9</p> </li> </ol>"}]}